text = """file name is .NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/obj/Release/.NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
filesummary is: This file is an auto-generated assembly attributes file for a .NET Framework project, specifically indicating the target framework version as .NET Framework 4.7.2. It does not contain any business logic or core functionality and serves primarily as metadata for the compiled assembly. 

In summary, this file is essential for configuration, but it does not contain any direct features or dependencies related to the project's core functionality.


file name is Eroms.AtlanticModel.csproj.FileListAbsolute.txt, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/obj/Release/Eroms.AtlanticModel.csproj.FileListAbsolute.txt, 
filesummary is: The provided file appears to be a list of absolute paths to various output files generated by the build process of the Eroms.AtlanticModel project, including compiled binaries, configuration files, and dependency libraries.

This file does not contain core business logic or documentation, but rather acts as a reference for the build artifacts of the project. 

Summary:
This file lists the output paths of compiled files and dependencies for the Eroms.AtlanticModel project. It includes DLLs for the main application and Entity Framework, along with configuration and debug files. It serves as a build artifact reference rather than containing any functional logic.


file name is .NETFramework,Version=v4.8.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/obj/Release/.NETFramework,Version=v4.8.AssemblyAttributes.cs, 
filesummary is: This file is an autogenerated assembly attributes file for a .NET Framework project, specifically targeting version 4.8. It does not contain any business logic or core functionality; instead, it serves to define assembly-level metadata for the project. Its primary role is to specify the framework version the application is built against, ensuring compatibility with the correct runtime environment.


file name is .NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/obj/Release/.NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
filesummary is: The file is a generated assembly attributes file that defines the target framework for the project it belongs to. This file does not contain any business logic or functional code. It simply indicates that the codebase is targeting .NET Framework version 4.8.1, ensuring compatibility with that specific version of the framework.


file name is .NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/obj/Debug/.NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
filesummary is: This file is an autogenerated assembly attributes file related to the project configuration in a .NET Framework environment. It specifies that the project targets the .NET Framework version 4.7.2. As it does not contain any business logic or core functionality, it merely serves as a configuration detail for the build process.


file name is Eroms.AtlanticModel.csproj.FileListAbsolute.txt, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/obj/Debug/Eroms.AtlanticModel.csproj.FileListAbsolute.txt, 
filesummary is: The file is a list of absolute paths to various output files and dependencies generated during the build process of the Eroms.AtlanticModel project, likely a .NET application. It contains information about compiled binaries, configuration files, and debugging symbols associated with the project.

This file serves as a record of the project's build artifacts, helping in managing the components needed for development and debugging. It does not contain any core business logic or features, thus requiring no further elaboration beyond its role in the development process.


file name is .NETFramework,Version=v4.8.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs, 
filesummary is: The file is an autogenerated assembly attributes file related to a .NET Framework project. It specifies that the project targets .NET Framework version 4.8 and is primarily used for build and compatibility purposes.

This file does not contain core business logic or code logic. It simply defines the target framework for the application.


file name is .NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/obj/Debug/.NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
filesummary is: This file is an automatically generated assembly attributes file related to the .NET Framework version 4.8.1. It specifies the target framework for the project, indicating compatibility with .NET Framework 4.8.1. This file does not contain any core business logic and serves as a configuration artifact for the assembly.


file name is EntityFramework.xml, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/bin/Release/EntityFramework.xml, 
filesummary is: The file EntityFramework.xml is a documentation XML file typically used for describing the structure and behavior of an assembly in .NET, specifically related to Entity Framework. This file contains detailed metadata about various types, methods, and properties of the Entity Framework, which is used for data access in .NET applications.

Summary:
This file documents the types and operations within the Entity Framework assembly, specifically detailing expression visitors and command trees. It outlines the functionality of various methods used for different database operations such as querying, inserting, and modifying data. It enables developers to understand how to work with the Entity Framework through clear descriptions of command trees, expression visitors, and their respective properties and methods.


file name is EntityFramework.SqlServer.xml, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/bin/Release/EntityFramework.SqlServer.xml, 
filesummary is: The file is an XML documentation file related to the EntityFramework.SqlServer assembly in a .NET project. It provides detailed information on various components like functions and members specific to SQL Azure and SQL Server functionalities within the Entity Framework. This file serves to enhance code readability and provide guidance for developers using this library.

This documentation includes descriptions for classes like SqlAzureExecutionStrategy, SqlFunctions, and SqlProviderServices, describing their functionality, method parameters, and return types. It relates to broader codebase operations that handle database interactions and SQL queries, particularly with Azure SQL and SQL Server databases. This file is essential for understanding how to implement database operations effectively.


file name is EntityFramework.xml, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/bin/Debug/EntityFramework.xml, 
filesummary is: This file is an XML documentation file for Entity Framework's command trees related to data manipulation and querying operations. It serves as metadata documentation for various command tree types, operators, and expressions utilized in Entity Framework pipeline processing.

The file provides comprehensive details about structure and usage of several classes and methods including operations like queries, updates, inserts, deletes, and function calls. It also defines various expressions (such as binary, unary, aggregate and so forth) that encapsulate the operations performed on the database in a way that abstracts the underlying SQL operations. 

Key features include support for logical and relational operations, aggregate functions, and command tree constructs allowing developers to work with complex queries in a type-safe manner. This file is essential for maintaining the strength of Entity Framework’s data manipulation capabilities, which depend upon the definitions laid out in this documentation.


file name is EntityFramework.SqlServer.xml, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/bin/Debug/EntityFramework.SqlServer.xml, 
filesummary is: This file is an XML documentation file for the Entity Framework SQL Server provider, specifically detailing the classes and methods it exposes. It provides function stubs for various SQL operations, along with descriptions and parameters, essential for generating SQL commands in applications that utilize the Entity Framework with SQL Server.

The file serves as a reference for developers using Entity Framework to understand how to interact with SQL Server, including handling database interactions, spatial data, and various utility functions that are critical for successful database operation management. Key functionalities include various SQL function implementations, execution strategies for handling transient errors, and definition of operations related to database schema creation and management.


file name is UnmeteredMeterUpdate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UnmeteredMeterUpdate.cs, 
filesummary is: The file UnmeteredMeterUpdate.cs defines a data model class for the UnmeteredMeterUpdate entity within the Eroms Atlantic data context. This class contains properties that represent the attributes of unmetered meter updates, including identifiers, service details, and processing status. It is likely used for database interactions within an Entity Framework context, linking to the ServiceLocation class, and may depend on a database table with the same name.


file name is AMSChargeType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AMSChargeType.cs, 
filesummary is: The file AMSChargeType.cs defines a model class representing an AMS charge type within the Eroms data structure for the Atlantic region. It outlines properties for charge type codes and descriptions, and manages relationships with collections of AMSChargeDetail and AMSChargeDetailEstimatedTDUAndTaxReconciliation. This business context indicates that the charge type is critical for handling various charge details and tax reconciliations, highlighting its integration with related data models.


file name is EdiState.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EdiState.cs, 
filesummary is: The file EdiState.cs defines a part of the data model for the Eroms application related to the Atlantic region. It is a representation of the EdiState entity, including properties such as EdiStateId, StateCode, and Description. This entity is tied to the EdiTransactionMap collection, indicating relationships and dependencies in the database structure, which forms part of the larger data management system.


file name is AccountTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountTransaction.cs, 
filesummary is: The file AccountTransaction.cs defines the AccountTransaction class, which is part of the data model for handling financial transactions within the Eroms system. It includes properties to track transaction details, account associations, and provides collections for related records such as evaluations, payments, and charges.

Key features include:
- Management of various financial attributes like amount, transaction types, and timestamps.
- Relationships with other entities (e.g., Account, InvoicePayment), indicating dependencies on several collections tied to financial processes.
- It supports a computed running balance and keeps track of who made the transaction.

This class is essential for maintaining the integrity of financial operations within the Eroms application.


file name is IndependentLockBoxCheckDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IndependentLockBoxCheckDetail.cs, 
filesummary is: The file IndependentLockBoxCheckDetail.cs defines an entity class used within the Eroms application, specifically related to handling details of lock box checks. It features properties that capture various attributes of each check, such as InvoiceNumber, CheckNumber, AccountNumber, and financial details such as CurrentCharges and BalanceDue.

This class is likely part of a larger data model that interacts with a database table named "IndependentLockBoxCheckDetail", capturing essential information for financial transactions. It may also relate to processes handling payment records and customer invoicing in the application.


file name is MailTemplate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MailTemplate.cs, 
filesummary is: The file MailTemplate.cs is a part of the Eroms.Data.Atlantic namespace and defines the MailTemplate class, which represents a data model for storing email templates used in the application. This class specifies properties such as MailTemplateKey, CompetitiveResellerKey, Name, Template, and timestamps for creation and updates, facilitating the management of email template information in a database.

Key features include:
1. Unique identification for each template via MailTemplateKey.
2. Properties to define the template’s content and metadata, including creation and update information.
3. It may depend on the database table "MailTemplate" for persistence and retrieval of records related to email templates.


file name is AggregatorPosition.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AggregatorPosition.cs, 
filesummary is: The file AggregatorPosition.cs defines a data model class for the AggregatorPosition entity within the Eroms Data Atlantic namespace. This class serves as a representation of an aggregator's position in a spatial and time-sensitive context, utilizing Entity Framework for database interactions. It includes various properties such as AggregatorKey, FromPosition, ToPosition, and AsOfDate, and relates to other entities like Aggregator and Position, suggesting dependencies on those models in the larger codebase.


file name is ServiceLocationHistoricalAverage.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceLocationHistoricalAverage.cs, 
filesummary is: The file defines a data model class called ServiceLocationHistoricalAverage within the Eroms.Data.Atlantic namespace. This class represents a table structure for storing monthly average data for service locations, including properties for each month, creation, and update timestamps. It has a dependency on the ServiceLocation class, which likely provides a relationship to additional service location details in the codebase.


file name is Zip.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Zip.cs, 
filesummary is: The file defines a data model class named Zip, which is part of the Eroms.Data.Atlantic namespace. This class represents a database entity that includes properties for country, state, and zip code, along with a relationship to ChargePlanZip. It serves as a foundational component within the application’s data layer, likely used to manage geographical aspects related to charge plans, thus highlighting dependencies on ChargePlanZip and State classes.


file name is ServiceInvoiceProviderCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceInvoiceProviderCharge.cs, 
filesummary is: The file defines the `ServiceInvoiceProviderCharge` class within the `Eroms.Data.Atlantic` namespace, representing a database entity related to service invoice charges. It includes properties such as `ServiceInvoiceKey`, `ServiceProviderInvoiceChargeDetailKey`, `ChargeCode`, and `Amount`, with relationships to other entities like `ServiceInvoice` and `ServiceProviderInvoiceChargeDetail`. This indicates that it is part of a larger data structure managing service invoicing and may link to relevant tables in the database for invoice management and financial tracking.


file name is ServiceProviderChargeTemplate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderChargeTemplate.cs, 
filesummary is: This file defines the ServiceProviderChargeTemplate class within the Eroms.Data.Atlantic namespace and is part of an Entity Framework model. It encapsulates the structure for managing service provider charge templates, including properties for metadata such as creation timestamps and user information.

Key features include:
- Properties for unique identification (ServiceProviderChargeTemplateKey), user association, and charge plan management.
- Relationships with other entities, specifically a collection of ChargePlans and potentially a ServiceProviderChargeTemplateDetail.
  
Dependencies may involve the ChargePlan entity and related database tables that store charge plan data, contributing to the overall configuration of service provider charges in the application.


file name is ThirdPartyPrintingFullfillmentType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ThirdPartyPrintingFullfillmentType.cs, 
filesummary is: The file defines a data model class for the 'ThirdPartyPrintingFullfillmentType', which is part of the Eroms.Data.Atlantic namespace. This class represents a table in the database that stores information about different types of third-party printing fulfillment methods, characterized by a unique code and a description. It also includes a collection to manage related 'ThirdPartyPrintingParameter' entities, indicating dependencies on that model and potentially on the database schema as well.


file name is ServiceProviderPriorityCode.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderPriorityCode.cs, 
filesummary is: The file defines a class `ServiceProviderPriorityCode`, which represents service provider priority codes in the context of the application. It encapsulates various properties related to priority, service provider information, and allows for associations with related entities such as service charges and audits. This class likely interacts with a database table `ServiceProviderPriorityCode` and depends on other models like `PriorityType`, `ServiceProviderInformation`, and related collections for charges and audits.


file name is Report.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Report.cs, 
filesummary is: The file Report.cs is part of the Eroms Data Atlantic framework and defines a class that represents a report entity in the database. It includes properties for the report's key, code, and name with appropriate data annotations for validation and database mapping. This class likely facilitates the creation, retrieval, and management of report records in an associated database table, enhancing the reporting capabilities of the overall system.


file name is MarketStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MarketStatu.cs, 
filesummary is: The file MarketStatu.cs defines a model class related to the Atlantic segment of the Eroms application. This class appears to represent the "Market Status" entity with two properties: a unique code and a description, both of which are key attributes. As part of the data access layer, it is likely connected to a database, where it may correspond to a table storing market status information, facilitating operations like querying and data management within the application.


file name is FtpType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/FtpType.cs, 
filesummary is: The file FtpType.cs is part of a data model within the Eroms.Atlantic namespace. It defines the FtpType class, which represents the structure of an entity related to FTP types in a database context, including its properties and relationships.

The core features of the FtpType class include defining an FTP type with attributes like Code and Description, and managing a collection of associated FTPSites. This file likely links to database tables storing FTP configurations and may interact with other models representing FTP sites, facilitating the management of FTP-related data in the application.


file name is serviceinvoicestateToBeMoved.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/serviceinvoicestateToBeMoved.cs, 
filesummary is: This file defines a data model for the "serviceinvoicestateToBeMoved" entity within the Eroms.Data.Atlantic namespace. It includes properties that represent various aspects of service invoice states, such as service key, transaction numbers, and various flags indicating the status of invoices. This model is likely used in conjunction with a database for tracking the state of service invoices, relying on Entity Framework for database interactions and data validation.


file name is EmpowerAlertTransactionType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerAlertTransactionType.cs, 
filesummary is: This file defines a data model class called EmpowerAlertTransactionType within the Eroms.Data.Atlantic namespace, relating to the management of transaction types in an alert system. It contains properties that will map to a database table named "EmpowerAlertTransactionType", including a short code, transaction type identifier, and a description. This model interacts with a database and informs the application's handling of transaction types, indicating potential dependencies on a database and table structure for functionality.


file name is EmpowerRole.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerRole.cs, 
filesummary is: The file EmpowerRole.cs defines a class named EmpowerRole that is part of the Eroms.Data.Atlantic namespace. This class represents a model for the "EmpowerRole" database table and includes properties such as RoleID, EmpowerRoleID, and EmpowerRoleBitValue. It establishes a relationship with another entity, aspnet_Roles, which likely indicates a dependency on role management within a user authentication context.


file name is Log.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Log.cs, 
filesummary is: The file Log.cs is a model class representing a database entity for logging purposes within the Eroms.Data.Atlantic namespace. It defines the structure of a Log table, including properties for log identification, message, exception status, creation time, and creator information. This class is fundamental for tracking events or errors within the application and relies on the LogType entity for additional context about the log type.


file name is DepositInterest.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositInterest.cs, 
filesummary is: The file DepositInterest.cs defines a data model for the DepositInterest entity, which is part of a larger codebase managing financial transactions. It outlines the attributes of deposit interest, including keys that reference related entities such as AccountTransaction, ClearingHouse, and DepositRefund. This model is likely used in database operations to track and manage interest deposits associated with specific transactions.


file name is Status.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Status.cs, 
filesummary is: The file Status.cs defines a class for managing the "Status" entity within the Eroms.Data.Atlantic namespace, functioning as part of a data model in an Entity Framework context. It establishes several relationships with various entities through collections, signifying that the status can be associated with multiple elements such as accounts, payments, services, and documents. This structure helps in organizing and managing data cohesively across the application, relying on a database for persistent storage of associated information.


file name is ServiceProviderPaymentQueueDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderPaymentQueueDetail.cs, 
filesummary is: This file defines a model class for the ServiceProviderPaymentQueueDetail within the Eroms.Data.Atlantic namespace. It represents a database table with key fields including identifiers for payment, service providers, and associated invoices, along with metadata like creation details. The class has relationships with other entities such as ServiceProvider and ServiceProviderInvoice, suggesting it is part of a broader system for managing service provider payments and related transactions.


file name is MeteredMeterUpdate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MeteredMeterUpdate.cs, 
filesummary is: The file MeteredMeterUpdate.cs defines a data model class for handling meter updates within the Eroms Atlantic data namespace. It represents core entities related to service locations, meter details, and readings, allowing for tracking of metered services. The class includes properties like MeterNumber, ReadInterval, and Start/EndRead, and establishes relationships with other entities such as ServiceLocation and ServiceLocationUpdate, which are essential for the application's data management.


file name is aspnet_Users.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aspnet_Users.cs, 
filesummary is: The file defines a data model class for users within an application, likely part of an ASP.NET identity framework. This class, aspnet_Users, includes properties related to user information, such as UserId and UserName, as well as relationships to other entities like roles and profiles.

Key features include:
- User identification through UserId and ApplicationId.
- Relationships with aspnet_Applications, aspnet_Membership, aspnet_PersonalizationPerUser, and aspnet_Roles, indicating dependencies on other tables for functionality such as user roles and personalization settings.
- This class is integral to managing user data and authentication within the broader application framework.


file name is HurricaneWarningCounty.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/HurricaneWarningCounty.cs, 
filesummary is: This file is a data model class within the Eroms codebase, specifically related to hurricane warning management. The HurricaneWarningCounty class represents a county associated with hurricane warnings, utilizing data annotations for data validation and Entity Framework for database interaction. It likely interacts with a database to store and retrieve information about counties that are under hurricane warnings, with the County property serving as a unique identifier.


file name is eromsrateinfo.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/eromsrateinfo.cs, 
filesummary is: This file defines a partial class `eromsrateinfo` within the Eroms.Data.Atlantic namespace, representing a database table for storing rate information associated with customer accounts. It includes fields for account attributes like account number, account name, customer type, status, contract dates, and rate type. The class is integral to the data model and likely relates to business processes involving account management and rate calculations, depending on a database structure for data persistence.


file name is CsaService.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CsaService.cs, 
filesummary is: The file CsaService.cs defines a partial class representing the CsaService entity, which is part of the Eroms.Data.Atlantic namespace. This class outlines the properties and relationships relevant to a customer service account within a larger application framework, including keys for competitive resellers, customers, accounts, and service locations. It also manages chronologies related to the CsaService, indicating its function in tracking historical status changes for the service, and relies on relationships with Account and Customer entities.


file name is AccountLinked.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountLinked.cs, 
filesummary is: This file defines the `AccountLinked` entity within the `Eroms.Data.Atlantic` namespace, representing a database table that links accounts in a relational database. The class includes properties for account keys, timestamps for creation and updates, and user information responsible for these actions. It establishes relationships with an `Account` entity, indicating dependencies on the `Account` model and related database tables.


file name is ScheduleType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ScheduleType.cs, 
filesummary is: This file defines the ScheduleType class, which is part of the Eroms.Data.Atlantic namespace. It represents a schedule type in the codebase, detailing its properties such as Code and Description, along with a collection of related ProcessSchedules. This class serves as a model for database interactions and relies on Entity Framework for data mapping and constraints.


file name is SeasonalIndexForRoomCount.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/SeasonalIndexForRoomCount.cs, 
filesummary is: This file defines the SeasonalIndexForRoomCount class, which is part of the Eroms.Data.Atlantic namespace and represents a database table structure in an Entity Framework model. The class captures seasonal index data related to room counts for different dwelling types across various months and includes metadata for tracking creation and updates. It depends on a relational database structure, specifically utilizing properties for defining primary keys and data types applicable to the corresponding database table.


file name is ServiceProviderContact.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderContact.cs, 
filesummary is: The file defines a data model class for managing service provider contacts within the Eroms.Atlantic namespace. This class includes various properties for contact details, including names, phone numbers, email addresses, and social security numbers, thus playing a key role in managing contact information for service providers. The model interacts with a database table called "ServiceProviderContact" and may relate to other components that handle service provider data management or communication processes.


file name is ContractType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ContractType.cs, 
filesummary is: This file defines a class named ContractType, which represents a database entity in the Eroms.Atlantic namespace. It includes properties for a unique code and a description, which are crucial for managing different types of contracts within the application’s database structure. This model depends on Entity Framework for data mapping and likely interacts with a database table named "ContractType".


file name is EmpowerMessageColumnSetting.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerMessageColumnSetting.cs, 
filesummary is: The file EmpowerMessageColumnSetting.cs defines a data model class that represents the settings configuration for messages in the Empower system, particularly focused on how columns are structured and displayed in a grid layout. Key features of this class include properties for stored procedure codes, column names, display text, data types, and configuration for linking to additional data fields. The model relies on Entity Framework for database interactions, indicating that it works with a table named "EmpowerMessageColumnSetting" in the database, which connects to the overall functionality of data management and display within the application.


file name is ServiceProviderPaymentDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderPaymentDetail.cs, 
filesummary is: The provided file is a C# class definition within a larger codebase, specifically related to handling payment details for service providers. It defines the `ServiceProviderPaymentDetail` class, which represents the structure of payment records, including keys, invoice numbers, and associated amounts.

The core features of this file include the mapping of payment details to a database table called "ServiceProviderPaymentDetail." It utilizes Entity Framework annotations for database interactions. The class has relationships with `ServiceProviderInvoice` and `ServiceProviderPayment`, indicating dependencies on these entities to retrieve or manage related data in the application. This setup suggests a focus on financial transactions within the service provider's invoicing system.


file name is TrueUpError.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TrueUpError.cs, 
filesummary is: The file TrueUpError.cs is a model file representing an entity in the Eroms Data Atlantic context. It defines the structure for TrueUpError, which includes properties such as TrueUpKey and Error, and a relationship with another entity, TrueUp. This file is foundational for error tracking within the business logic of the application, likely interacting with a database table named "TrueUpError" to manage records related to true-up discrepancies.


file name is WeatherMoratoriumHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WeatherMoratoriumHistory.cs, 
filesummary is: The file WeatherMoratoriumHistory.cs defines a class that represents a database table for tracking weather moratorium history within the Atlantic data context. It contains properties that serve as the columns of the table, including identifiers, service provider details, location information, and timestamps for creation, updates, and archiving. This class plays a crucial role in managing and storing weather-related data which may be referenced by other components of the application or related databases.


file name is ServiceProviderInvoiceChargeType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderInvoiceChargeType.cs, 
filesummary is: The file ServiceProviderInvoiceChargeType.cs defines a model class for handling service provider invoice charge types within the Eroms Atlantic module. It establishes relationships with other classes representing invoice charges, charge details, and charge taxes, facilitating data interactions. This class is integral to the invoicing system, relying on Entity Framework for database mapping and relationships.


file name is aspnet_Membership.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aspnet_Membership.cs, 
filesummary is: The file aspnet_Membership.cs defines a data model for managing user membership information in the Eroms Atlantic application. It includes properties related to user credentials, account status, and timestamps for various account activities. This model likely interacts with the aspnet_Applications and aspnet_Users tables to manage user authentication and account identity within the application.


file name is ChargeplanServiceProvider.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargeplanServiceProvider.cs, 
filesummary is: This file defines a data model for the ChargeplanServiceProvider entity within the Atlantic module of the Eroms application. It establishes a relationship between charge plans and service providers, capturing their keys and status. Dependencies include the ChargePlan and ServiceProvider entities, suggesting that this model is integral to managing relationships in a billing or service subscription context.


file name is InvoiceMessage.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceMessage.cs, 
filesummary is: The file InvoiceMessage.cs defines a data model for invoice messages within the Eroms.Atlantic namespace. It outlines the structure of the InvoiceMessage class, which includes properties such as InvoiceKey, Message, and ReplicationKey, mapping to a database table called "InvoiceMessage." This model is likely used for handling invoice-related data, interacting with a database through Entity Framework, and may depend on other components in the codebase related to data access and integration.


file name is ScottsPrepaidNumber.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ScottsPrepaidNumber.cs, 
filesummary is: The file ScottsPrepaidNumber.cs is a model class that defines the structure of a database table named "ScottsPrepaidNumber." It includes properties that represent various attributes related to prepaid numbers, such as CompetitiveResellerKey, ValidFrom, and MonthlyRentIndex, as well as metadata for validation and database mapping.

This file is integral to the codebase as it encapsulates key business entities necessary for handling prepaid number data, suggesting that it may be used in conjunction with other components that manage user subscriptions or billing processes. The use of attributes like [Key] and [Table] indicates its direct connection to a database schema, relying on Entity Framework for ORM functionality.


file name is AccountBalanceStateBeingEvaluated.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountBalanceStateBeingEvaluated.cs, 
filesummary is: The file defines a model class for the "AccountBalanceStateBeingEvaluated" entity within the Eroms.Atlantic namespace. This class represents account balance evaluation states and includes properties for account key, run count, creation and update timestamps, as well as a reference to an associated Account entity. It is likely part of a larger application focused on financial data management, possibly with dependencies on a database table structure related to account evaluations.


file name is NotificationSmsIvrContent.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationSmsIvrContent.cs, 
filesummary is: The file NotificationSmsIvrContent.cs is part of the Eroms.Data.Atlantic namespace and defines a model for storing content related to SMS and IVR notifications. It includes properties such as PhoneNumber, Message, and information about the creator and creation date. This model also references the Account and NotificationDetail entities, indicating that it plays a crucial role in managing notification data within the application, potentially requiring integration with a database and related tables for functionality.


file name is ServiceOrderTransactionType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceOrderTransactionType.cs, 
filesummary is: This file defines the `ServiceOrderTransactionType` class, which is part of the data model for the Eroms Atlantic application. It represents transaction types for service orders and includes properties such as `Code` and `Description`. The class establishes a one-to-many relationship with the `ServiceOrder` class, suggesting that each transaction type can be associated with multiple service orders. The class relies on Entity Framework for data access, utilizing annotations for database mapping.


file name is ChaseProfile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChaseProfile.cs, 
filesummary is: The file ChaseProfile.cs defines a data model representing the ChaseProfile within the Atlantic context of the Eroms application. This model captures customer-related details such as personal information, account settings, and billing preferences. It establishes a relationship with the Account entity, suggesting that it is part of a larger database schema for managing customer profiles and their associated accounts.


file name is AgingInterval.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AgingInterval.cs, 
filesummary is: The file defines a class called `AgingInterval` that represents a database entity within the `Eroms.Data.Atlantic` namespace. This class maps to an `AgingInterval` table in a database and includes properties related to aging intervals, such as competitive reseller keys, aging ranges, and descriptions. The file also establishes a relationship with another entity, `AgingGroup`, indicating that it likely interacts with additional tables or models in the context of data management related to aging processes for competitive resellers.


file name is UsageChargeStrategyType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UsageChargeStrategyType.cs, 
filesummary is: The file defines a data model class named UsageChargeStrategyType, which is part of the Eroms.Data.Atlantic namespace. This class represents a table in the database that stores information about usage charge strategies, with properties for a unique code and a description. It likely interacts with other parts of the codebase that handle usage charge calculations or billing features.


file name is InvoiceSiteCodeUsage.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceSiteCodeUsage.cs, 
filesummary is: This file, InvoiceSiteCodeUsage.cs, is part of a data model for the Eroms application, specifically within the Atlantic module. It defines the structure of the InvoiceSiteCodeUsage entity, which relates to invoice processing by capturing key details about service usage, reads, and estimated metrics. This model likely interacts with database tables related to invoices and services, including relationships with Invoice and Service entities.


file name is PeriodicalCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PeriodicalCharge.cs, 
filesummary is: The file PeriodicalCharge.cs defines a class that represents a data model for a Periodical Charge within the Eroms Atlantic system. This class contains properties relevant to billing, such as ChargePlanKey, PeriodicalChargeKey, billing descriptions, taxability, period type, and waiver options. It is linked to related entities including ChargePlan and PeriodType, and can have multiple associated PeriodicalChargeAmounts, indicating a relationship with other parts of the billing process.


file name is ChargePlanStrategyType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanStrategyType.cs, 
filesummary is: This file contains a class definition for ChargePlanStrategyType, which represents a data model in the Eroms Data.Atlantic namespace. It is part of the code responsible for managing charge plan strategies, specifically holding key properties like Code and Description. The class is mapped to a database table called "ChargePlanStrategyType," indicating that it likely interacts with a database to store or retrieve data related to charge plans.


file name is AccountSubLedger.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountSubLedger.cs, 
filesummary is: The AccountSubLedger.cs file defines the AccountSubLedger class representing a data model in the Eroms Data Atlantic namespace. This class encapsulates details about an account sub-ledger, including attributes like AccountSubLedgerKey, AccountKey, and various properties related to the ledger's status and transactions. It establishes relationships with other models such as Account, AccountSubLedgerType, and Pledgor, and includes collections for associated details and transactions, indicating dependencies on these related entities.


file name is AccountTrueUpPayment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountTrueUpPayment.cs, 
filesummary is: The file represents a data model for an entity named AccountTrueUpPayment within the Eroms.Data.Atlantic namespace. It defines the properties and relationships for this entity, including an identifier, foreign keys linking to other entities, and mappings for database storage. The AccountTrueUpPayment class is pivotal for managing payment records related to account true-ups, connecting to AccountTrueUp and Payment entities, implicating dependencies on their respective definitions and database tables.


file name is AuthorizeNetTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AuthorizeNetTransaction.cs, 
filesummary is: The file AuthorizeNetTransaction.cs defines a data model for handling transactions processed via Authorize.Net in the Eroms Atlantic application. It outlines properties that store transaction details, including keys for accounts, transaction identifiers, response codes, and amounts. This model likely connects to a database table named "AuthorizeNetTransaction," and it has dependencies on the Account class for relational data handling.


file name is LockBoxFileError.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/LockBoxFileError.cs, 
filesummary is: The file LockBoxFileError.cs is part of the Eroms.Data.Atlantic namespace and defines an entity model for a LockBox file error in a database context. It outlines the structure and properties of the LockBoxFileError class, which includes various fields like LockBoxFileErrorKey, BatchNumber, and Processed status, reflecting key attributes related to error tracking in financial transactions.

The core features of this file include error logging for LockBox processing, relationships to LockBoxCouponDetail, and properties for tracking the creation and processing of records. The class is intended for use with Entity Framework, indicating it interacts with a database table named LockBoxFileError, and has dependencies on other classes for full functionality, particularly in managing LockBoxCouponDetail records.


file name is ServiceSwitchHold.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceSwitchHold.cs, 
filesummary is: The file ServiceSwitchHold.cs defines a data model for managing service switch holds within the application, indicating its role in tracking the status of service transactions related to accounts. It includes properties for various identifiers, timestamps, and descriptions, reflecting core business logic for managing service holds. This model depends on other entities like Account and Service, and is set up to interact with a database table named ServiceSwitchHold, requiring proper mapping and relationships to function effectively in the codebase.


file name is TaskPriority.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaskPriority.cs, 
filesummary is: This file defines a class called TaskPriority within the Eroms.Data.Atlantic namespace, which represents a model for task priority in the application's database schema. It encapsulates two key properties: Code and Description, which together serve as a composite primary key for the TaskPriority table. This class is likely part of a larger codebase that interacts with a database, specifically within an Entity Framework context, and it may be used for managing task prioritization features in the application.


file name is CollectionQueueAction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CollectionQueueAction.cs, 
filesummary is: This file defines the `CollectionQueueAction` class, which is part of the Eroms.Data.Atlantic namespace. It represents a model for a collection queue action in a database, indicating various communication methods (phone, email, notice) along with keys for the collection and service provider commodities. This class likely interacts with a database entity, suggesting dependencies on database tables for storing and retrieving collection queue actions.


file name is ServiceHistoryStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceHistoryStatu.cs, 
filesummary is: This file, ServiceHistoryStatu.cs, defines a data model for Service History Status within the Eroms Atlantic system. It encapsulates properties such as ServiceKey, Type, and values representing the old and new states of a service. This model typically interacts with a database, storing historical changes related to services and may rely on the Service entity for additional context.


file name is TimeZone.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TimeZone.cs, 
filesummary is: The file is a model class definition for a "TimeZone" entity within the Eroms.Data.Atlantic namespace, representing a part of the data layer in an Entity Framework application. It defines properties such as Code, Description, Country, and TimeZoneDesc along with a relationship to CompetitiveResellerBusinessHour, indicating this model may be used in managing business hours for competitive resellers based on time zones.

This model relies on Entity Framework for database interactions and includes attributes for validation and database mapping, reflecting core business logic concerning time zone management relevant to the application's operations. The CompetitiveResellerBusinessHour collection suggests that other parts of the codebase will interact with or require this data when managing business hours based on different time zones.


file name is AMSChargeDetailEstimatedTDUAndTaxReconciliation.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AMSChargeDetailEstimatedTDUAndTaxReconciliation.cs, 
filesummary is: The file defines a data entity class for the AMSChargeDetailEstimatedTDUAndTaxReconciliation, which represents details related to estimated TDU (Transmission Distribution Utility) charges and tax reconciliations. This class is part of the Eroms.Atlantic namespace and leverages Entity Framework for data modeling. Key features include properties for account and service associations, transaction details, and charge type, with relationships established to other entities like Account and AccountTransaction.

Dependencies include Other related entities such as Account, AccountTransaction, Service, and AMSChargeType, which can be affected as they are used within this class structure. This code plays a crucial role in handling financial records within the Atlantic model, supporting core business functions related to utility charge management.


file name is ServiceLocationCity.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceLocationCity.cs, 
filesummary is: The file ServiceLocationCity.cs defines a data model for the ServiceLocationCity entity within the Eroms Atlantic namespace. It represents the structure of a database table with various properties that capture the details of service locations, including fields such as address, city, state, and multiple identifiers. This model likely interacts with a database, requiring dependency on Entity Framework for data manipulation and may be utilized in features relating to service provider management, location tracking, or customer service operations.


file name is SecurityDeposit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/SecurityDeposit.cs, 
filesummary is: The file SecurityDeposit.cs defines a data model for managing security deposit records within the Atlantic context of the Eroms application. It includes properties for essential details such as the Security Deposit ID, Customer ID, deposit amounts, and relevant dates. This model likely interacts with a database table named "SecurityDeposit" and may be used in conjunction with other entities related to customer transactions or financial records.


file name is ImageMap.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ImageMap.cs, 
filesummary is: The file is a data model class that represents an "ImageMap" entity in the context of the larger codebase. It defines properties related to the image mapping functionality, including a unique identifier (Code), a description, and a reference to an associated Image entity.

Features of this code include defining the structure of the ImageMap, enforcing data integrity through annotations like Required and StringLength, and establishing a relationship with the Image entity. This class may depend on related database tables, specifically for the Images, which could be crucial for managing image data in conjunction with the ImageMap.


file name is ServiceOrderType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceOrderType.cs, 
filesummary is: The file is a model class representing the `ServiceOrderType` entity in a codebase related to services in the Atlantic region. It defines core business attributes of a service order type, such as a unique code and a description, and establishes a relationship with a collection of `ServiceOrder` instances. This class interacts with a database table named `ServiceOrderType`, indicating integration with a data layer to manage service order types in the application.


file name is InvoiceSiteCodeDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceSiteCodeDetail.cs, 
filesummary is: This file defines the `InvoiceSiteCodeDetail` entity within the `Eroms.Data.Atlantic` namespace and represents a table in the database that holds detailed invoicing information related to service locations and line items. 

The class includes properties such as `InvoiceKey`, `ServiceLocationKey`, and others that correspond to invoice details like description, amount, and charge keys. It is tied to other entities like `Invoice` and `Service`, indicating dependencies on additional data structures within this codebase to manage invoicing and related services effectively.


file name is ChargePlanType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanType.cs, 
filesummary is: This file defines a class named ChargePlanType within the Eroms.Data.Atlantic namespace, which represents a model for charge plan types in a database context. It includes properties for Code and Description, and establishes a relationship with ChargePlan through a collection. The file is part of the data access layer and likely interacts with the database to manage charge plans associated with different types.


file name is RecurringPaymentEvent.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/RecurringPaymentEvent.cs, 
filesummary is: The file RecurringPaymentEvent.cs is part of the Eroms.Data.Atlantic namespace and defines the RecurringPaymentEvent class as part of the core data model in the Atlantic module. It represents a recurring payment event with properties for a unique code, description, and a collection of associated recurring payments. This class relies on Entity Framework for database interaction and may interact with a database table named "RecurringPaymentEvent," indicating a connection to other data models in the codebase that manage recurring payments.


file name is CommunicationChannel.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CommunicationChannel.cs, 
filesummary is: The file CommunicationChannel.cs defines a class that represents the structure of the "CommunicationChannel" entity within the Eroms.Data.Atlantic namespace. This class is part of the data model and is used in the context of a database, likely requiring interaction with other entities such as "Note". 

The core features include properties for managing a unique identifier (Code), a description, and a status for each communication channel. The class establishes a one-to-many relationship with notes, suggesting that each communication channel can have multiple associated notes. It relies on Entity Framework conventions to manage database interactions.


file name is AccountTransactionType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountTransactionType.cs, 
filesummary is: The file is part of a data model within the Eroms application, specifically focusing on account transaction types. It defines the structure of the AccountTransactionType class, which includes properties like Code and Description, and maintains a relationship with AccountTransaction entities.

Key Features:
- Represents types of account transactions with a unique code and a description.
- Includes a collection to link to related account transactions, enabling relational data management.

Dependencies:
- Relies on the AccountTransaction class and potentially interacts with a database table named AccountTransactionType for data storage.


file name is TaskHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaskHistory.cs, 
filesummary is: The file TaskHistory.cs defines a partial class named TaskHistory within the Eroms.Data.Atlantic namespace. It represents a model for managing task history records in a database, encapsulating properties such as TaskKey, Title, AssignedTo, DueOn, and status indicators including TaskStatus and TaskPriority. This class likely interacts with a database table named TaskHistory and is part of a larger system that handles task management or tracking features, potentially depending on database frameworks like Entity Framework for data operations.


file name is PaperlessBilling.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PaperlessBilling.cs, 
filesummary is: The file defines the "PaperlessBilling" class as part of the Eroms.Data.Atlantic namespace, which models the paperless billing feature within the system. The class includes properties such as identifiers for billing and account management, timestamps for creation and updates, user tracking, and a status flag indicating paperless billing preference. This class relies on integration with the "Account" class and is likely tied to a database table called "PaperlessBilling," involving database configurations and entity relationships.


file name is emPowerAudit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/emPowerAudit.cs, 
filesummary is: The file emPowerAudit.cs is a data model that represents an audit entity for tracking changes made to database records within the Eroms.Data.Atlantic namespace. It defines the properties related to audit entries, including identifiers, action type, transaction details, and user information. This model likely interacts with a database table named "emPowerAudit," which stores historical data for monitoring changes, enhancing the accountability of data management in the larger codebase.


file name is ServicesIgnored.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServicesIgnored.cs, 
filesummary is: This file is a part of the data model for the Atlantic section of the Eroms codebase and defines the "ServicesIgnored" entity. It includes properties such as account number, account name, service key, and start date, with foreign key relationships to a Service entity. This model likely interacts with a database, specifying how to ignore certain services for specific accounts, and may be used in business logic related to service management.


file name is BatchEnrollmentSheet.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/BatchEnrollmentSheet.cs, 
filesummary is: The file is a part of the data model within the Eroms codebase, specifically for handling batch enrollment sheets. It defines the attributes and behaviors of the BatchEnrollmentSheet entity, which is essential for managing bulk enrollment data in the system.

The BatchEnrollmentSheet includes properties such as a unique identifier, upload details (URL, timestamp, uploader's username), and a collection of related AccountEnrollments. This ties into the larger codebase by supporting the functionality of enrolling accounts in batches, handling multiple associations with the AccountEnrollment class. The data is likely stored in a corresponding "BatchEnrollmentSheet" table in the database, and the functionality may depend on other components that manage AccountEnrollments and user file uploads.


file name is GeneralLedgerPostingAccount.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/GeneralLedgerPostingAccount.cs, 
filesummary is: This file defines a class named GeneralLedgerPostingAccount, which is part of the Eroms.Data.Atlantic namespace in the context of a financial application. It models the structure of a general ledger posting account, detailing properties such as competitive reseller key, journal type, associated credit and debit accounts, status, and timestamps. 

The class is linked to other entities, including GeneralLedgerAccount and GeneralLedgerJournalType, indicating it plays a role in managing financial transactions within the application. It also enforces data integrity with attributes for required fields and length constraints.


file name is AccountHistoryStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountHistoryStatu.cs, 
filesummary is: The file AccountHistoryStatu.cs defines a data model class within the Eroms.Data.Atlantic namespace, specifically used for tracking the history of account statuses. This class includes properties for managing historical data such as replication keys, account identifiers, status type, old and new values, creator details, and timestamps, which are crucial for auditing account changes. 

Dependencies include the Account class, which represents the related account entity potentially linking to a database, encompassing operations like updates and maintaining historical integrity of account status changes.


file name is ServiceLocationHistoricalDemand.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceLocationHistoricalDemand.cs, 
filesummary is: The file defines a data model class for Service Location Historical Demand within the Eroms Atlantic Module. It represents a database table with key attributes for monthly demand data, as well as metadata for record creation and updates. This class is likely used in data management operations with dependencies on the ServiceLocation entity and a database context to persist historical demand data.


file name is ServiceProviderDocument.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderDocument.cs, 
filesummary is: The file is part of the Eroms codebase and defines the ServiceProviderDocument class, which represents a database entity in the Atlantic module of the application. It includes properties like ServiceProviderDocumentKey, DocumentName, DocumentURL, and timestamps for creation and updates, establishing a structure for handling service provider documents.

Key features include managing various documents related to service providers, with relationships to usage charges through usage utilities. It relies on a database table named ServiceProviderDocument and links to the UsageChargeByUtility class, indicating dependencies on other components for full functionality.


file name is AccountAggregator.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountAggregator.cs, 
filesummary is: The file AccountAggregator.cs defines the AccountAggregator class, which represents a model in the Eroms.Data.Atlantic namespace for managing accounts associated with aggregators. It establishes relationships with other entities such as Account, Aggregator, and PaymentPlan, indicating that it plays a vital role in tracking account and payment details, including assignment dates and status. This class depends on various identifiers and related models, signifying its integration in a broader data management or payment processing context within the application.


file name is McpePowerRegionCombinationType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/McpePowerRegionCombinationType.cs, 
filesummary is: The file McpePowerRegionCombinationType.cs defines a data model for the "McpePowerRegionCombinationType" class within the Eroms.Data.Atlantic namespace. This class serves as a representation of a database table, mapping its fields and relationships, particularly featuring a unique identifier (Code), a descriptive string (Description), and a collection of associated MCPEPowerRegion objects. This model is part of a larger codebase that likely handles data related to power regions and their combinations, potentially serving an application that deals with energy distribution or management. Dependencies include Entity Framework and possibly a database schema that includes the "McpePowerRegionCombinationType" table linked to the "MCPEPowerRegion" class.


file name is NotificationDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationDetail.cs, 
filesummary is: The file NotificationDetail.cs is a data model class that represents the structure of the NotificationDetail table within the database. It is part of the Eroms.Data.Atlantic namespace and serves to encapsulate properties related to notification details, including fields for statuses, timestamps, and related notifications. This class also defines relationships with other entities, indicating dependencies on Notification, NotificationDeliveryMethod, and collections of NotificationMails and NotificationSmsIvrContents, suggesting it plays a crucial role in the notification processing feature of the larger codebase.


file name is AccountDocument.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountDocument.cs, 
filesummary is: The file AccountDocument.cs defines a class that represents an account document in the system. It outlines the structure of the AccountDocument entity, including various properties such as AccountDocumentKey, AccountKey, and metadata related to the document. This class is crucial for managing documents associated with accounts, and it includes references to related entities like Account and DocumentCategory, indicating dependencies on those components for full functionality.


file name is TaxChargeEntry.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaxChargeEntry.cs, 
filesummary is: The file TaxChargeEntry.cs is part of the Eroms.Data.Atlantic namespace, and it defines the TaxChargeEntry class, which is mapped to the TaxChargeEntry table in a database. This class encapsulates properties related to tax charges, including tax authority, location, type, description, and totals, as well as defining relationships with other entities such as AccountTransaction and Service. It plays a crucial role in the codebase’s financial calculations related to taxation, and it relies on attributes like Entity Framework for database management, indicating dependencies on database tables and other related business logic components.


file name is ServiceProviderRemittance.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderRemittance.cs, 
filesummary is: The file `ServiceProviderRemittance.cs` defines the `ServiceProviderRemittance` class, which represents a model in the Atlantic namespace related to financial transactions for service providers. It encapsulates properties such as payment details, amounts, transaction metadata, and has relationships with other entities like `GeneralLedgerTransaction` and `ServiceProvider`. Dependencies include a database table named "ServiceProviderRemittance" and associations with related models to manage transaction details effectively.


file name is Printer.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Printer.cs, 
filesummary is: The file Printer.cs defines a data model for the Printer entity within the Eroms Data Atlantic namespace. It outlines key properties including CompetitiveResellerKey, Code, and Description, and establishes a one-to-many relationship with ProcessSchedule entities. This file is essential for managing printer data in the application, potentially involving database interactions based on Entity Framework, representing a structure for storing and retrieving printer-related information.


file name is AggregatorPaymentPlan.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AggregatorPaymentPlan.cs, 
filesummary is: The file AggregatorPaymentPlan.cs defines a model for the AggregatorPaymentPlan entity within the Eroms.Data.Atlantic namespace. This model represents a payment plan associated with an aggregator, including key attributes like PaymentPlanKey, AggregatorKey, validity dates, and status. It establishes relationships with other entities such as Aggregator and PaymentPlan, indicating dependencies on these entities for business logic related to payment processing.


file name is ServiceChargePlanUsageBasedRateAdder.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceChargePlanUsageBasedRateAdder.cs, 
filesummary is: The file is a C# class definition that represents a database entity for service charge plans with usage-based rate adders. It defines properties that store relevant information, including keys, types, values, and creation details, and establishes a relationship with another entity, UsageBasedAdderType. 

This class is part of a larger data access layer, likely related to billing or charge calculation features in the application, and it interacts with the database to manage records associated with service charge plans based on usage.


file name is UnmeteredMeterInitial.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UnmeteredMeterInitial.cs, 
filesummary is: The file UnmeteredMeterInitial.cs is a data model representing an entity in the codebase related to unmetered meter readings within the context of a utility or service management application. It defines properties such as ServiceLocationKey, ServiceKey, and InitialReadDate, which are essential for tracking the service and location of unmetered services.

Key features include the mapping to the UnmeteredMeterInitial table in the database, and it has relationships with the Service and ServiceLocation entities, indicating dependencies on these models for full functionality. This file is part of the core logic for managing service data in the application.


file name is AccountTrueUpDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountTrueUpDetail.cs, 
filesummary is: The file AccountTrueUpDetail.cs defines a data model class for the "AccountTrueUpDetail" entity within the Eroms.Data.Atlantic namespace. This class contains properties that represent the details of account adjustments, including fields for description, amount, and various boolean flags such as Estimated, Actual, and Invoice.

The AccountTrueUpDetail class is likely part of a larger codebase that manages accounting or financial data, interacting with an "AccountTrueUp" entity which may reference other financial details or summary tables. It potentially relies on a database table named AccountTrueUpDetail for persistence, enabling functionalities related to account financial adjustments.


file name is AccountPaymentMethodBlocked.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountPaymentMethodBlocked.cs, 
filesummary is: The file AccountPaymentMethodBlocked.cs is a data model representing the "AccountPaymentMethodBlocked" entity in the Eroms system, potentially as part of its payment processing features. This class defines properties such as keys and descriptions related to blocked payment methods for accounts, emphasizing the relationships between accounts and their respective payment methods. It likely interacts with a database, requiring appropriate database tables for Accounts and payment methods to function correctly in the broader application.


file name is ControlNumber.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ControlNumber.cs, 
filesummary is: The file ControlNumber.cs defines a data model for the ControlNumber entity within the Eroms Atlantic module. It includes properties such as ServiceTransactionKey, ControlNumber1, and Application, with relationships to the Application entity, indicating it is part of the business logic layer that persists transaction control numbers in a database. This model likely interacts with database tables to ensure the integrity and management of service transactions within the broader system.


file name is ServiceInvoiceNonRecurringCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceInvoiceNonRecurringCharge.cs, 
filesummary is: This file defines a part of the data model for a system dealing with service invoices in the Atlantic domain. It represents the ServiceInvoiceNonRecurringCharge entity, which captures non-recurring charges associated with service invoices. This model relies on relationships to other entities, specifically NonRecurringCharge and ServiceInvoice, indicating dependencies on their respective definitions and likely database tables for proper functioning.


file name is CustomerInfo.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CustomerInfo.cs, 
filesummary is: The file CustomerInfo.cs defines a model class representing customer information within the Eroms data framework specifically for the Atlantic region. This class includes properties for storing the customer's unique identifier and name, along with a collection of related invoice aging records, indicating a relationship with invoice management features. It relies on Entity Framework attributes for database integration, particularly mapped to the "CustomerInfo" database table, and highlights dependencies on invoice-related structures through its collection.


file name is ModifiedAdjustmentAccountCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ModifiedAdjustmentAccountCharge.cs, 
filesummary is: The file ModifiedAdjustmentAccountCharge.cs defines a data model class within the Eroms.Data.Atlantic namespace. It represents a database entity named ModifiedAdjustmentAccountCharge, which holds various attributes related to account adjustments, such as keys, amounts, and associated metadata. The class is crucial for managing financial transactions and adjustments within the application, interacting with a database that likely includes tables for accounts, invoices, and transactions.


file name is NotificationDetailStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationDetailStatu.cs, 
filesummary is: The file NotificationDetailStatu.cs defines a class that represents the status of notifications within the Eroms Data Atlantic context. This class includes properties for a unique status code and a description, and it establishes a relationship with a collection of NotificationDetail objects, indicating a potential one-to-many relationship in the database. The file is crucial to the core functionality of the application, as it encapsulates a fundamental business concept related to notifications and their statuses. It may depend on database tables related to notifications and requires appropriate Entity Framework configurations for data access.


file name is AggregatorFee.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AggregatorFee.cs, 
filesummary is: The file AggregatorFee.cs defines a data model for managing aggregator fees within the Eroms application, specifically under the Atlantic namespace. It includes properties for key identifiers such as AggregatorKey and AggregatorFeeID, as well as fields related to commission details, time frames, and related entities like customers and premises. This class is part of the entity framework used for database interactions and dependencies may include related tables for aggregators, customers, and commissions.


file name is ServiceProvider.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProvider.cs, 
filesummary is: The file `ServiceProvider.cs` defines the `ServiceProvider` class, which models a service provider in the Eroms Atlantic data context. It encapsulates various properties and collections representing relationships to other entities like charge plans, service locations, and invoices.

Key features include unique identifiers for the service provider, metadata, billing information, and various related collections. The class is linked to multiple other entities, highlighting its role in managing complex relationships within the business context, likely within a utility or electricity management application. Dependencies include entities like `Address`, `ChargeplanServiceProvider`, `ServiceLocation`, and tables for billing and service details.



file name is ServiceAggregator_Old.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceAggregator_Old.cs, 
filesummary is: This file defines a data model called ServiceAggregator_Old within the Eroms.Data.Atlantic namespace. It represents a database table with various properties related to service aggregation, including keys for identification, assignment dates, status, and payment plan references. The model likely interacts with a database to track and manage service aggregators, contributing to the overall functionality of the system related to service management.


file name is NonRecurringPaymentEvent.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NonRecurringPaymentEvent.cs, 
filesummary is: The file defines a data model for a "NonRecurringPaymentEvent" in the context of the Eroms.Atlantic namespace. This class represents a database table and holds properties like 'Code' and 'Description', which are essential for identifying and describing non-recurring payment events. It establishes a relationship with a collection of "NonRecurringPayment" entities, indicating that this model is integral for managing payment events in the application and may interact with a database for operations related to these payment records.


file name is LiteUpFile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/LiteUpFile.cs, 
filesummary is: The file LiteUpFile.cs is a data model class representing a table called "LiteUpFile" in the database, part of the Eroms.Data.Atlantic namespace. It defines properties for file details such as keys, timestamps, a record count, and associated file data. This model is crucial for handling data related to file processing within the application, potentially involving relationships with third-party payment providers and associated lite-up file data records.


file name is WorkFrequencyType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WorkFrequencyType.cs, 
filesummary is: The file defines the `WorkFrequencyType` class, which is part of the data model in the Eroms Atlantic module. It represents a database entity corresponding to a table named "WorkFrequencyType," containing properties for a unique code, a description, and a collection of related `WorkGroup` entities. This file is crucial for managing work frequency definitions and their relationships within the application, likely influencing how data is queried and displayed in relation to work group assignments.


file name is TaskAssignment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaskAssignment.cs, 
filesummary is: The file TaskAssignment.cs contains a class definition for TaskAssignment, which models the relationship between tasks and users responsible for them. It is part of the Eroms.Data.Atlantic namespace and serves to structure data related to task assignments, including properties such as AssignedTo, CreatedBy, CreatedAt, and IsActive. This class is likely related to a wider codebase dealing with task management and may interact with a database table named "TaskAssignment" to store and retrieve task-related information.


file name is Pledgor.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Pledgor.cs, 
filesummary is: The file Pledgor.cs defines a class that represents a Pledgor entity within the Eroms.Data.Atlantic namespace. This class includes properties for essential information such as PledgorKey, organization, description, and timestamps for creation and updates. It establishes relationships with other entities, including AccountSubLedger, Address, and Contact, which are integral to the business logic and data management within the application.


file name is ServiceProviderInvoiceLateFee.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderInvoiceLateFee.cs, 
filesummary is: This file defines the `ServiceProviderInvoiceLateFee` class, which represents a model in the Eroms Atlantic project. It outlines the properties related to fees associated with late invoices for service providers, including attributes like `ChargeCode`, `Amount`, and `Rate`. This class has relationships with other entities, such as `GeneralLedgerTransaction` and `ServiceProviderInvoice`, indicating dependencies on these models for proper functioning in the codebase.


file name is CsaServiceChronology.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CsaServiceChronology.cs, 
filesummary is: The file defines the CsaServiceChronology class, which appears to be part of the data model for an application within the Eroms Data Atlantic namespace. This class captures a record of actions related to Continuing Service Agreements (CSA), including attributes like the key, action type, who performed the action, and when it occurred.

Key features include tracking action metadata for CSA services and establishing relationships with other entities, specifically 'CsaService' and 'CsaServiceAction'. This class likely interfaces with a database table named "CsaServiceChronology" and may interact with other models, enhancing overall service management functionality in the application.


file name is InvoiceCycle.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceCycle.cs, 
filesummary is: The file InvoiceCycle.cs defines the InvoiceCycle class as part of the Eroms.Data.Atlantic namespace, representing a model related to invoice processing within an application. It includes properties that manage the invoice cycle's details, such as unique identifiers, naming, time frames, and associated accounts. The class establishes a relationship with AccountInvoiceState, indicating that multiple invoice states can correspond to a single invoice cycle, thus potentially affecting how invoices are tracked and managed in the business context.


file name is ServiceLocation.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceLocation.cs, 
filesummary is: The ServiceLocation.cs file is a model definition within the Eroms.Data.Atlantic namespace, representing a service location entity in a database. It captures essential address details and relationships to various other entities such as service providers and meters. This file is crucial for managing service locations and their associated services, requiring precise data integrity and relationships to ensure effective operations in the broader codebase. 

Key Features:
- Defines properties such as ServiceLocationKey, SiteCode, Address, City, State, and associated collections for meter details and service relationships.
- Establishes multiple relationships with other entities, including AmpServiceProviderChargeDetail, Meter, and Service.
- Contains attributes for data validation and schema mapping for seamless database interaction. 

Dependencies may include connected data models, database tables, and external services related to service provisioning and meter management.


file name is AchPaymentType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AchPaymentType.cs, 
filesummary is: This file defines the AchPaymentType class, which represents a payment type in the Atlantic data model. It includes properties like Code, Description, Empower, and PortalAndMobile, and establishes a relationship with ACHPaymentProfileInformation. This class is part of the data layer, likely used for managing payment types in a larger system involving financial transactions.


file name is SecurityDepositInterest.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/SecurityDepositInterest.cs, 
filesummary is: The file SecurityDepositInterest.cs defines the SecurityDepositInterest class within the Eroms.Data.Atlantic namespace. It models a database table intended to store information related to security deposits, including interest rates, deposit amounts, and related dates. This class relies on Entity Framework for database interaction, indicating its role in managing financial data associated with security deposits, and it is likely linked to other database tables that represent security deposits and their transactions.


file name is AccountHistoryAccountBegin.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountHistoryAccountBegin.cs, 
filesummary is: The file defines the `AccountHistoryAccountBegin` class within the `Eroms.Data.Atlantic` namespace, which serves as a model for tracking changes in account history. It features properties such as `ReplicationKey`, `AccountKey`, and timestamps (`OldValue`, `NewValue`, `CreatedAt`), along with a reference to an `Account` object, indicating a relationship with the account's details. This class may rely on Entity Framework for database operations and is likely tied to the "AccountHistoryAccountBegin" table in the database.


file name is IncomingEdiFileST.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IncomingEdiFileST.cs, 
filesummary is: This file defines a data model for the "IncomingEdiFileST" table within the Eroms Data Atlantic namespace. It represents the structure of incoming EDI files, including key identifiers like SenderID, ReceiverID, and control numbers. The model uses Entity Framework attributes for database mapping, and it has a relationship with the "IncomingEdiFileG" entity, indicating dependent data connections in the application.


file name is AccountConversion.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountConversion.cs, 
filesummary is: The file AccountConversion.cs is part of the Eroms.Data.Atlantic namespace and defines an entity class for managing account conversions within the codebase. The class contains properties that track various details, such as the account keys, types of account conversions, and metadata related to the account transition process. It interacts with other entities like Account, AccountCharge, and ServiceTransaction, indicating dependencies on those models and possibly their respective database tables.


file name is InvoiceStyle.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceStyle.cs, 
filesummary is: The file InvoiceStyle.cs is part of a data model within the Eroms.Atlantic namespace, specifically relating to an invoice style entity in the codebase. It defines an InvoiceStyle class with properties for a unique code and description, representing core features related to invoice management.

This file serves a critical role in database interactions, likely linking to an "InvoiceStyle" table in the database, and it may interact with other components that handle invoice processing and style management. There are no business logic operations in this file; it strictly outlines the data structure needed for the application to function seamlessly with the database.


file name is EmpowerUsagePattern.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerUsagePattern.cs, 
filesummary is: The file EmpowerUsagePattern.cs defines a data model for tracking user session patterns within the Atlantic application context of the Eroms codebase. It contains properties like SessionId, UserName, RoleName, and UrlVisited which reflect user interaction data, alongside metadata such as CreatedAt and CreatedBy. This model likely interacts with a database table named "EmpowerUsagePattern" and may be used by other components that analyze or report on user behavior.


file name is EmpowerVersion.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerVersion.cs, 
filesummary is: This file defines the EmpowerVersion class within the Eroms.Data.Atlantic namespace, indicating its role as part of the data model related to the Atlantic region. The EmpowerVersion class contains properties for managing release information, such as an ID, release date, and release number, which are likely used in tracking software versions in the codebase. It is dependent on Entity Framework for data access, and might integrate with databases where the EmpowerVersion table stores versioning details.


file name is DocumentReference.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DocumentReference.cs, 
filesummary is: The file DocumentReference.cs defines a model class used in the Eroms.Data.Atlantic namespace, specifically representing a database table called DocumentReference. It includes properties for DocumentId, AccountKey, ChargePlanKey, and NotificationKey, establishing relationships with a Document entity. This class is part of the data layer, likely interacting with a database to manage document-related information and may be utilized by other components that manage data persistence and retrieval within the application.


file name is CompetitiveResellerPrepaidMeasureType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CompetitiveResellerPrepaidMeasureType.cs, 
filesummary is: The file CompetitiveResellerPrepaidMeasureType.cs is part of the Eroms.Data.Atlantic namespace and defines a model class for a database table related to competitive reseller prepaid metric types. It includes key properties such as CompetitiveResellerKey and PrepaidMeasureType, emphasizing a relationship with another type, PrepaidMeasureType. This model is likely used within a larger application that tracks or manages prepaid measures for competitive resellers, with dependencies on a database to store and retrieve this data.


file name is CommodityPricing.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CommodityPricing.cs, 
filesummary is: This file defines a data model for commodity pricing within the Eroms project, specifically under the Atlantic segment. It includes properties related to commodity types and pricing types, suggesting it plays a critical role in handling and structuring pricing data for various commodities. The class is linked to a database table named "CommodityPricing," indicating dependencies on a database for storage and retrieval operations, pertinent to financial or resource management features in the application.


file name is TrueUpServiceProviderInvoiceChargeDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TrueUpServiceProviderInvoiceChargeDetail.cs, 
filesummary is: The file is a data model representing the structure for the "TrueUpServiceProviderInvoiceChargeDetail" entity within the Eroms application. This entity contains properties such as TrueUpKey, ServiceProviderInvoiceChargeDetailKey, Description, Amount, and ReplicationKey, which are crucial for managing invoice details related to service provider charges.

Key Features include:
- Represents detailed information about invoice charges linked to a "True Up" process.
- Dependencies on other models like ServiceProviderInvoiceChargeDetail and TrueUp, indicating relationships to additional data.
- Core business context revolves around financial interactions in service provision, likely involving invoice reconciliation and reporting.


file name is AccountSubLedgerDetailPayment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountSubLedgerDetailPayment.cs, 
filesummary is: The file is part of a core data model related to financial transactions within the Eroms application. It defines the AccountSubLedgerDetailPayment class, which represents payment details linked to an account sub-ledger. This includes properties for payment keys, amount, and tracking of payment status, with references to other entities like AccountSubLedgerDetail and Payment, indicating relationships with other database tables.


file name is SecurityDepositDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/SecurityDepositDetail.cs, 
filesummary is: The file SecurityDepositDetail.cs is a data model class within the Eroms.Data.Atlantic namespace, representing the structure of a SecurityDepositDetail entity in the Atlantic system. This class defines properties such as SecurityDepositDetailID, SecurityDepositID, and SecurityDepositDetailTypeID, which are likely used to manage security deposit records in a database. Additionally, it includes fields for optional details like CheckNumber, Amount, PaymentTypeID, PostDate, and DeletedByUserID, which may relate to processing or tracking financial transactions associated with security deposits. It is expected to interact with a database table named "SecurityDepositDetail."


file name is Contact.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Contact.cs, 
filesummary is: The file Contact.cs defines a data model for a 'Contact' entity in the Eroms application, which seems to handle customer or user information. This class includes various fields such as names, contact numbers, email, and status, and establishes relationships to other entities like Account, AggregatorContact, and Pledgor. It relies on Entity Framework for ORM, indicating relationships with a database table named 'Contact' and dependencies on specific classes for handling preferred contact methods and statuses.


file name is ThirdPartyPrintingParameterType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ThirdPartyPrintingParameterType.cs, 
filesummary is: This file defines the `ThirdPartyPrintingParameterType` class within the `Eroms.Data.Atlantic` namespace, which models a database table for managing printing parameter types in a third-party printing context. It contains properties like `Code` and `Description`, along with a collection of related `ThirdPartyPrintingParameter` entities. This class likely interacts with a database and is part of a system that handles printing configurations, possibly affecting features related to third-party printing operations.


file name is ServiceHistoryStartDate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceHistoryStartDate.cs, 
filesummary is: The file defines a class called ServiceHistoryStartDate within the Eroms.Data.Atlantic namespace, which represents a table in the database. This class contains properties that track changes to a service's history, including fields for old and new date values, as well as metadata such as who created the record and when.

Key features include tracking service changes with timestamps and user information, indicating a focus on maintaining service history. The class has a dependency on a Service entity, suggesting that it relates to a larger system that manages various services and their historical data.


file name is CustomField.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CustomField.cs, 
filesummary is: The file CustomField.cs defines a data model representing a "CustomField" in the Eroms data framework. It includes properties for various attributes, such as label, control type, and validation options, and maintains relationships with other models relating to the collection and display of custom fields.

Key features include the creation and management of custom fields that can be edited and validated, along with timestamps for record keeping. It relies on several related models like CustomFieldCollectionPage and CustomFieldDisplayLocation, indicating interdependencies with these components for functionality in the larger context of the application.


file name is DepositInterestAccrued.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositInterestAccrued.cs, 
filesummary is: The file DepositInterestAccrued.cs is part of the Eroms.Data.Atlantic namespace and defines the DepositInterestAccrued class, which represents a database table for tracking interest accrued on deposit accounts. This class includes properties such as DepositInstallmentKey, AccountNumber, and InterestAccrued, which are key to managing financial records associated with deposits.

The primary features of this file involve defining the schema for the DepositInterestAccrued table within a database, including data types and constraints on the various fields. It depends on Entity Framework for ORM functionality, linking it to underlying database structures related to deposit transactions and accounts. This functionality is crucial for financial applications that require accurate tracking of interest on deposits.


file name is AccountActivityDTO.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountActivityDTO.cs, 
filesummary is: The file `AccountActivityDTO.cs` is a data transfer object (DTO) used in the Eroms Atlantic codebase for managing account activity data. It encapsulates various properties related to account transactions, such as transaction details, ledger types, date information, and amounts. This class likely interacts with a database to retrieve and manipulate records from the "AccountActivityDTO" table, and it has a relationship with the "Account" entity.


file name is AccountChronologyDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountChronologyDetail.cs, 
filesummary is: The file AccountChronologyDetail.cs defines a data model class for the "AccountChronologyDetail" table within a database. It outlines the structure of the data, including properties such as account keys, old and new values, and change reason, which are essential for tracking changes in account details. The file is likely part of a larger codebase dealing with data persistence and manipulation, particularly for financial or account-related transactions. 

The class acts as a representation of the underlying database table and is dependent on the Entity Framework for database interactions. This model is crucial for auditing changes in account information and may interact with other components related to user accounts or transaction histories.


file name is PromotionPeriod.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PromotionPeriod.cs, 
filesummary is: The file PromotionPeriod.cs is a model class within the Eroms.Data.Atlantic namespace that defines the structure of the PromotionPeriod entity used in the context of an application. It represents a database table called "PromotionPeriod" with properties for a unique Code, a Description, and a collection of associated ChargePlans. This file plays a crucial role in the data layer of the application, facilitating the interaction with relevant database tables which include the ChargePlan related entities.


file name is RiskModel.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/RiskModel.cs, 
filesummary is: The file RiskModel.cs defines a data model class called RiskModel, which represents a risk assessment entity in the Eroms Atlantic coding framework. It includes properties such as Code, Description, IsEnabled, and relationships to other entities like CreditCheckBureau and a collection of DepositRequirements, indicating a link to requirements needed for deposits.

This model plays a crucial role in managing risk-related data within the application and may interact with databases to facilitate credit checks and deposit requirements for financial operations. This class could serve as part of a larger data access and business logic layer in the codebase.


file name is PromotionTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PromotionTransaction.cs, 
filesummary is: The file contains a data model class named PromotionTransaction representing a transaction related to promotions within the Eroms application. This class defines properties for transaction identification, associated accounts, timestamps, and XML metadata, establishing relationships with the Account and Promotion entities. It relies on Entity Framework for database operations, mapping to the "PromotionTransaction" table and including fields such as PromotionTransactionKey, PromotionKey, and AccountKey.


file name is Billgroup.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Billgroup.cs, 
filesummary is: The file Billgroup.cs defines a data model for a table called "Billgroup" within the Eroms.Data.Atlantic namespace. This model represents the structure of the Billgroup entity, which includes properties such as BillCycleID, BillCycle, BillCycleDescription, Notes, ConsolidatedFlag, and InvoiceAutomatedFlag. It is a critical component of the codebase, likely used for data interactions, and may depend on a database table named "Billgroup" to store related billing information.


file name is ServiceInvoiceEventCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceInvoiceEventCharge.cs, 
filesummary is: The file ServiceInvoiceEventCharge.cs contains a class that appears to represent a data model for service invoice event charges within the Eroms Atlantic codebase. It defines the structure of the ServiceInvoiceEventCharge entity, which includes properties for ServiceInvoiceKey, EventChargeKey, and Amount, as well as navigation properties that link to related EventCharge and ServiceInvoice entities. This model likely interacts with a database table named "ServiceInvoiceEventCharge," establishing dependencies on the EventCharge and ServiceInvoice data structures.


file name is Country.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Country.cs, 
filesummary is: This file is part of the data model for the Eroms application and defines the `Country` class, which represents a country entity. It includes properties such as a country code, description, and a flag for default status, while also establishing a one-to-many relationship with the `State` class. The `Country` model is likely tied to a database table named "Country" and may be used throughout the application where country information is required.


file name is TexpoProduct.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TexpoProduct.cs, 
filesummary is: The file TexpoProduct.cs defines the TexpoProduct class within the Eroms.Data.Atlantic namespace. This class represents a data model for Texpo products, containing various properties related to pricing, product details, and regulatory versions.

Key features include properties for brand, rate details, effective dates, terms, and various identifiers relevant for utility and billing processes. The class also has multiple foreign key relationships and attributes to manage database interactions. It supports functionalities central to energy rate management, making it vital for handling product offerings and their integration with databases.


file name is CustomFieldValue.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CustomFieldValue.cs, 
filesummary is: The file is a part of the data model layer within a codebase for an application related to Eroms. It defines the structure of the CustomFieldValue class, which represents a database entity for storing values associated with custom fields in a specific location.

The key features of the CustomFieldValue class include unique keys for identification, value storage, and timestamps for tracking creation and updates. It has dependencies on the CustomField class and is likely tied to a database table named "CustomFieldValue," which could influence how data entries are created, updated, or retrieved in the application.


file name is LiteUpServiceReconcile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/LiteUpServiceReconcile.cs, 
filesummary is: The file LiteUpServiceReconcile.cs contains a data model class for the LiteUpServiceReconcile entity, which is part of the Eroms application focusing on data reconciliation services. This entity keeps track of various metrics related to Lite Up services, including account numbers, financial amounts, and flags for inaccuracies or missing credits. It interacts with a database table named "LiteUpServiceReconcile" and references keys that may link to other reconciliation entities, suggesting dependencies on other parts of the system for complete functionality.


file name is ServiceProviderBillType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderBillType.cs, 
filesummary is: This file defines a class named ServiceProviderBillType, which is part of the Eroms.Data.Atlantic namespace. It represents a database entity related to service provider billing, including attributes like a unique code and a description. The class also establishes relationships with ChargePlan and Service entities, indicating that multiple charge plans and services can be associated with a single service provider bill type. This indicates that the file plays a critical role in managing billing data, likely used in simulations or applications handling billing processes.


file name is LockBoxPaymentAlert.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/LockBoxPaymentAlert.cs, 
filesummary is: The file LockBoxPaymentAlert.cs defines a data model for the LockBoxPaymentAlert entity within the Eroms.Data.Atlantic namespace. This model represents payment alert records associated with lockbox payments, which are crucial for tracking financial transactions in the application. It includes properties such as keys, account number, amounts, and timestamps to manage the lifecycle of payment alerts effectively.

Features include:
- Tracks payment alerts with unique identifiers and associated metadata.
- Dependencies on the FiservLockBoxCheckDetailKey and IndLockBoxCheckDetailKey, which may link to other financial detail records. 
- Integrates with Entity Framework for database interactions via attributes for key and table mapping.


file name is ServiceProviderChargeRelationship.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderChargeRelationship.cs, 
filesummary is: This file defines a class within a larger system that likely manages relationships between service providers and their associated charges. The core feature is the `ServiceProviderChargeRelationship`, which acts as a data model containing properties for a unique code and a description, along with a collection of related charges. This relationship may depend on a database table named "ServiceProviderChargeRelationship" and interact with another class, `ServiceProviderCharge`, to function effectively in the application.


file name is ACHConfiguration.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ACHConfiguration.cs, 
filesummary is: The file ACHConfiguration.cs is part of the Eroms.Data.Atlantic namespace and defines a data model for the ACHConfiguration entity. This entity likely represents a configuration record for ACH (Automated Clearing House) transactions, with attributes for its uniqueness, status, and metadata such as creation and update timestamps. It has dependencies on the ACHProvider and Status entities, indicating that it may relate to a broader system managing payment processing configurations.


file name is UsageChargeType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UsageChargeType.cs, 
filesummary is: The file UsageChargeType.cs defines a data model class for the "UsageChargeType" entity within the broader Eroms application. This class is part of the Entity Framework context and represents the table structure in the database, maintaining a relationship with a collection of UsageCharges.

The UsageChargeType class includes properties for a unique identifier (Code) and a descriptive string (Description). Additionally, it establishes a one-to-many relationship with UsageCharge, implying that each UsageChargeType can be linked to multiple usage charges. This structure indicates an interconnected feature that likely pertains to billing or charging mechanisms within the application.


file name is NoteDepartment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NoteDepartment.cs, 
filesummary is: The file NoteDepartment.cs defines a data model for a "NoteDepartment" entity within the Eroms.Atlantic namespace. This model includes properties such as NoteDepartmentID, Description, Active status, DisplayOrder, and an optional CSPID, indicating the structure of data stored in a corresponding "NoteDepartment" table. It likely interacts with a database using Entity Framework, helping manage and represent departmental notes within the broader system.


file name is ContractDatesVerify.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ContractDatesVerify.cs, 
filesummary is: The file defines a data model class for `ContractDatesVerify` within the `Eroms.Data.Atlantic` namespace, establishing a structure for managing contract dates in the Atlantic codebase. It includes properties such as Customer ID, Customer Name, and various dates related to rates and expiration, indicating its role in data handling for contract management. This model likely interfaces with a database table named "ContractDatesVerify," which is essential for maintaining contract-related information for the application.


file name is AccountHistoryAccountBalanceState.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountHistoryAccountBalanceState.cs, 
filesummary is: The file AccountHistoryAccountBalanceState.cs is part of the data model for the Eroms.Data.Atlantic namespace, representing the state of account balance history records. It defines the AccountHistoryAccountBalanceState class, which includes properties for tracking changes in account balance, such as the replication key, account key, type of change, old and new values, and metadata about who created the record and when.

The main features of this file revolve around maintaining historical account balance records, which may connect with the Account entity for relational operations. This class relies on Entity Framework for database interactions and is likely part of a larger system for tracking account activity in the Eroms application.


file name is MCPEDataSource.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MCPEDataSource.cs, 
filesummary is: The file MCPEDataSource.cs is a C# class file that defines the data model for the MCPEDataSource entity within the Eroms.Data.Atlantic namespace. This class represents a table in a database, specifying attributes such as a unique key, a URL for data retrieval, and a date for the data download year. It is likely used for fetching and storing data relevant to the Atlantic model of the larger codebase, potentially linking to other components that handle data processing or reporting.


file name is ServiceProviderPaymentQueue.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderPaymentQueue.cs, 
filesummary is: The file ServiceProviderPaymentQueue.cs defines a model class related to the management of service provider payment queues within the Eroms.Data.Atlantic namespace. This class encapsulates core features related to tracking payment transactions, including details such as the total amount, effective date, and status of payments, while also allowing for the association with service providers and payment methods. Dependencies include other classes representing service providers and payment methods, as well as a collection for detailed payment entries.


file name is ContractRenewalQueue.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ContractRenewalQueue.cs, 
filesummary is: The file ContractRenewalQueue.cs defines the ContractRenewalQueue class within the Eroms.Data.Atlantic namespace. This class represents a data model for managing contract renewals, containing properties such as ContractRenewalQueueKey, AccountKey, and ServiceKey, which are essential for tracking and processing contract renewal requests. It relies on a database table named "ContractRenewalQueue" and may interact with other components like user accounts and service providers in the business logic of the application.


file name is commissionplanitem.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/commissionplanitem.cs, 
filesummary is: The file commissionplanitem.cs defines a model for managing commission plan items within the Eroms.Data.Atlantic namespace. This model establishes key attributes for commission plans, including IDs, discounts (percentage and flat), timestamps, and reconciliation settings. It interacts with a database to store commission plan details, likely linking to related tables such as clients, event types, and commission plan intervals, making it essential for calculating and managing commission-related business logic.


file name is ServiceUsageInterval.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceUsageInterval.cs, 
filesummary is: The file defines a data model class named ServiceUsageInterval within the Eroms.Data.Atlantic namespace, part of a data access layer for the Eroms system. This class represents a database table structure, capturing service usage information over time with a variety of interval fields for detailed tracking. It is likely dependent on Entity Framework for database operations and may relate to other data models that manage overall service consumption analytics.


file name is ServiceSubStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceSubStatu.cs, 
filesummary is: The file ServiceSubStatu.cs defines a data model class for managing service status codes within the Eroms Atlantic namespace. It includes properties for a status code and its description, and maintains a collection of related services. This class may interact with a database context, indicating dependencies on database tables that reference service status codes and associated services.


file name is TrueUpServiceUsage.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TrueUpServiceUsage.cs, 
filesummary is: This file defines the "TrueUpServiceUsage" class, which is part of the Eroms Atlantic data model. It represents the structure and attributes for service usage tracking, including properties for keys, dates, quantities, rates, and amounts. This class likely interacts with a database table called "TrueUpServiceUsage" and may relate to other features involving service usage tracking and charge calculations in the application.


file name is AccountAmpDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountAmpDetail.cs, 
filesummary is: The file AccountAmpDetail.cs defines a data model for the AccountAmpDetail entity, part of the Eroms application related to the Atlantic module. It includes properties such as AccountKey, AchDraftAmount, and AchRechargeThreshold, which represent account-specific financial details. This model is linked to the Account entity, suggesting dependencies on other related data structures within the database, facilitating account management functionality in the overall application.


file name is ServicesApprovedBySupervisor.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServicesApprovedBySupervisor.cs, 
filesummary is: The file is a C# class definition that represents a data model for the table "ServicesApprovedBySupervisor" in a database. It includes properties such as ServiceKey and UserName, along with a reference to a related Service entity. This model is likely part of a larger codebase that deals with services requiring supervisor approval, with dependencies on a database context for data operations.


file name is AccountInvoiceState.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountInvoiceState.cs, 
filesummary is: The file AccountInvoiceState.cs defines a partial class that represents the state of account invoices in the Eroms data system. It includes properties for tracking whether an account is ready to be invoiced and if the billing day has been reached, essential for the invoicing process. The class is linked to the Account and InvoiceCycle entities, indicating it relies on their definitions for proper functionality and database integration.


file name is PromotionQueue.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PromotionQueue.cs, 
filesummary is: The file PromotionQueue.cs is part of the Eroms Data Atlantic codebase, and it defines a data model for managing a promotion queue in a database. It includes fields for key information such as PromotionKey, AccountKey, and timestamps for creation and updates. This model also establishes relationships with Account and Promotion entities, indicating dependencies on these related classes in the system.


file name is ServiceSuspensionReason.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceSuspensionReason.cs, 
filesummary is: This file defines a data model for handling service suspension reasons within the Eroms application. The core feature is the `ServiceSuspensionReason` class, which includes properties for a code and a description, and it maintains a relationship with a collection of `ServiceSuspension` objects. This indicates a dependency on both the `ServiceSuspension` entity and a corresponding database table, facilitating the management of service suspension scenarios in the larger codebase.


file name is NoteTypeDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NoteTypeDetail.cs, 
filesummary is: The file NoteTypeDetail.cs defines a data model for the NoteTypeDetail entity within the Eroms.Data.Atlantic namespace. This model outlines the structure of the NoteTypeDetail table in the database, including fields such as NoteTypeDetailID, NoteTypeID, Description, Active status, and DisplayOrder. It serves as a key component for managing note types in the application, likely used for displaying or organizing notes based on their types in the broader system, which may involve interactions with various database tables.


file name is Setting.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Setting.cs, 
filesummary is: The file Setting.cs defines the Setting class, which represents a database table that stores configuration settings used within the Eroms Data Atlantic namespace. This class establishes a relationship with SettingAuthorization, indicating that each setting may have multiple authorizations associated with it. The properties include a unique short Code and a Description, which are essential for identifying and providing context for the settings in the application.


file name is IncomingEdiFileError.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IncomingEdiFileError.cs, 
filesummary is: This file defines a model class for handling errors related to incoming EDI files in the Atlantic module of the Eroms system. It includes properties such as severity, error description, and error recording time, which are crucial for tracking and managing errors during data processing. The class has a relationship with another model, IncomingEdiFile, indicating a dependency on the corresponding database table structure for storing and retrieving error records.


file name is ServiceProviderPayment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderPayment.cs, 
filesummary is: The file "ServiceProviderPayment.cs" defines a data model for handling service provider payments within the Eroms Atlantic context. It includes properties such as payment key, total amount, effective date, and payment method, alongside relationships to other entities like General Ledger Transactions and Service Providers. This file is integral to the data management of service provider payments, relying on associated tables and entities within the larger codebase to function effectively.


file name is ElectricityFactsLabelExtension.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ElectricityFactsLabelExtension.cs, 
filesummary is: The file defines a partial class named ElectricityFactsLabelExtension, which is part of the Eroms.Data.Atlantic namespace. This class represents an entity in the context of a database, specifically for storing extensions related to electricity facts labels, including multilingual descriptions. 

Key features include the class's properties for identifying information, references to other entities such as ElectricityFactsLabel and ServiceProvider, and it also uses attributes for table mapping and data validation. The class is likely tied to a database managing electricity-related information, with dependencies on the corresponding ElectricityFactsLabel and ServiceProvider tables.


file name is PrepaymentWarning.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PrepaymentWarning.cs, 
filesummary is: The file PrepaymentWarning.cs defines a model for handling prepayment warnings within the Eroms Data Atlantic namespace. It focuses on storing relevant information such as prepayment amounts, usage data, and associated service details. This class interacts with the database table "PrepaymentWarning" and relies on the Service model for relationships, managing business logic related to prepayment notifications and status tracking.


file name is NotificationData.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationData.cs, 
filesummary is: This file contains a partial class definition for NotificationData within the Eroms.Data.Atlantic namespace. It serves as a model for a database table that stores notification information, including keys, attachment types, and data content. The file establishes relationships with the Notification and NotificationAttachmentType classes, indicating dependencies on other models and the database structure.


file name is ServiceOrderTransactionPurpose.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceOrderTransactionPurpose.cs, 
filesummary is: This file defines a data model class for a Service Order Transaction Purpose within the Eroms.Atlantic namespace. It characterizes the purpose of transactions with two primary fields: PurposeCode and TransactionType, both acting as keys. The class indicates that it is part of a database entity, likely related to service order processing, and depends on a database table named "ServiceOrderTransactionPurpose."


file name is DirectDebitCreditCardType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DirectDebitCreditCardType.cs, 
filesummary is: The file DirectDebitCreditCardType.cs defines a data model representing a Direct Debit and Credit Card type entity within the Eroms Data Atlantic namespace. This model includes properties such as CreditCardTypeID, Type, ProgID, and Active status, serving as a representation of the information stored in the DirectDebitCreditCardType database table. It is essential for handling related financial operations, and could be a part of a broader payment processing module that interacts with other database entities and business logic layers.


file name is PriorityType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PriorityType.cs, 
filesummary is: The file PriorityType.cs defines an entity in the context of a data model for the Eroms Atlantic application. This entity represents a Priority Type used in the application, characterized by a unique code and description. It establishes a relationship with the ServiceProviderPriorityCode entity, indicating that this file is part of the core business logic, managing priorities related to service providers. The file depends on the Entity Framework for data management and may interact with a database table named "PriorityType".


file name is GeneralLedgerAccountType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/GeneralLedgerAccountType.cs, 
filesummary is: The file defines a class named GeneralLedgerAccountType within the Eroms.Data.Atlantic namespace, which represents a data model for a general ledger account type in a financial application. This class includes properties for a unique code and a description, and it establishes a one-to-many relationship with another class, GeneralLedgerAccount, indicating that multiple accounts can be associated with a single account type. The file plays a crucial role in the database structure, likely relying on a GeneralLedgerAccount table in a database for data management.


file name is ReferralProgramCode.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ReferralProgramCode.cs, 
filesummary is: This file defines the ReferralProgramCode class, which represents a database table for managing referral programs within the Atlantic module of the Eroms codebase. Key features of this class include properties for storing information about the referral program, such as IDs, codes, status, validity dates, and metadata about creation and updates. It establishes relationships with Account and ReferralProgram entities, indicating dependencies on these models for functionality related to referral tracking and management.


file name is InvoiceDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceDetail.cs, 
filesummary is: The file `InvoiceDetail.cs` is a model class within the `Eroms.Data.Atlantic` namespace that defines the structure of the `InvoiceDetail` entity used in the application. It represents the details of invoice line items, including properties like `InvoiceKey`, `LineItemIndex`, `Description`, `Amount`, and relations to `AccountCharge` and `Invoice` entities. 

This class is crucial for the data layer of the application and relies on a relational database, specifically mapping its fields to a table named `InvoiceDetail`. It also suggests dependencies on other parts of the codebase, such as the `AccountCharge` and `Invoice` classes that manage related data.


file name is FiservLockBoxCheckDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/FiservLockBoxCheckDetail.cs, 
filesummary is: The file FiservLockBoxCheckDetail.cs defines a model class for the Fiserv Lock Box Check Detail entity within the Eroms Atlantic data context. This class encapsulates various properties related to financial transactions, such as LockBoxNumber, BatchNumber, TransactionDate, and others that facilitate the management of lockbox check details. It likely interacts with a database table named "FiservLockBoxCheckDetail," and is integral for operations managing check details in the application.


file name is MCPEFileData.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MCPEFileData.cs, 
filesummary is: The file MCPEFileData.cs defines an entity model for the data structure related to MCPE (Market Clearing Price Energy) file records in the Eroms Atlantic namespace. It includes properties representing various price intervals, calculated metrics (min, max, average), and metadata for record keeping, such as timestamps and user information for creation and updates. This model is likely related to a database table named "MCPEFileData" and is dependent on the MCPEFile entity for relational data handling.


file name is CompetitiveResellerPrepaidIndex.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CompetitiveResellerPrepaidIndex.cs, 
filesummary is: This file defines the CompetitiveResellerPrepaidIndex class within the Eroms.Data.Atlantic namespace, representing a database table for storing competitive reseller prepaid index data. Key attributes include identifiers such as CompetitiveResellerKey and IndexDate, along with properties like RoomCount and IndexValue that reflect the core features of a competitive pricing model for resellers. The class is tied to the database schema through annotations and likely interacts with other entities or services that process or analyze pricing data based on the indexed values.


file name is directdebitach.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/directdebitach.cs, 
filesummary is: The file "directdebitach.cs" defines a data model for the "directdebitach" table within the Atlantic module of the Eroms system. It includes attributes and properties that represent various details related to direct debit transactions, such as account type, account number, and other personal identifiers. This file serves as part of the entity framework configuration for database interactions, with dependencies on the underlying database structure and specific tables related to direct debit processing.


file name is GraphMap.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/GraphMap.cs, 
filesummary is: The file defines a data model class named `GraphMap` within the `Eroms.Data.Atlantic` namespace. This class represents the structure of a database table, including properties such as `GraphKey`, `Name`, `DisplayName`, and others, which are essential for managing graph-related data in the application. It likely interacts with a relational database and may have dependencies on other models like `GraphType`, indicating a relationship between different data entities in the codebase.


file name is ServiceStatusType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceStatusType.cs, 
filesummary is: This file defines a class `ServiceStatusType` within the namespace `Eroms.Data.Atlantic`, which serves as a model for representing service status types in a database context. 

The class includes properties for a premise status ID, a status description, and an active flag, suggesting it is part of the data layer for managing service-related records. This model likely interacts with a database table named "ServiceStatusType," storing information critical for tracking the status of various services, and may have dependencies on other classes that manage database operations.


file name is ChargePlanAudit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanAudit.cs, 
filesummary is: This file defines the ChargePlanAudit class, which represents an audit record for charge plans in the Eroms.Data.Atlantic namespace. It includes properties such as EffectedChargeKey, ChargePlanKey, AuditReasonCode, and AuditDescription, which capture details of modifications made to charge plans. The class is linked to other entities, ChargePlan and ChargePlanAuditReason, and interacts with a database table named "ChargePlanAudit," indicating its relevance to data management and auditing functionalities within the larger codebase.


file name is ServiceTax.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceTax.cs, 
filesummary is: The file ServiceTax.cs defines a class that represents a model for Service Tax in the Eroms.Data.Atlantic namespace. It includes properties for a unique identifier, tax code, and tax percentage, and establishes a relationship with a Service entity. This file likely interacts with a database table named ServiceTax and may be part of a larger codebase that manages tax-related computations and services.


file name is AccountDepositSold.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountDepositSold.cs, 
filesummary is: The file defines a data model class for the `AccountDepositSold` entity within the Eroms Data Atlantic namespace, representing a table in the database. It includes properties such as `AccountDepositSoldId` and `AccountKey`, indicating its role in tracking account deposits. This model likely interfaces with a database using Entity Framework, requiring a corresponding database table named `AccountDepositSold`.


file name is EdiElementMap.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EdiElementMap.cs, 
filesummary is: The file EdiElementMap.cs is part of the Atlantic submodule of the Eroms software, focusing on the representation of EDI (Electronic Data Interchange) element mappings. It defines the EdiElementMap class, which includes properties and rules for various EDI elements, such as their IDs, type requirements, and potential values. This class is associated with the EdiSegmentMap class, indicating a dependency between these two models for managing EDI structure and behavior within the application.


file name is ServiceProviderInformationCycleDay.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderInformationCycleDay.cs, 
filesummary is: The file defines a data model class for the "ServiceProviderInformationCycleDay" entity, which likely represents a database table for managing service provider cycle day information within an Atlantic service context. It includes properties that uniquely identify each record and establish relationships with other entities, specifically linking to the ServiceProviderInformation class. This model is part of a data access layer that interacts with an underlying database, possibly handling service provider data in an energy or utility management domain.


file name is ServiceInvoiceState.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceInvoiceState.cs, 
filesummary is: This file defines a class within the Eroms.Data.Atlantic namespace that represents the state of service invoices in the codebase. The ServiceInvoiceState class encapsulates various properties such as service keys, transaction numbers, invoice statuses, and relationships with other entities like Service and invoices. It is crucial for managing invoice state data and likely interacts with a database table called ServiceInvoiceState in the data storage layer.


file name is ThirdPartyPrintingParameter.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ThirdPartyPrintingParameter.cs, 
filesummary is: This file defines the ThirdPartyPrintingParameter class within the Eroms.Data.Atlantic namespace, which represents a database table in an Entity Framework context. It includes properties that correspond to various attributes of third-party printing parameters, such as keys for competitive reseller, fulfillment type, and parameter type, along with fields for parameter value, description, and timestamps for tracking creation and updates. The class has relationships with other entities, specifically ThirdPartyPrintingFullfillmentType and ThirdPartyPrintingParameterType, which indicates dependencies on these related data tables.


file name is ServiceProviderAveragePrice.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderAveragePrice.cs, 
filesummary is: This file defines a data model for ServiceProviderAveragePrice within the Eroms.Data.Atlantic namespace, which likely serves as part of a system for managing pricing information related to service providers. The model includes properties for pricing details, validity periods, and tracking information for creation and updates.

Key features include:
- Represents average pricing for service providers based on different types.
- Contains key properties like ServiceProviderAveragePriceKey, ServiceProviderKey, and pricing specifics such as Rate and KWH.
- Has a relationship with a ServiceProvider entity, indicating dependency on another data model for complete functionality.


file name is NonRecurringCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NonRecurringCharge.cs, 
filesummary is: The file NonRecurringCharge.cs is part of the Eroms Data Atlantic namespace and defines a data model representing non-recurring charges within the application. 

The NonRecurringCharge class outlines attributes such as the charge’s key, amount, tax status, and validity period, along with relationships to other entities like ChargePlan and InvoiceGroup. This file is crucial for managing billing processes, as it connects to core features involving invoicing and charge detail management and may interact with databases to store or retrieve billing information.


file name is InvoiceSeasonalIndexPassHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceSeasonalIndexPassHistory.cs, 
filesummary is: This file defines the InvoiceSeasonalIndexPassHistory class within the Eroms.Data.Atlantic namespace, which is part of a larger data model related to invoice processing. This class represents a database entity mapped to the "InvoiceSeasonalIndexPassHistory" table and includes various properties related to usage metrics for invoicing, along with relationships to account and invoice entities. 

Key features include tracking calculated and billed usage, historical usage metrics, and reconciliation data. Dependencies involve the Account and Invoice classes, indicating relationships to corresponding database tables for relational integrity.


file name is AccountTrueUpAccountTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountTrueUpAccountTransaction.cs, 
filesummary is: This file defines the AccountTrueUpAccountTransaction class within the Eroms.Data.Atlantic namespace. It serves as part of the data model, representing a database table that likely tracks transactions related to account true-ups. The class includes properties for identifying transaction records, such as Id, AccountTrueUpKey, and TransactionKey, and has a relationship with the AccountTrueUp entity, indicating dependencies on other parts of the codebase and potentially related database tables.


file name is UsageChargeByUtilityExtension.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UsageChargeByUtilityExtension.cs, 
filesummary is: The file UsageChargeByUtilityExtension.cs defines a data model in the Eroms.Data.Atlantic namespace related to usage charges within a utility billing context. It outlines various properties for the usage charge, including display options and requirements for charge plans, indicating its role in managing billing logic. The model references a ChargePlan entity and relates to other usage charge entities, likely interacting with a broader data context in the application.


file name is PendingDisconnect.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PendingDisconnect.cs, 
filesummary is: The file `PendingDisconnect.cs` defines a class that models the PendingDisconnect entity in the Eroms Atlantic module. It establishes the structure and properties relevant to managing pending disconnections, including keys, timestamps, status flags, and relationships with other entities like Account and notifications. This class likely interacts with the database table "PendingDisconnect" to store and retrieve information crucial for handling account disconnections within the system.


file name is CreditCardBrand.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CreditCardBrand.cs, 
filesummary is: This file defines the `CreditCardBrand` class within the Eroms.Data.Atlantic namespace. It represents a model for managing credit card brand information with properties for the brand's code, description, and status. The class also establishes a relationship with the `Payment` entity, indicating that multiple payments can be associated with each credit card brand, suggesting its importance in payment processing features within the larger codebase.


file name is ServiceInvoiceRecurringCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceInvoiceRecurringCharge.cs, 
filesummary is: The file defines a data model for a recurring charge associated with service invoices in the Eroms application. It establishes relationships with other entities, namely RecurringCharge and ServiceInvoice, indicating a connection to invoicing processes. The model utilizes Entity Framework for database interactions, suggesting that it may rely on additional database tables representing invoices and recurring charges.


file name is PowerRegion.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PowerRegion.cs, 
filesummary is: This file defines a class named PowerRegion, which is part of the Eroms.Data.Atlantic namespace and represents a database table model for handling power region data. The class includes properties for a unique identifier (Code) and a description of the power region, both of which are essential for identifying and describing power regions in the application. It is likely utilized by the data access layer and may interact with other components or services that require information about power regions.


file name is ServiceOrderChangeReasonType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceOrderChangeReasonType.cs, 
filesummary is: This file defines a data model for the "ServiceOrderChangeReasonType" entity, which represents change reasons for service orders in the Eroms system. It includes properties for a unique code and a descriptive text, along with a collection of related service orders that depend on this entity. This model appears to interact with a database table named "ServiceOrderChangeReasonType" within the Atlantic module of the codebase.


file name is InvoicePNFIncorrect_SCOTT.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoicePNFIncorrect_SCOTT.cs, 
filesummary is: The file InvoicePNFIncorrect_SCOTT.cs defines a data model for handling invoices within the Eroms.Data.Atlantic namespace. It outlines key attributes of an invoice, including account details, invoice specifics, and additional metrics such as payment and usage dates. This model likely interacts with a database to manage invoice data, depending on Entity Framework for data operations and potentially linked to other classes representing invoices or accounts in the system.


file name is DocumentCategory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DocumentCategory.cs, 
filesummary is: The file DocumentCategory.cs defines a C# class that serves as a model for managing document categories within a data structure. It includes properties for category details such as ID, name, description, creation and update timestamps, and associated documents. This class likely plays a crucial role in the application’s data layer, functioning as a table in a database that connects to related entities like AccountDocuments and Documents, reflecting their relationships and data management needs.


file name is InvoiceDetailByServiceLocationKey.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceDetailByServiceLocationKey.cs, 
filesummary is: This file defines the InvoiceDetailByServiceLocationKey class, which represents a data model for invoice details related to specific service locations. It includes properties for identification, financial amounts, charge type, and relationships to an Invoice entity. The class is part of the Eroms.Data.Atlantic namespace and is likely used in conjunction with a database to manage and retrieve detailed invoice information.


file name is AccessAudit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccessAudit.cs, 
filesummary is: The file AccessAudit.cs defines an entity class for logging access audit data within the Eroms Data Atlantic namespace. It includes properties for tracking user credentials, login attempts, IP addresses, and associated applications, providing a structure for managing security-related information. The class details a relationship with the Application entity, indicating a dependency on the application's details.


file name is ServiceAction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceAction.cs, 
filesummary is: The file defines a data model class named "ServiceAction" within the Eroms Data Atlantic namespace, representing a database entity used in the application. The class includes properties such as Code, Description, and a collection of related ServiceChronology entities, indicating a relationship between actions and their chronological records. This code is integral to the business logic of managing service actions, and it depends on a database table named "ServiceAction" to store its data.


file name is CompetitiveResellerChargeCode.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CompetitiveResellerChargeCode.cs, 
filesummary is: The file CompetitiveResellerChargeCode.cs defines a data model for the CompetitiveResellerChargeCode entity within the Eroms.Data.Atlantic namespace, suggesting it is part of a larger system that likely manages competitive reseller charge codes in a business context. The model specifies key properties including CompetitiveResellerKey, PremiseType, and ChargeCode, and establishes a relationship with the PremiseType entity. It appears to be tied to a database table named "CompetitiveResellerChargeCode" and is instrumental in handling how charge codes are generated and managed based on different premise types.


file name is MCPEFile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MCPEFile.cs, 
filesummary is: The file MCPEFile.cs is a model definition in a codebase that relates to the Atlantic data management system. This file defines the data structure for MCPEFile, including properties such as file path, created and updated timestamps, and statistical fields. It also maintains a collection of associated MCPEFileData records, suggesting a dependency on additional data handling or storage mechanisms linked to these data entries.


file name is Service.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Service.cs, 
filesummary is: The file is part of a data model class for an application related to utility services, specifically handling various aspects of service management. It establishes a structure for the Service entity, defining multiple attributes and relationships to other data models, thus playing a critical role in the codebase's business logic.

The Service class includes key properties related to customer services, such as service keys, account information, and status flags. It manages multiple collections that link it to related entities like invoices, charges, and meters, indicating its importance in transactions and service history tracking within the larger system.


file name is AccountCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountCharge.cs, 
filesummary is: The file AccountCharge.cs is a model class defining the structure of an account charge entity within the Eroms Data Atlantic namespace. It represents key attributes such as amount, invoicing details, and various relationships to related entities like Account, InvoiceGroup, and ServiceTransaction. This class is essential for managing account charges in the application, likely leveraging an Entity Framework context for data operations.


file name is ChargePlanServiceProviderAveragePrice.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanServiceProviderAveragePrice.cs, 
filesummary is: This file is part of a data model representing the average pricing for service providers associated with charge plans in an energy billing context. It defines a class that maps to the "ChargePlanServiceProviderAveragePrice" database table, which includes fields for pricing data and metadata such as creation and update timestamps. The class is linked to other entities through foreign keys, specifically referencing charge plans.


file name is ReportingConfiguration.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ReportingConfiguration.cs, 
filesummary is: The file ReportingConfiguration.cs defines the structure of the ReportingConfiguration entity within the Eroms.Data.Atlantic namespace. It serves to manage configuration settings for reporting functionalities, including server URLs, login credentials, and paths essential for report deployment. This entity is part of the data layer and is likely linked to a database table named "ReportingConfiguration," and it includes keys and fields necessary for generating and managing reports, making it integral to the reporting feature of the larger codebase.


file name is ServiceProviderPassThroughCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderPassThroughCharge.cs, 
filesummary is: The file defines a class related to a core feature of the Eroms codebase, specifically within the Atlantic model. It represents the "ServiceProviderPassThroughCharge" entity, which includes properties for a competitive reseller key, a service provider charge identifier, and a boolean indicating whether the charge is passed through. This class likely interacts with a database table named "ServiceProviderPassThroughCharge" and may be used in calculations or data retrieval related to service provider charges.


file name is ServiceSwitchHoldStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceSwitchHoldStatu.cs, 
filesummary is: This file defines a class named ServiceSwitchHoldStatu within the Eroms.Data.Atlantic namespace, which is part of a larger codebase focused on managing service operations. The class represents a data model that includes a unique identifier (Code) and a description, and it establishes a relationship with other entities through a collection of ServiceSwitchHold objects. This suggests that the file is integral for managing service statuses, likely in conjunction with a database that tracks various service holds.


file name is REP.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/REP.cs, 
filesummary is: The file REP.cs defines a partial class named REP within the Eroms.Data.Atlantic namespace. This class represents a data model for a sales representative, including properties such as RepKey, RepName, and optional foreign keys for contacts and addresses. It has a collection of associated Quote objects, indicating a relationship with another entity in the system, and relies on Entity Framework for database interactions, suggesting it is part of a data access layer within a larger application.


file name is CustomerChronology.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CustomerChronology.cs, 
filesummary is: The provided file is part of a codebase that defines the data model for a customer chronology within the Eroms application. It establishes a structure for recording actions taken by customers, including action codes and timestamps, while linking to customer data.

Features include:
- A data model representing the customer chronologies with properties for action codes, timestamps, and associated usernames.
- A primary key (ReplicationKey) for unique identification, and a foreign key relationship to the Customer entity.

Dependencies entail interaction with the Customer model, likely requiring customer-related data for full functionality.


file name is UserReportFavorite.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UserReportFavorite.cs, 
filesummary is: The file UserReportFavorite.cs is a data model class that defines the structure of the UserReportFavorite entity within the Eroms.Atlantic namespace. It represents a user's favorite report with two key properties: ReportKey and UserName. This class is likely part of a larger data access layer, and it may relate to database tables storing user preferences or report data, with Entity Framework used for database interactions.


file name is PremiseType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PremiseType.cs, 
filesummary is: The file PremiseType.cs defines a class representing the concept of a "Premise Type" within the Eroms.Data.Atlantic namespace. This class contains properties and collections that relate to various charge plans, codes, services, and locations, indicating its role as a core entity in the data model of the application. The PremiseType class interacts with collections that may influence functionalities regarding billing and service management, suggesting dependencies with databases that store charge plans, reseller codes, service commodities, quotes, and service locations.


file name is FTPSite.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/FTPSite.cs, 
filesummary is: This file is a part of the data model related to FTP site configuration within the Eroms codebase. It defines the properties and relationships of the FTPSite entity, which likely interacts with databases for storing FTP-related settings. The file includes dependencies on other entities such as ProcessSchedule and ThirdPartyDataProvider, indicating relationships that facilitate scheduling processes and managing external data providers effectively.


file name is NotificationProviderTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationProviderTransaction.cs, 
filesummary is: The file NotificationProviderTransaction.cs defines a data model for the "NotificationProviderTransaction" entity within the Eroms Atlantic namespace. This class represents a transaction related to notifications, incorporating properties for identification, contact details, delivery methods, and metadata. It serves as a foundational element in a larger codebase likely related to managing and storing notification-related information, potentially interacting with a database to facilitate transactions and user communications. Dependencies may include database tables for notifications, user accounts, and possibly integration with SMS services.


file name is QuoteSiteCode.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/QuoteSiteCode.cs, 
filesummary is: This file, QuoteSiteCode.cs, defines a class for the QuoteSiteCode entity within the Eroms Data Atlantic namespace, indicating its role in data management related to quotes. It includes properties for unique identifiers, such as QuoteKey and SiteCode, and establishes a relationship with another entity, Quote, indicating a connection to a larger data model.

Features identified include:
- Represents a data entity for associating quotes with specific site codes.
- Contains primary key properties and a navigation property for related data.
  
Dependencies:
- The QuoteSiteCode entity likely interacts with a database table named QuoteSiteCode and has a direct relationship with the Quote entity, which may involve additional tables in the database structure.


file name is ReferralProgram.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ReferralProgram.cs, 
filesummary is: The file is a data model representing a Referral Program within the Eroms application, specifically under the Atlantic module. It defines properties of the Referral Program, such as its ID, name, referral amount, status, validity dates, and timestamps for when it was created and updated. The model also establishes a relationship with a collection of ReferralProgramCode entities, indicating that multiple codes can be associated with one referral program, making it integral to the application's referral system functionality.


file name is MeteredMeterMonthlyToBeMoved.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MeteredMeterMonthlyToBeMoved.cs, 
filesummary is: The file is a model that defines a data structure for storing information related to metered monthly consumption in the Atlantic code module of the Eroms application. It outlines attributes such as service location, meter details, usage metrics, and unique identifiers, suggesting it plays a crucial role in managing and analyzing metering data. The model likely interacts with a database table named "MeteredMeterMonthlyToBeMoved" and may depend on other related data entities for comprehensive service management.


file name is IntervalMeterDetailType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IntervalMeterDetailType.cs, 
filesummary is: The file defines a data model class for "IntervalMeterDetailType" within the Eroms data structure for the Atlantic context. This class represents the details associated with interval meters, featuring properties for a unique code and a description. It maintains a relationship with a collection of "IntervalMeterDetail" instances, indicating that it depends on this related class for its functionality.


file name is AuthorizeNetAccount.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AuthorizeNetAccount.cs, 
filesummary is: The file AuthorizeNetAccount.cs defines a model for handling Authorize.Net account information within the Eroms Atlantic application. It encapsulates key attributes such as account credentials, transaction settings, and configuration options relevant to payment processing. This file likely interacts with a database table named AuthorizeNetAccount and may depend on other components for user authentication and transaction management.


file name is ReportType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ReportType.cs, 
filesummary is: The file defines the `ReportType` class within the `Eroms.Data.Atlantic` namespace, which serves as a model for the database table "ReportType." This class contains properties that map to the corresponding columns in the database table, including an integer key for the report type and a description string. The class maintains a relationship with the `ReportMap` collection, indicating that each report type can be associated with multiple report maps, which may depend on other database tables and entities.


file name is ImageType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ImageType.cs, 
filesummary is: This file defines the `ImageType` class within the `Eroms.Data.Atlantic` namespace, representing a model for image types in the application. It includes properties for image attributes such as code, vector status, extension, and format, as well as a collection of associated `Image` entities. This class is part of the Entity Framework model, indicating a relationship with image data that could depend on a database structure for storing these entities.


file name is NotificationReportLookup.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationReportLookup.cs, 
filesummary is: The file is part of the data model for the Eroms codebase, specifically defining a class that maps to a database table called "NotificationReportLookup." It contains properties representing key information about notification reports, including keys, types, and names. This class serves as a part of the database schema and may relate to business logic that involves managing notifications related to reports, potentially interacting with other entities like NotificationType.


file name is ElectricityFactsLabel.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ElectricityFactsLabel.cs, 
filesummary is: The file ElectricityFactsLabel.cs is a part of the Eroms Data Atlantic namespace and defines the ElectricityFactsLabel class, which serves as a model representing electricity facts in a database. This class includes properties related to electricity pricing, contract terms, and multilingual support for various labels and texts. It has relationships to the ChargePlan and UsageChargeByUtility tables and manages a collection of extensions for additional label information, indicating its central role in the business logic regarding electricity product offerings.


file name is DepositNotification.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositNotification.cs, 
filesummary is: This file defines a class named DepositNotification which represents a data model in the context of an application, specifically within the Eroms.Data.Atlantic namespace. It serves to map the 'DepositNotification' database table to object-oriented programming, accommodating key fields such as DepositNotificationKey, AccountKey, and timestamps. The model also indicates relationships with other entities, particularly the Account entity, reflecting dependencies on the database structure for proper functionality.


file name is ModifiedAccountCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ModifiedAccountCharge.cs, 
filesummary is: The file ModifiedAccountCharge.cs is a data model representing the "ModifiedAccountCharge" entity within the Eroms.Atlantic namespace. It defines properties related to account charges, such as amount, invoice details, modification details, and relationships with other entities like AccountCharge. This model is likely part of a larger system for managing financial transactions, requiring integration with a database for persistence and possibly interfacing with other models related to invoices and services.


file name is ContractRenewalConfiguration.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ContractRenewalConfiguration.cs, 
filesummary is: The file defines the ContractRenewalConfiguration class within the Eroms.Data.Atlantic namespace, which relates to database configurations for contract renewal processes in a larger codebase. This class serves as a data model that maps to the "ContractRenewalConfiguration" table in the database, containing properties like unique identifiers, service provider references, and attempt-related parameters. It likely interacts with other files or components managing business logic for contract renewals, serving as a foundational piece for that functionality.


file name is ServiceEstimatedUsage.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceEstimatedUsage.cs, 
filesummary is: The file defines a data model for the ServiceEstimatedUsage entity in the Eroms Atlantic context, which is part of the larger codebase focusing on service usage estimates. It includes properties such as ServiceKey, EstimatedUsage, CreatedBy, and CreatedAt, and establishes a relationship with a Service entity, indicating its role in managing and tracking service-related data. This file likely interacts with a database to store and retrieve estimated service usage information, relying on Entity Framework for ORM functionality.


file name is DepositRefund.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositRefund.cs, 
filesummary is: The file DepositRefund.cs defines a class named DepositRefund, which represents a refund associated with deposit transactions in the Eroms.Data.Atlantic namespace. This class contains properties to store details like refund amount, creation date, creator information, and relationships to related entities such as AccountTransaction, DepositPayment, and DepositTransaction.

Key features include:
- It manages deposit refund data with relevant metadata.
- It utilizes data annotations for validation and database mapping.
- Dependencies include relationships with AccountTransaction, DepositPayment, and DepositInterest entities.


file name is ServiceUsage_May25.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceUsage_May25.cs, 
filesummary is: The file ServiceUsage_May25.cs is a part of the Eroms.Data.Atlantic namespace and serves as a model class representing service usage records. It includes properties for various attributes related to service transactions, such as dates, quantities, and status flags, which are essential for managing service usage data.

Key features include the ability to track service usage, invoice statuses, and estimations with relationships to the Service and UnitOfMeasure entities. This file may depend on other components like database tables representing Services and Units of Measure, facilitating data integrity and reference.


file name is AMSChargeDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AMSChargeDetail.cs, 
filesummary is: The file AMSChargeDetail.cs defines a data model class for managing charge details in an Atlantic system context. It includes properties for essential attributes like charge amounts, descriptions, and various identifiers that relate to accounts and transactions. This model is dependent on several other entities such as Account, EventCharge, and RecurringCharge, indicating its role in the broader context of financial transactions and service management within the application.


file name is EmpowerAlertIgnoreReason.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerAlertIgnoreReason.cs, 
filesummary is: The file is a C# class definition related to the data model of the Eroms application, specifically for managing the reasons that alerts are ignored in the Empower system. It defines the "EmpowerAlertIgnoreReason" entity which includes properties for a unique code and a description. This file likely interacts with a database table named "EmpowerAlertIgnoreReason" and may be used in conjunction with other files that manage alert functionalities or data access.


file name is ServiceTransactionApplicationAdvice.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceTransactionApplicationAdvice.cs, 
filesummary is: The file ServiceTransactionApplicationAdvice.cs defines a data model for handling service transaction application advice in the Eroms system. It includes properties for tracking various attributes related to service transactions, such as action codes, utility contact information, and transaction statuses. This model is linked to the ServiceTransaction entity, establishing a relationship that likely relates to service management within the application.


file name is AccountSubLedgerCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountSubLedgerCharge.cs, 
filesummary is: The file AccountSubLedgerCharge.cs defines an entity class that represents the "AccountSubLedgerCharge" table in the database. This class is part of the Eroms.Data.Atlantic namespace and includes properties that correspond to the columns of the table, such as keys, amounts, and related entities. Its relationships with AccountSubLedgerTransaction and DepositTransaction collections suggest that it is integral to financial charge management within the system's accounting functionalities.


file name is CustomFieldCollectionPageLocation.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CustomFieldCollectionPageLocation.cs, 
filesummary is: This file defines a class that represents a data model for the "CustomFieldCollectionPageLocation" entity within the Eroms application. It is part of the data access layer, interacting with a database table that stores information about custom fields associated with specific collection pages. The class includes properties for collection page identifiers, field descriptions, and a collection of related custom fields, indicating relationships in the underlying database structure.


file name is ThirdPartyDataFile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ThirdPartyDataFile.cs, 
filesummary is: The file defines a class named ThirdPartyDataFile which represents a data model used within the Eroms.Atlantic namespace. This model appears to act as an entity in a database, handling various attributes associated with third-party data files, such as identifiers, download timestamps, and ownership details. It has relationships with other models, notably FtpFileSource and ThirdPartyDataProvider, indicating a dependency on these entities and potentially related database tables.


file name is UserFunctionsInRole.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UserFunctionsInRole.cs, 
filesummary is: The file UserFunctionsInRole.cs is part of the data model for the Eroms.Atlantic namespace and represents an entity related to user roles and their corresponding functions within the application. It defines the UserFunctionsInRole class as a mapping to the UserFunctionsInRole table in the database, utilizing Entity Framework for object-relational mapping.

The file encapsulates the structure of the UserFunctionsInRole entity with two primary properties: UserFunctionCode, which identifies the function, and RoleId, which associates the function with specific roles. This suggests a relationship between users, their roles, and the permissions or functions they are allowed to access, likely connecting to user management features in a larger system.


file name is IncomingEdiFileISA.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IncomingEdiFileISA.cs, 
filesummary is: The file IncomingEdiFileISA.cs defines a data model for incoming Electronic Data Interchange (EDI) files, specifically structured to map to a database table. It includes properties such as SenderID, ReceiverID, and ISAControlNumber, which are essential for identifying and processing EDI transactions. This model also establishes relationships with other entities, particularly linking to the IncomingEdiFile and a collection of IncomingEdiFileG objects, indicating a dependency on other data structures for complete functionality within the application.


file name is AggregatorContact.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AggregatorContact.cs, 
filesummary is: The file AggregatorContact.cs defines a model class for handling the relationships between aggregators and contacts within the Eroms Data Atlantic namespace. It outlines the properties of the AggregatorContact entity, including unique identifiers for each aggregating entity and their associated contacts, as well as metadata for the record's creation.

Key features include:
- Properties like AggregatorKey and ContactKey serving as composite keys.
- Relationships to Aggregator and Contact models, indicating a relational structure.
- Dependencies on the Aggregator and Contact classes, which are likely defined in other parts of the codebase, and may interact with a database to manage these associations.


file name is Folder.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Folder.cs, 
filesummary is: The file defines a data model for the "Folder" entity used within the Eroms.Data.Atlantic namespace and represents a structure for storing folder-related information. It includes properties such as CompetitiveResellerKey, Code, Name, and Path, which correspond to storage requirements in a database table. This model likely interfaces with an Entity Framework context to facilitate data operations, and it could be linked to features involving folder management for competitive resellers in the broader application.


file name is NoteHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NoteHistory.cs, 
filesummary is: The file NoteHistory.cs defines the NoteHistory class within the Eroms.Data.Atlantic namespace. It serves as a data model representing a note's historical records, capturing various attributes like note IDs, keys, status, and details regarding callback requests related to customer interactions. This class is linked to other entities such as Account, Note, and Service, indicating that it plays a crucial role in managing historical note data in a broader system focusing on customer relationship management or service tracking.


file name is McpeLog.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/McpeLog.cs, 
filesummary is: The file contains a C# class definition for `McpeLog`, which is part of the Eroms Data Atlantic namespace. This class represents a log entry in a database table named "McpeLog" and includes properties for tracking log details such as a unique key, date, creator, and description. 

The file is integral to the functionality of logging events within the application, and it connects to a database table that likely stores logs generated by various components of the system, aiding in auditing or monitoring.


file name is AccountBalanceStateEvaluationDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountBalanceStateEvaluationDetail.cs, 
filesummary is: The file AccountBalanceStateEvaluationDetail.cs is part of the Eroms.Data.Atlantic namespace and defines a data model for the AccountBalanceStateEvaluationDetail entity. This entity represents an account's balance evaluation details, capturing information such as associated account keys, service details, and timestamps for data processing.

Key features include properties for tracking evaluations, including a unique identifier, relationships to Account, AccountBalanceStateEvaluation, and Service entities. This file is likely a critical part of the application's data layer, interfacing with a database table named AccountBalanceStateEvaluationDetail to manage and evaluate account balances effectively.


file name is DepositApplicableLevel.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositApplicableLevel.cs, 
filesummary is: The file defines the "DepositApplicableLevel" class within the Eroms.Data.Atlantic namespace, indicating its role in managing deposit levels in the context of the Atlantic model of the Eroms codebase. This class includes properties such as Code, Description, and DefaultAmount, along with a collection of related DepositRequirements, suggesting a relationship with deposit handling logic. The file utilizes Entity Framework attributes for database mapping, indicating it interacts with a database table called "DepositApplicableLevel".


file name is AccountAction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountAction.cs, 
filesummary is: The file AccountAction.cs defines a data model for the "AccountAction" table within the Eroms application. It represents an entity that features properties such as 'Code' and 'Description', and establishes a relationship with a collection of "AccountChronology" entities. This model likely serves as part of the data access layer, mapping application data to the database and facilitating the application's overall functionality related to account management.


file name is MeterUpdateType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MeterUpdateType.cs, 
filesummary is: The file MeterUpdateType.cs defines a data model for the MeterUpdateType entity within the Eroms.Data.Atlantic namespace. It represents the structure of the MeterUpdateType table in the database, including properties such as Code and Description, and establishes a relationship with the MeterUpdate entity through a collection. This file is integral to the data layer of the application, providing a foundation for managing meter updates in the system.


file name is ServiceInvoiceUsageCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceInvoiceUsageCharge.cs, 
filesummary is: The file is part of the data model within the Eroms application, specifically for managing usage charges associated with service invoices. It defines a class for ServiceInvoiceUsageCharge, which includes properties for quantities, rates, and amounts related to service invoicing.

Key features include:
- It connects service invoices with usage charges, facilitating accurate billing.
- This class is dependent on the ServiceInvoice and UsageCharge classes to establish relationships within the data model.
- Utilizes Entity Framework annotations for database interaction, indicating it’s part of a broader data access layer.


file name is WorkGroup.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WorkGroup.cs, 
filesummary is: The file defines a class called WorkGroup within the Eroms.Data.Atlantic namespace, which represents a workgroup entity in the application. It includes properties related to workgroup details such as name, description, scheduling settings, and timestamps for creation and updates. This entity is associated with a collection of WorkGroupTasks and has a relationship with WorkFrequencyType, indicating dependencies on task management and scheduling functionalities within the codebase.


file name is DepositRequirement.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositRequirement.cs, 
filesummary is: The file DepositRequirement.cs is part of the Eroms.Data.Atlantic namespace and defines the DepositRequirement class, which represents the database entity related to deposit requirements within the Atlantic model. This class encapsulates properties such as DepositRequirementId, DepositApplicableLevel, and CustomerType, along with metadata attributes for database mapping. It also establishes relationships with other models, indicating dependencies on CustomerType, DepositApplicableLevel, and RiskModel, while maintaining a collection of associated DepositRequirementByScore records for further detail in risk assessment.


file name is CustomerType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CustomerType.cs, 
filesummary is: The file CustomerType.cs is part of the Eroms.Data.Atlantic namespace and defines a data model for customer types within the application. It includes properties for a customer type's code and description, and establishes a relationship with deposit requirements. This file is integral to the codebase, supporting the core features related to customer management and potentially relying on a database table named "CustomerType" and a linked "DepositRequirement" table.


file name is AuditPostPaymentEntry.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AuditPostPaymentEntry.cs, 
filesummary is: The file AuditPostPaymentEntry.cs defines a data model for auditing post-payment entries in the Eroms application. It contains properties that track essential payment details, such as session ID, user ID, account information, payment date, and the amount processed. This model is likely used to maintain payment records and support the application's functionality related to financial transactions and auditing processes, potentially interacting with a database table named "AuditPostPaymentEntry".


file name is NoteType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NoteType.cs, 
filesummary is: The file NoteType.cs is part of the Eroms.Atlantic dependency within the larger codebase, focusing on defining the NoteType entity in data management. It outlines the properties of the NoteType table, which include identifiers, descriptions, statuses, and order, indicating its role in managing note classifications in applications. This file is likely dependent on a database containing the NoteType table, and it may interact with other components that handle notes and related department functionalities.


file name is IncomingCall.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IncomingCall.cs, 
filesummary is: The file IncomingCall.cs defines a data model for incoming calls within the Eroms Data Atlantic namespace. This model represents core business logic related to call transactions, including fields for payment details, processing status, and caller information. It may interface with a database table named "IncomingCall" to store or retrieve data about incoming call transactions, including payment processing information.


file name is NotificationMapTemplate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationMapTemplate.cs, 
filesummary is: The file NotificationMapTemplate.cs defines a data model for the NotificationMapTemplate entity within the Eroms.Data.Atlantic namespace. This model is designed to store information related to notification mapping, including properties like Name, FriendlyName, and various options for addressing and overwriting notifications. It establishes relationships with other entities, such as NotificationMapTemplateDetail, and includes essential attributes for database storage, indicating that it is integral to the core business logic of the application.


file name is AMSUsageDataType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AMSUsageDataType.cs, 
filesummary is: The file AMSUsageDataType.cs defines the AMSUsageDataType class, which represents a data entity used in the Atlantic model of the broader Eroms codebase. This class includes properties for a unique code and a description, and it manages a collection of related AmsUsageAnomalyQueue entities, indicating a relationship to track anomalies in usage data. It interacts with a database table named "AMSUsageDataType" and relies on Entity Framework for data operations, suggesting a crucial role in handling data related to application usage patterns.


file name is EmpowerMessageParameterSetting.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerMessageParameterSetting.cs, 
filesummary is: The file EmpowerMessageParameterSetting.cs defines a data model for managing parameters related to an Empower message within the Atlantic code system. It includes properties that map to a database table named "EmpowerMessageParameterSetting", specifically handling the storage of procedure codes, parameter names, data types, order IDs, and values. This model likely interacts with a database, making it essential for the functionality that involves message parameter configurations in the wider application context.


file name is UsageChargePlanExtension.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UsageChargePlanExtension.cs, 
filesummary is: The file UsageChargePlanExtension.cs is part of the Eroms.Data.Atlantic namespace and defines a database entity model that represents the Usage Charge Plan Extension. This model captures various attributes related to utility charge plans, such as visibility options for different platforms and requirements for deposits or credit checks.

The core features include fields for configuring how a charge plan is presented across different platforms (e.g., EmSigner, Eroms, Verzana) and its applicability to new enrollments or renewals. Dependencies may include related database tables that interact with utility charge plans, along with associated business logic for customer enrollments and contract management.


file name is IgnoredAlert.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IgnoredAlert.cs, 
filesummary is: The file IgnoredAlert.cs defines a data model for an entity named IgnoredAlert within the Eroms.Data.Atlantic namespace. This model represents alerts that may have been intentionally ignored by users in the system, capturing various related attributes such as alert IDs, account keys, timestamps, and reasons for ignoring the alerts.

Key features include:
- Properties that track alert details like IDs, timestamps, and user information.
- Relationships to other entities such as Account, EmpowerAlertType, Service, ServiceOrder, and ServiceTransaction, indicating dependencies on these models and potentially affecting data management and storage.
- This model likely interacts with a database table named "IgnoredAlert" which would facilitate operations on ignored alerts in the application.


file name is AdjustmentAccountCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AdjustmentAccountCharge.cs, 
filesummary is: The file AdjustmentAccountCharge.cs defines a data model for the AdjustmentAccountCharge entity within the Eroms.Data.Atlantic namespace. It outlines the properties relevant to account adjustments, including account details and transaction-related information.

Features of this file include properties such as AccountKey, AccountName, Amount, and transaction status indicators like IsRejected and IsAccepted. This code is part of a larger codebase that likely interacts with a database, as it uses Entity Framework features such as data annotations for mapping. Its primary purpose is to handle financial adjustments and potentially integrate with other financial records in the application.


file name is AccountBalanceStateEvaluation.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountBalanceStateEvaluation.cs, 
filesummary is: The file is a C# class definition representing a data model for account balance evaluations in an application, likely related to financial services. It contains properties relevant to tracking account states, transactions, and associated evaluations, effectively serving as a blueprint for the data that will be stored in the database.

Key Features:
- Stores account balance state evaluation data including balances, charges, and thresholds.
- Includes relationships to other models such as Account and AccountTransaction, indicating interdependencies on the database structure.
- Fields like EstUnpaidServiceProviderCharges and DisconnectThresholdAmount suggest business logic around account management and billing.


file name is ServiceProviderInvoiceType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderInvoiceType.cs, 
filesummary is: The file defines the `ServiceProviderInvoiceType` class, which represents an entity in the application that deals with types of invoices for service providers. It includes properties such as `Code` and `Description`, as well as a collection of related `ServiceProviderInvoice` objects. This class integrates with a database table called "ServiceProviderInvoiceType" and is part of a broader data model likely used for invoice management in the system. Dependencies may include the `ServiceProviderInvoice` class and a database context for managing invoice records.


file name is ContractEarlyTerminationFeeType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ContractEarlyTerminationFeeType.cs, 
filesummary is: The file defines a data model for handling early termination fee types within a larger application that likely deals with contract management in financial or service-related contexts. 

Key Features include:
- A class named ContractEarlyTerminationFeeType that represents fee types associated with contract early terminations.
- Properties include a unique code and a description for the fee type, as well as a collection of related EventCharges, indicating dependencies on other components within the system.
  
This class is essential for managing fee structures in contracts and may interact with a database table named 'ContractEarlyTerminationFeeType' to store and retrieve relevant data.


file name is AggregatorPaymentPlan_Old.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AggregatorPaymentPlan_Old.cs, 
filesummary is: The file is a model class representing the AggregatorPaymentPlan_Old entity within a data context for the Eroms application, specifically the Atlantic module. It defines properties related to payment plans, such as keys, validity dates, and metadata like creator and timestamps, which are essential for managing payment plans in a database context.

Key features include the representation of payment plan data with attributes for database mapping. This model likely interacts with an underlying database to track payment plans for aggregators, meaning it may depend on other tables related to these entities to ensure data integrity and relational mapping.


file name is NotificationPriority.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationPriority.cs, 
filesummary is: The file `NotificationPriority.cs` defines a partial class representing the `NotificationPriority` entity within the Eroms Atlantic model. This class serves as a data structure for managing notification priorities, including a unique code and a description for each priority level. It also establishes a relationship with the `NotificationTypeMapToDeliveryProfile`, indicating that multiple delivery profiles can be associated with various notification types.

Key features include:

- Properties: Code (unique identifier) and Description (textual representation).
- Relationship: One-to-many with the `NotificationTypeMapToDeliveryProfile` entity. 
- Dependencies: Relies on Entity Framework for database mapping with specific annotations for data validation and modeling.


file name is AccountSubLedgerType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountSubLedgerType.cs, 
filesummary is: The file AccountSubLedgerType.cs defines a model class for the AccountSubLedgerType entity within the Eroms Data Atlantic namespace. This class represents a database table that includes properties such as Code and Description, and has a relationship with a collection of AccountSubLedgers, indicating its importance in managing financial transactions or records related to accounts. The class utilizes Entity Framework for mapping to the database, relying on attributes for validation and database generation.


file name is ServiceTransactionDescription.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceTransactionDescription.cs, 
filesummary is: The file implements a model class for service transaction descriptions in the Eroms Atlantic data layer. It defines the structure of the "ServiceTransactionDescription" table, including properties such as DocumentId, TransactionCode, and Description, which are essential for maintaining service transaction records. The class also establishes a relationship with the "ServiceTransaction" collection, indicating a one-to-many relationship between service transaction descriptions and transactions.


file name is TransferStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TransferStatu.cs, 
filesummary is: The file TransferStatu.cs defines a data model class for the TransferStatu entity in the Eroms.Data.Atlantic namespace. It represents the data structure including properties such as Code and Description, and establishes a relationship with the FtpFile entity through a collection. This class is likely part of the larger data access layer, enabling smooth interactions between the application and the database, and it depends on the FtpFile model for its functionality.


file name is ServiceProviderCommodity.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderCommodity.cs, 
filesummary is: The file ServiceProviderCommodity.cs defines a data model for a ServiceProviderCommodity within the Eroms application, which likely serves as a part of a larger platform managing service providers and commodities. This model includes various attributes and properties related to commodities provided by service providers, such as billing details, account requirements, and associated types.

Core features include:
- Identification of Service Providers through unique keys and various required fields.
- Support for managing account and meter number specifications.
- Relationships with commodities, premise types, and service providers as well as a collection of drop reasons.

Dependencies may include other data models such as CommodityType, PremiseType, and ServiceProvider, linking this model to broader database schema elements necessary for its functionality.


file name is AccountBalanceState.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountBalanceState.cs, 
filesummary is: The file defines a class representing the "AccountBalanceState" entity, which is part of the Eroms data model for the Atlantic module. This class includes properties for account balance codes and descriptions, and it maintains relationships with other entities, specifically collections of Account and AccountBalanceStateEvaluation, indicating its role in tracking and evaluating account balances. The class is essential for managing account states and their respective evaluations within the codebase's broader financial functionality, likely interfacing with a database table for persistence.


file name is ServiceProviderAdjustmentDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderAdjustmentDetail.cs, 
filesummary is: The file defines a data model class named ServiceProviderAdjustmentDetail that is part of the Eroms.Data.Atlantic namespace. This class represents details related to service provider adjustments, including properties such as adjustment keys, account numbers, and monetary amounts, enabling the management of financial adjustments for service providers within the application.

Key features include properties for tracking adjustments, such as adjustment codes and descriptions, which are essential in managing customer accounts. This model likely interacts with other components of the system, such as databases where adjustment details are stored and retrieved.


file name is NotificationConfiguration.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationConfiguration.cs, 
filesummary is: The file NotificationConfiguration.cs defines a data model for managing notification configurations within the Eroms Atlantic system. It contains properties such as NotificationConfigurationKey, ProviderName, DeliveryMethod, and others, which are essential for configuring how notifications are sent and managed. This file is related to database interactions, as it maps to a "NotificationConfiguration" table, and it may depend on other system components that utilize notification settings.


file name is PromotionStartsOn.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PromotionStartsOn.cs, 
filesummary is: The file PromotionStartsOn.cs is part of a data model within the Eroms Data Atlantic namespace, specifically defining a class that represents a table in the database. It outlines the structure for the PromotionStartsOn entity, including attributes for Code and Description, and indicates these fields are essential for underlying business logic. This class likely interacts with a database table named PromotionStartsOn, forming a key part of the application's data handling and business processes related to promotions.


file name is Meter.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Meter.cs, 
filesummary is: The file Meter.cs is part of the Eroms.Data.Atlantic namespace and defines the Meter class, which represents data related to utility meters in the system. This class includes properties such as MeterNumber, MeterType, and ServiceProviderRateClass, each capturing key details about the meter's configuration and status. It is part of a larger data model likely used for managing utility services, with potential dependencies on databases and related entities like ServiceLocation and Status for ensuring data integrity and relationship management.


file name is NoTaxesFound.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NoTaxesFound.cs, 
filesummary is: The file NoTaxesFound.cs defines a data model for the "NoTaxesFound" entity within the Eroms.Data.Atlantic namespace. This model represents records that relate to accounts without associated taxes, storing essential address and identification information. It is part of a larger codebase likely involving tax processing logic and includes relationships to Account, Service, and ServiceLocation entities, suggesting dependency on a database schema containing these related tables.


file name is CompetitiveReseller.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CompetitiveReseller.cs, 
filesummary is: The file CompetitiveReseller.cs is an entity model class within the Eroms.Data.Atlantic namespace, serving as part of the data layer of the application. This class defines the structure and properties of competitive resellers, including their identifiers, contact information, service management features, and various operational flags.

Key features include properties for managing reseller information, EDI paths, automatic approvals for invoices and letters, as well as configurable billing options. The class references related entities such as Address, ChaseAccount, and NotePriority, indicating relationships with other tables, and utilizes Entity Framework for data access management.


file name is QuickSearchForRole.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/QuickSearchForRole.cs, 
filesummary is: This file defines a data model for "QuickSearchForRole" within the Eroms application, which likely facilitates role-based quick search functionalities. It contains properties related to the visibility of search and action options for user roles, such as ShowQuickSearch and ShowAccountActions. The model is tied to an Application entity, indicating a relationship that may depend on other parts of the codebase, specifically where roles and applications are managed.


file name is State.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/State.cs, 
filesummary is: The file State.cs is part of the Eroms.Data.Atlantic namespace and defines the State class, which serves as a model for representing states in the application. This class includes properties for the state code, description, and country, as well as collections for related entities like PowerGenerationSources, Zips, and ClearingHouseInformations. It highlights the relationship with a Country model and indicates dependencies on other data models, facilitating effective management of geographical and energy-related data within the broader codebase.


file name is PromotionAccount.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PromotionAccount.cs, 
filesummary is: The file defines the `PromotionAccount` class as part of the data model within the Eroms Atlantic namespace, which is likely for managing promotions related to accounts in a business context. 

The `PromotionAccount` class serves as a data entity with properties that track promotion and account relationships, including their validity dates and creation metadata. It has dependencies on the `Account` and `Promotion` entities, indicating it's part of a relational structure whose functionality involves handling promotions associated with specific accounts.


file name is SystemErrorArchive.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/SystemErrorArchive.cs, 
filesummary is: This file defines a model class for the "SystemErrorArchive" table within the Eroms.Data.Atlantic namespace, which is likely part of a larger database schema related to error tracking in the Atlantic project. The class contains properties representing error details, such as code, description, application ID, and the time an error occurred, alongside optional fields for user identification and versioning.

The "SystemErrorArchive" class acts as a data structure for storing and retrieving error records, and it is expected to interact with an Entity Framework context for data operations. This class relies on a database table named "SystemErrorArchive" and could be linked to other database components that manage application logging and error reporting functionalities.


file name is InvoiceFilter.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceFilter.cs, 
filesummary is: The file InvoiceFilter.cs defines a class named InvoiceFilter within the Eroms.Data.Atlantic namespace. This class models an invoice filter entity with properties related to invoice data such as usage metrics, historical comparisons, and associated account and service information. The class can be utilized for operations involving invoice management, and it has dependencies on the Account and Service classes, indicating relationships with those entities in the database.


file name is ReportMap.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ReportMap.cs, 
filesummary is: The file ReportMap.cs is a data model within the Eroms.Data.Atlantic namespace. It defines the structure and properties of the ReportMap entity, which appears to represent a report within a larger reporting system. Key features include fields for report metadata, visibility, and associations with EmpowerModule and ReportType entities.

This file is part of the data layer of the application, likely designed to interact with a database that contains report information. It depends on entities such as EmpowerModule and ReportType, indicating a potential relationship with other aspects of the reporting or user empowerment functionalities in the codebase.


file name is SystemError.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/SystemError.cs, 
filesummary is: The file defines a data model for handling system errors within the Atlantic module of the Eroms codebase. It encapsulates key properties such as error code, description, application ID, timestamp, and optional fields like the error key and username. This model likely interacts with a database table named "SystemError," indicating dependencies on database structures and other related application components for error logging and management purposes.


file name is ElectricityFactsLabelExtensionType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ElectricityFactsLabelExtensionType.cs, 
filesummary is: This file defines a model class called ElectricityFactsLabelExtensionType, which is part of the Eroms.Data.Atlantic namespace. It represents a database table that holds information about electricity facts labels, including a unique code, a description, and a display name, with specified data constraints. The model may be used in conjunction with Entity Framework to interact with the underlying database, emphasizing the importance of accurate labeling for data related to electricity consumption.


file name is ChargePlanAmpDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanAmpDetail.cs, 
filesummary is: The file ChargePlanAmpDetail.cs defines a data model related to charge plans within the Eroms Data Atlantic namespace. It outlines the properties for ChargePlanAmpDetail, such as various financial thresholds and usage metrics that are associated with a charge plan. This model likely interacts with a database table representing charge plan details and is dependent on the ChargePlan model for establishing relationships between charge plans.


file name is PaymentMethod.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PaymentMethod.cs, 
filesummary is: The file PaymentMethod.cs is part of the Eroms.Data.Atlantic namespace, representing the PaymentMethod entity within the codebase. This entity defines various properties related to payment methods, such as their description, status, and options for displaying financial details. It also establishes relationships with collections of ChargePlanPaymentMethodOffered and Payment, indicating dependencies on related classes and potentially database tables for managing payment processing features within the application.


file name is ThirdPartyPaymentFile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ThirdPartyPaymentFile.cs, 
filesummary is: The file ThirdPartyPaymentFile.cs is a data model class that defines the structure and properties of the ThirdPartyPaymentFile entity within the Eroms.Data.Atlantic namespace. It includes attributes for managing file metadata, such as the file name, download date, processing errors, and references to third-party payment providers. This model likely interacts with a database table of the same name and is essential for managing third-party payment file operations within the larger application.


file name is ServiceStartDate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceStartDate.cs, 
filesummary is: The file ServiceStartDate.cs is part of an Entity Framework model representing a database table for storing service start dates in the Eroms Atlantic module. It defines a class with properties that map to the columns of the ServiceStartDate table, including ServiceKey, StartDate, CreatedAt, and CreatedBy. The class includes a foreign key relationship to a Service entity, indicating a dependency on the Service model for associated data.


file name is UnmeteredMeterMonthly.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UnmeteredMeterMonthly.cs, 
filesummary is: The file UnmeteredMeterMonthly.cs defines a data model class for the UnmeteredMeterMonthly entity within the Eroms.Data.Atlantic namespace. It represents a structure for storing information about unmetered monthly service usage, including properties for service location, service type, dates, and quantity. This model is integrated with Entity Framework and has dependencies on ServiceLocation, ServiceUsageBilledByServiceProvider, and UnmeteredServiceType entities, indicating a relationship with other data components in the codebase.


file name is CleanedUpCommission.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CleanedUpCommission.cs, 
filesummary is: The file CleanedUpCommission.cs defines a data model class for the "CleanedUpCommission" table within the Eroms.Data.Atlantic namespace. This class serves as a blueprint for accessing and storing commission-related data, including properties such as account number, service addresses, and invoice details. It is likely part of a larger database-backed application that processes and manages commission information, interacting with an underlying database where the corresponding table is defined.


file name is ServiceProviderLITEUPRate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderLITEUPRate.cs, 
filesummary is: The file defines a class named ServiceProviderLITEUPRate, which is part of a data model used within the Eroms.Data.Atlantic namespace. This class represents details regarding service provider rates, including properties for key identifiers, date ranges, discount rates, and status. It also establishes relationships with other entities, including a collection of AMSChargeDetail and a reference to ServiceProvider, indicating that it is connected to broader functionalities related to service pricing and management in the codebase.


file name is DirectDebitType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DirectDebitType.cs, 
filesummary is: The file DirectDebitType.cs defines a data model for handling direct debit types in the Eroms Atlantic system. It outlines the properties of the DirectDebitType class, which includes identifiers and status indicators such as DirectDebitTypeID, Type, ProgID, and Active status. This model relates to the database table "DirectDebitType," indicating that it serves as a core entity within the application potentially linked to financial transactions or billing processes.


file name is Task.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Task.cs, 
filesummary is: The file represents a model class in the Eroms application, specifically for the "Task" entity within the Atlantic module. This class defines core attributes and behaviors associated with tasks, such as ID, title, status, priority, and various metadata like the creator and due dates. It also establishes relationships with related entities, including Account and Service, as well as collections for TaskAssignments and TicketResponses, indicating it interacts with database tables related to tasks and their management.


file name is ServiceAggregator.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceAggregator.cs, 
filesummary is: The file ServiceAggregator.cs defines a data model for the ServiceAggregator entity, which is part of the Eroms.Data.Atlantic namespace. This model represents the relationship between services and aggregators, with properties for keys, assignment dates, status, and related entities such as Aggregator, PaymentPlan, and Service. It serves as a crucial component for handling service aggregation features within the application, likely interacting with a database for managing service assignments and their statuses.


file name is ChargePlanPrepaidInitial.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanPrepaidInitial.cs, 
filesummary is: The file ChargePlanPrepaidInitial.cs defines a data model class within the Eroms.Data.Atlantic namespace that is part of a larger codebase managing charge plans for prepaid services. It serves to represent the database table "ChargePlanPrepaidInitial," encapsulating details such as charge plan keys, measure types, unit descriptions, amounts, taxability, and related entities.

Key features include multiple properties representing core attributes of prepaid charge plans, which are crucial for billing processes. This class also establishes relationships with other entities such as ChargePlan, InvoiceGroup, and PrepaidMeasureType, indicating dependencies on relevant tables in the database that assist in invoice generation and charge calculations.


file name is ProcessSchedule.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ProcessSchedule.cs, 
filesummary is: The file ProcessSchedule.cs defines a data model for managing scheduled processes within the Eroms Atlantic module. It contains properties crucial for maintaining process details such as timing, status, and related entities like printers and FTP sites. The model relies on relationships with other tables, indicating dependencies on configurations like FTPSite, Printer, ProcessType, ScheduleType, and Status.


file name is UsageCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UsageCharge.cs, 
filesummary is: The file defines the UsageCharge class as part of the Eroms data model, specifically related to billing systems. This class represents a usage charge detail in a context where utility services are billed based on various parameters such as units used, pricing strategy, and tax implications. It includes properties for charge rates, invoicing details, and references to related entities like ChargePlan and InvoiceGroup, indicating dependencies on other parts of the codebase and data structures essential for calculating and managing utility billing.


file name is TrueUpTax.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TrueUpTax.cs, 
filesummary is: The file TrueUpTax.cs defines a data model for managing tax-related information within the Eroms Atlantic module. It represents the TrueUpTax entity, which includes properties such as TaxType, TaxRate, and TaxDescription, capturing essential details for tax calculations. This model may depend on other entities like TaxType and TrueUp, likely representing tax classifications and related adjustments, which are integral to financial reporting processes in the application.


file name is UsageChargeIndex.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UsageChargeIndex.cs, 
filesummary is: The file UsageChargeIndex.cs is a model that represents the structure of the UsageChargeIndex table in the database. It defines properties related to usage charge rates, such as effective dates and status, along with metadata for tracking changes. This class is likely used in data operations concerning charge rates, and it may depend on Entity Framework for interacting with the corresponding database table.


file name is INVOICEMARKEDCANCELED.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/INVOICEMARKEDCANCELED.cs, 
filesummary is: The INVOICEMARKEDCANCELED.cs file defines a data model class for representing canceled invoices within the Eroms Atlantic codebase. This class contains numerous properties related to invoice management, such as invoice totals, statuses, key identifiers, and timestamps. It is dependent on a database table named "INVOICEMARKEDCANCELED" and plays a critical role in the financial aspects of the application, possibly involving integrations with invoice processing and reporting systems.


file name is CustomFieldDisplayLocation.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CustomFieldDisplayLocation.cs, 
filesummary is: The file CustomFieldDisplayLocation.cs defines a data model within the Eroms.Data.Atlantic namespace, representing a database table called "CustomFieldDisplayLocation". It includes properties like Code and Description, and establishes a one-to-many relationship with the CustomField entity through a collection. This class is integral to managing custom field display locations in the application, relying on a database context for data persistence. Dependencies may include database schemas and migration files relevant to the AtlanticModel context.


file name is IncomingEdiFile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IncomingEdiFile.cs, 
filesummary is: The file defines the `IncomingEdiFile` class, which represents a model for incoming Electronic Data Interchange (EDI) files in the Atlantic codebase. It encapsulates properties related to file metadata, including file size, path, and processing status, along with relationships to errors and EDI segments. This model is crucial for managing and processing EDI files, and it references collections of related error records and ISA segments, indicating dependencies on `IncomingEdiFileError` and `IncomingEdiFileISA`.


file name is EmpowerAlert.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerAlert.cs, 
filesummary is: The file EmpowerAlert.cs contains a class definition related to an alert system within the Eroms Atlantic module. This class serves as a data model for the "EmpowerAlert" table, designed to store various attributes of alerts including identifiers, timestamps, and statuses.

Key features include properties for unique alert identifiers, timestamps for creation and updates, and numeric types for alert type and status. The class also establishes relationships with other entities such as Account, Service, and ServiceOrder, indicating dependencies on these models for complete functionality within the application.


file name is C_InvoiceSiteCodeTax_old_.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/C_InvoiceSiteCodeTax_old_.cs, 
filesummary is: The file C_InvoiceSiteCodeTax_old_.cs defines a data model related to tax codes for invoice sites within the Eroms.Data.Atlantic namespace. It represents the structure of the InvoiceSiteCodeTax_old table, encompassing various properties such as tax rates, codes, descriptions, and associations with the Invoice and Service models. This model likely depends on a database that includes the Invoice, Service, and TaxType tables to manage tax-related information effectively in the invoicing system.


file name is ImportedDocument.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ImportedDocument.cs, 
filesummary is: The file ImportedDocument.cs is part of the Eroms.Data.Atlantic namespace and defines a data model for an imported document in a database context. It contains properties that specify document details such as description, references, creation/update timestamps, and metadata, along with their respective data types and constraints. This model likely interacts with a database, where it may represent records in an "ImportedDocument" table, supporting core functionalities of document management within the application.


file name is Alert.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Alert.cs, 
filesummary is: The file is a C# class definition for an entity named Alert within a data model, indicating its role in an application that likely involves managing alerts or notifications. This class is part of the Entity Framework setup and is designed to map to a database table called "Alert", facilitating interactions with alert-related data in the codebase.

The Alert class includes various properties such as AlertKey, Type, Message, CreatedAt, CreatedBy, AcknowledgedAt, Status, and relates to an AlertType entity, hinting at a structured system for tracking alerts with specific attributes. It likely depends on a database schema that includes an "Alert" table and possibly an "AlertType" reference, which may further influence alert management functionality within the larger application.


file name is TaxGroupTaxType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaxGroupTaxType.cs, 
filesummary is: The file TaxGroupTaxType.cs defines a class within the Eroms.Data.Atlantic namespace, representing a data model for tax-related information in the application. This class, TaxGroupTaxType, includes properties for TaxGroup and TaxType, establishing a many-to-many relationship with TaxGroup and TaxType entities. It likely relates to a broader financial or taxation management system and depends on the TaxGroup and TaxType tables in the database to function effectively.


file name is MassTransitionEnrollment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MassTransitionEnrollment.cs, 
filesummary is: The file MassTransitionEnrollment.cs is a data model for managing mass transition enrollment records within the Eroms.Data.Atlantic namespace. It outlines the properties related to customer information, billing details, and transaction data, which are essential for processing mass transition enrollments in the larger application. The model relies on relationships with Account and Service entities, and it may be used with a database to store and retrieve enrollment records.


file name is EmpowerAlertStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerAlertStatu.cs, 
filesummary is: This file defines the EmpowerAlertStatu class which is a part of the Eroms.Data.Atlantic namespace. Its primary function is to represent the status of alerts within the system, with properties to hold an alert's unique code, description, and collections of related EmpowerAlert and ResolvedAlert objects. It serves as a core component of the alert management feature and relies on Entity Framework for database interactions.


file name is ServiceProviderAdjustment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderAdjustment.cs, 
filesummary is: The file defines a data model for managing service provider adjustments within the Eroms Data Atlantic namespace. It includes properties representing a service provider adjustment entity, including keys that link to service providers and resellers, and fields for monetary amounts and commodity types. This model likely interacts with a database table named "ServiceProviderAdjustment," which is crucial for tracking financial adjustments in service provisioning.


file name is SpecialCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/SpecialCharge.cs, 
filesummary is: The file SpecialCharge.cs defines a data model for the "SpecialCharge" entity within the Eroms.Data.Atlantic namespace. This model is central to managing special charges associated with invoices, defining properties such as AccountKey, Amount, and various identifiers related to invoicing. It relies on Entity Framework for database interactions and may connect to other tables related to invoices and services, making it integral to the billing functionality of the larger codebase.


file name is TaxType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaxType.cs, 
filesummary is: The file TaxType.cs defines a model for tax types within the Eroms Data Atlantic namespace. It includes properties for tax codes and descriptions, as well as relationships to other collections like InvoiceSiteCodeTax, TaxChargeEntry, and TrueUpTax. This model is crucial for managing tax-related data and functionality in the application, likely tied to financial or invoicing features.


file name is NoteText.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NoteText.cs, 
filesummary is: The file NoteText.cs defines a model class for the NoteText entity in the Eroms Data Atlantic namespace, likely part of a larger application related to note-taking or documentation. It encapsulates properties for note metadata such as identifiers, creator information, content, and a relation to a Note entity. This model may depend on a database table named "NoteText" and could be part of the Entity Framework's data access layer.


file name is ServiceChargePlanIntervalBasedRateAdderAudit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceChargePlanIntervalBasedRateAdderAudit.cs, 
filesummary is: The file defines a data model class, ServiceChargePlanIntervalBasedRateAdderAudit, which is part of the Eroms.Data.Atlantic namespace. It is mapped to a database table that tracks audits for service charge plans based on interval-based rate adders. Key features include properties for various audit details, such as intervals, adder type, and timestamps for creation and updates, while also establishing relationships with other entity types. This class likely interacts with a database to maintain historical records of changes made to service charge plans.


file name is IntervalBasedAdderType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IntervalBasedAdderType.cs, 
filesummary is: The file defines a class `IntervalBasedAdderType` within the Eroms.Atlantic namespace, which represents a database entity related to service charge plans. It includes properties for identifying a type (Code), a description, and collections to manage related rate adders and their audits. This class is integral to the data layer, linking to other components such as service charge plans and auditing functionalities, indicating dependencies on those data structures in the overall application context.


file name is IncomingEdiFileG.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IncomingEdiFileG.cs, 
filesummary is: The file IncomingEdiFileG.cs defines a data model representing an incoming EDI file within the Eroms Data Atlantic namespace. It includes properties such as SenderID, ReceiverID, ISAControlNumber, and GSControlNumber, which are crucial for identifying and processing EDI transactions. This model has dependencies on both the IncomingEdiFileISA and IncomingEdiFileST entities, indicating a relationship with other data models related to EDI file processing.


file name is AccountParking.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountParking.cs, 
filesummary is: The file AccountParking.cs is a model class for the AccountParking table in a database, which defines the structure and properties of account parking records. It includes fields such as ESID, AggregatorKey, PaymentPlanKey, CreatedAt, and CreatedBy, along with navigation properties to Aggregator and PaymentPlan entities. This model is part of an Entity Framework code-first approach and connects to database elements, facilitating interactions with the associated tables in the application.


file name is ServiceProviderCycleDate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderCycleDate.cs, 
filesummary is: The file ServiceProviderCycleDate.cs defines a model class within the Eroms.Data.Atlantic namespace that represents data related to service provider cycle dates. It includes properties that store a unique identifier for the service provider and details about their cycle such as the cycle day and month-year. The class also establishes a relationship with the ServiceProvider class, indicating a dependency on it, which is likely used to fetch related service provider information from a database.


file name is NotificationDeliveryProfile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationDeliveryProfile.cs, 
filesummary is: The file NotificationDeliveryProfile.cs is part of the Eroms.Data.Atlantic namespace and defines the NotificationDeliveryProfile class that models a user’s notification delivery preferences. This class captures various attributes such as account association, contact details, notification methods, and timestamps for tracking creation and updates. It includes relationships with other entities like Account and NotificationTypeMapToDeliveryProfile, implying dependencies on these models for the full functionality of notification handling within the application.


file name is EmpowerDataExportSetting.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerDataExportSetting.cs, 
filesummary is: This file defines the data model for the "EmpowerDataExportSetting" entity within the Eroms application. It outlines the properties related to configuring data export settings, such as stored procedures for populating, pulling, and cleaning up tables, alongside file naming conventions and execution order. This entity likely interacts with a database table and could be utilized in processes that manage data export operations within the application.


file name is aspnet_Roles.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aspnet_Roles.cs, 
filesummary is: The file aspnet_Roles.cs defines the aspnet_Roles class within the Eroms.Data.Atlantic namespace, representing a role in a user management system. It includes properties for role identification, names, descriptions, and relationships to users and applications. This class supports the core feature of role-based access and user permissions in the application, relying on related classes like aspnet_Users and aspnet_Applications.


file name is IntervalType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IntervalType.cs, 
filesummary is: The file represents a data model class for an `IntervalType` entity within the Eroms.Data.Atlantic namespace, and is part of the Entity Framework data layer of the application. It defines the properties and relationships relevant to the `IntervalType` table in the database, especially focusing on service charge plans.

Key features of this class include:
- It maps to a database table named `IntervalType`.
- It contains properties such as `Code` and `Description` to hold interval type information.
- The class maintains relationships with collections of related entities, specifically various `ServiceChargePlanIntervalBasedRateAdder` and `ServiceChargePlanIntervalBasedRateAdderAudit` entities, which are essential for managing rate configurations and their audit records.

This model class is crucial for the business logic that deals with service charges and rate adjustments in the context of the application's pricing structure.


file name is aspnet_SchemaVersions.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aspnet_SchemaVersions.cs, 
filesummary is: This file defines a data model class named aspnet_SchemaVersions, which is part of the Eroms.Data.Atlantic namespace. It represents schema versioning for features within the application, featuring properties for the feature name, compatible schema version, and whether it is the current version. This model likely interacts with a database to manage and track schema versions required for application compatibility.


file name is WorkGroupExecutionHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WorkGroupExecutionHistory.cs, 
filesummary is: The file is a C# class definition that represents an entity related to workgroup execution history in a data model, primarily used within an application utilizing Entity Framework for ORM. 

The WorkGroupExecutionHistory class contains properties for tracking the execution history of workgroups, including unique identifiers, status, timestamps, and user information. It also has a collection for related WorkGroupTaskExecutionHistories, indicating its dependency on that entity for more detailed tracking of task executions under a specific workgroup.


file name is ClearingHouseInterest.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ClearingHouseInterest.cs, 
filesummary is: The file ClearingHouseInterest.cs defines a data model within the Eroms.Data.Atlantic namespace, specifically representing a "ClearingHouseInterest" entity. It includes properties such as keys, rates, validity dates, and metadata which suggest its use in a database context, likely for managing financial or market-related interests for clearing houses.

Key features include tracking the association of clearing houses with competitive resellers, indicating dependency on the ClearingHouse entity for relational integrity. It also appears to store information regarding interest rates with effective dates, hinting at business logic surrounding interest calculations or financial transactions. The model is likely part of a larger system dealing with market operations or financial management.


file name is ServiceInvoiceTax.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceInvoiceTax.cs, 
filesummary is: The file ServiceInvoiceTax.cs defines a data model for handling tax information associated with service invoices within the Eroms Data Atlantic namespace. The ServiceInvoiceTax class includes properties such as TaxRate, TaxCategory, and TaxDescription, which are essential for calculating and describing taxes related to service transactions. It relies on a relationship with the ServiceInvoice class, indicating dependencies on other components of the application that manage service invoices.


file name is ServiceProviderRemittanceDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderRemittanceDetail.cs, 
filesummary is: The file ServiceProviderRemittanceDetail.cs is part of the Eroms.Data.Atlantic namespace and defines a model class representing detailed information about remittance transactions from service providers. It encapsulates various attributes such as service provider keys, account details, payment amounts, and timestamps for creation and updates, as well as flags indicating the processing status.

This class likely interacts with a database table named ServiceProviderRemittanceDetail and could depend on other entities such as Account and ServiceProviderRemittance, indicating potential relationships within the broader data model of the application.


file name is NotificationMapTemplateDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationMapTemplateDetail.cs, 
filesummary is: This file defines a data model called NotificationMapTemplateDetail for the Eroms project, specifically within the Atlantic namespace. It outlines the structure of the NotificationMapTemplateDetail table used for managing notification templates, including fields for keys, metadata, and timestamps. This file also establishes relationships with other models like NotificationDeliveryMethod and NotificationType, indicating dependencies on other database entities for functionality.


file name is AccountsToExport.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountsToExport.cs, 
filesummary is: The file AccountsToExport.cs is a part of the Eroms.Data.Atlantic namespace and defines a model class representing accounts intended for export. It outlines the structure of the "AccountsToExport" table, including properties like AccountUniqueId, FirstName, LastName, and billing information, each with specific validation attributes for data integrity. This file is integral to the codebase as it interacts with databases, likely serving as a data transfer object in operations related to account data management and export functionality.


file name is LockBoxCouponDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/LockBoxCouponDetail.cs, 
filesummary is: The file LockBoxCouponDetail.cs defines the LockBoxCouponDetail class, which is part of the Eroms.Data.Atlantic namespace. This class serves as a model that represents the details of a coupon in a lockbox process, capturing essential attributes like batch number, sequence number, invoice number, payment amount, and processing status. It has relationships with other entities, such as LockBoxCheckDetail and LockBoxFileError collections, and is associated with an Account and a LockBoxFile, indicating dependencies on these entities and possibly related database tables for complete functionality.


file name is ServiceProviderInvoiceChargeTax.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderInvoiceChargeTax.cs, 
filesummary is: The file ServiceProviderInvoiceChargeTax.cs is part of the Eroms Data Atlantic namespace and defines a data model that represents a service provider's tax details related to invoice charges. This class encapsulates attributes like tax type, amount, and relevant relationships to other entities such as GeneralLedgerTransaction, ServiceProviderInvoice, and ServiceProviderInvoiceChargeType.

The features of this model include properties for tax computation, record linkage, and replication tracking, ensuring accurate financial records. It has dependencies on other classes for general ledger transactions and various charge types which connect to larger invoice processing and financial systems within the codebase.


file name is servicestodelete.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/servicestodelete.cs, 
filesummary is: This file defines a data model for a "servicestodelete" table within the Atlantic segment of the Eroms project. It includes a single property, "servicekey," which serves as the primary key for the table. The model indicates a database relationship and depends on Entity Framework for data interactions, suggesting it is part of the larger data architecture and business logic regarding service management.


file name is DirectDebitAccountType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DirectDebitAccountType.cs, 
filesummary is: This file defines a data model for the "DirectDebitAccountType" entity in the Eroms.Data.Atlantic namespace. It outlines the structure of the entity, indicating that it consists of properties such as AccountTypeID, Type, ProgID, and Active, which are essential for representing different types of direct debit accounts within the application. This model is related to a database table that likely stores information about account types, with dependencies on Entity Framework for database operations.


file name is EmpowerMenu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerMenu.cs, 
filesummary is: The file contains a class definition for "EmpowerMenu," which is part of a data model for the Eroms application. It defines properties that represent menu items within the application, including fields for the menu text, associated page, display order, and status. The class indicates a relationship to the AspxPageURL entity, suggesting dependencies on other table structures for rendering menu navigation in a user interface.


file name is UnmeteredMeterHistorical.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UnmeteredMeterHistorical.cs, 
filesummary is: The file UnmeteredMeterHistorical.cs is part of a data model for the Eroms project, specifically within the Atlantic segment. It defines the UnmeteredMeterHistorical class, which represents historical records of unmetered meter data, capturing details such as service location, service type, date range, total consumption, and related service information. This class is related to a database table named UnmeteredMeterHistorical and references other entities like Service and ServiceLocation, indicating dependencies on these models for comprehensive data handling in the application.


file name is UnmeteredMeter.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UnmeteredMeter.cs, 
filesummary is: The file UnmeteredMeter.cs is a data model class for the "UnmeteredMeter" entity within the Eroms.Data.Atlantic namespace. It defines properties such as ServiceLocationKey, ServiceType, ServiceTypeDescription, NumberOfDevices, and EndDate, which represent various attributes of an unmetered service. This class likely serves as part of a larger Entity Framework (EF) context, allowing the application to interact with the corresponding database table and manage related entities like ServiceLocation and UnmeteredServiceType.


file name is ServiceChargePlan.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceChargePlan.cs, 
filesummary is: The file ServiceChargePlan.cs defines the domain model for a Service Charge Plan in the Eroms.Data.Atlantic namespace. It includes various properties related to service charges, such as key identifiers, validity dates, status, and billing information. The class has relationships with other entities like Account, ChargePlan, and Service, indicating its integration within a broader billing or financial management system.


file name is InvoiceAccountCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceAccountCharge.cs, 
filesummary is: The file InvoiceAccountCharge.cs defines a data model for invoice account charges within the Eroms.Data.Atlantic namespace. It encompasses various properties such as invoice keys, totals, balances, due dates, and status flags that are essential for managing invoicing aspects of the business operations. This model likely interacts with a database to store and retrieve invoice-related data, reflecting core financial transactions and business processes.


file name is TaxItemCode.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaxItemCode.cs, 
filesummary is: The file TaxItemCode.cs contains a class definition for TaxItemCode, which is part of the Eroms.Data.Atlantic namespace. This class serves as a model representing tax item codes within a data context, likely related to a billing or invoicing system. It includes properties for identifying the tax code and its description, along with collections for various charge types that depend on this classification, such as event charges and recurring charges.


file name is LockBoxCheckDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/LockBoxCheckDetail.cs, 
filesummary is: The file LockBoxCheckDetail.cs defines a class that represents a database entity related to lockbox check details in the Eroms Atlantic system. This class serves as a model for a table in the database, containing properties that map to columns in the LockBoxCheckDetail table, including keys, check information, and relationships with other entities such as LockBoxCouponDetail and LockBoxFile. The class utilizes data annotations for validation and structure, indicating its role in the core business logic related to payment processing and record management.


file name is WorkProcessType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WorkProcessType.cs, 
filesummary is: This file defines the WorkProcessType class, which is part of the Eroms.Data.Atlantic namespace. This class models work process types and includes properties such as Code, Description, and EditorType. It also relates to other entities, specifically a collection of WorkGroupTask instances and a WorkProcessEditorType, indicating a structured approach to managing work processes within the application.


file name is EROMSACCTSUMMARYTX.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EROMSACCTSUMMARYTX.cs, 
filesummary is: The file contains a C# class definition for "EROMSACCTSUMMARYTX," which is part of the data model related to the Eroms Atlantic billing system. This class represents a detailed structure of account summary transactions used to manage customer data, billing information, and various account parameters within the system.

It includes multiple properties such as account type, marketer account number, customer name, billing address, contact details, utility metrics, and contract information. The class also includes references to database attributes, indicating dependencies on the EROMSACCTSUMMARYTX table in the database structure. This file is fundamental for the core features related to customer account management and billing processes in the application.


file name is ChargePlanOfferedBy.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanOfferedBy.cs, 
filesummary is: The file ChargePlanOfferedBy.cs is part of the data model for the Eroms.Atlantic namespace, which indicates its role in defining the structure of data related to charge plans offered by users. The primary features include the definition of the ChargePlanOfferedBy class, which maps to the "ChargePlanOfferedBy" table in a database and includes properties such as ChargePlanKey, Username, and Status. It has dependencies on the ChargePlan and User classes, reflecting relationships with other parts of the codebase that manage charge plans and user data.


file name is calendar.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/calendar.cs, 
filesummary is: This file defines a partial class named "calendar" within the Eroms.Data.Atlantic namespace, representing a table in a database that stores calendar information. The primary feature is a single key property, "calendardate," which likely serves as the unique identifier for calendar entries. This code is part of the Entity Framework model, enabling database interactions, and may depend on the broader data context configuration in the application.


file name is UsageBasedAdderType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UsageBasedAdderType.cs, 
filesummary is: The file UsageBasedAdderType.cs is part of the data model for the Eroms Atlantic project, specifically representing the UsageBasedAdderType entity. This entity includes properties that define the usage-based adder, such as a unique code and description, and establishes relationships with two collections: ServiceChargePlanUsageBasedRateAdders and ServiceChargePlanUsageBasedRateAdderAudits. It connects to service charge plans, potentially impacting billing and auditing processes within the application's business domain.


file name is TrueUpMiscellaneousCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TrueUpMiscellaneousCharge.cs, 
filesummary is: The file TrueUpMiscellaneousCharge.cs is a data model class within the Eroms.Data.Atlantic namespace, which appears to be part of a larger system managing financial or data transactions related to "true-up" processes. This file defines the structure for a TrueUpMiscellaneousCharge entity, including properties such as TrueUpKey, MiscellaneousChargeKey, Description, Amount, and ReplicationKey.

This entity is tied to a database table named "TrueUpMiscellaneousCharge" and also relates to another entity called TrueUp. The presence of data annotations suggests that this model is used for validation and to dictate how the data interacts with a database, possibly using Entity Framework.


file name is aspnet_Profile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aspnet_Profile.cs, 
filesummary is: The file is part of the data model related to user profiles within the Eroms Atlantic application, specifically defining the structure and properties of the aspnet_Profile entity. It contains core attributes like UserId, PropertyNames, PropertyValuesString, PropertyValuesBinary, and LastUpdatedDate, which are integral for managing user profile data. This model is dependent on the aspnet_Users entity, indicating a relationship between user profiles and user accounts.


file name is SeasonalIndexForRoomCountHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/SeasonalIndexForRoomCountHistory.cs, 
filesummary is: The file defines a data model class named SeasonalIndexForRoomCountHistory, which is part of the Eroms.Data.Atlantic namespace. This class represents a database table that tracks seasonal index data for room counts, including fields for various months, the year, and metadata on creation and updates. It relies on Entity Framework for database interactions and includes several properties indicating room count data alongside timestamps for record management.


file name is ACHPaymentProfileInformation.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ACHPaymentProfileInformation.cs, 
filesummary is: This file defines the `ACHPaymentProfileInformation` class in the Eroms.Data.Atlantic namespace, which represents the ACH payment profile information within a payment processing system. It includes properties such as CustomerPaymentProfileId, NickName, and State, as well as relationships to related entities like ACHTransaction, AchPaymentType, and Status.

Key features include the ability to manage multiple ACH transactions linked to a payment profile, and it tracks the status and type of payment. The file interacts with a database table named "ACHPaymentProfileInformation," showcasing dependencies on ACHTransaction, AchPaymentType, and Status for full functionality.


file name is AccountChronology.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountChronology.cs, 
filesummary is: The file AccountChronology.cs defines a model for handling account chronology in the Eroms Atlantic application. It includes properties such as AccountKey, AccountAction, ActionAt, and Username, which track actions related to user accounts over time. This model likely interacts with a database table named "AccountChronology" and depends on other models like Account and AccountAction for its functionalities.


file name is ServiceProviderInvoiceGroup.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderInvoiceGroup.cs, 
filesummary is: This file defines the `ServiceProviderInvoiceGroup` class within the `Eroms.Data.Atlantic` namespace, representing a data model in the codebase. This model includes properties such as `GroupId`, `ServiceProviderInvoiceKey`, `IsPaymentMade`, and `ReplicationKey`, which are essential for managing service provider invoice groups. The class is linked to the `ServiceProviderInvoice` entity, indicating a dependency on this other model for data integrity and relationship mapping within a database context.


file name is ServiceProviderInvoice.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderInvoice.cs, 
filesummary is: The file defines a data model for managing service provider invoices within an application, likely part of a larger billing or financial system. It contains properties related to invoice management such as `InvoiceNumber`, `InvoiceDate`, `PaymentDueDate`, and tracks various associated collections like `ServiceInvoices` and `ServiceProviderInvoiceCharges`. Dependencies include other models like `Service`, `ServiceProvider`, and related charge details, suggesting integration with payment processing and service management features in the overall codebase.


file name is ServiceChronologyDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceChronologyDetail.cs, 
filesummary is: The file ServiceChronologyDetail.cs is part of the Eroms.Data.Atlantic namespace and defines a data model related to service chronology details, likely for tracking changes or updates made to service records. It features properties that track the old and new values of service data, along with metadata such as keys and change reasons, indicating its role in data management and historical tracking within the application.

This file likely interacts with a database table named "ServiceChronologyDetail," and its structure suggests that it may be used in conjunction with other parts of the codebase that manage service-related operations or audit trails. There are dependencies on Entity Framework for data handling and validation attributes for ensuring data integrity.


file name is ServiceOrderPurpose.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceOrderPurpose.cs, 
filesummary is: This file defines a data model for service order purposes within the Eroms Atlantic context. It establishes a relationship between service order purposes and service orders, indicating that each purpose can link to multiple service orders. It relies on Entity Framework for data mapping, with attributes for database constraints and table definitions.


file name is ServiceTransactionReason.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceTransactionReason.cs, 
filesummary is: This file defines the `ServiceTransactionReason` class, which represents a table within the database that relates to service transaction reasons in the Atlantic model of the Eroms application. Key features of the class include properties for `ServiceTransactionKey`, `ReasonType`, `ReasonCode`, and `Description`, along with a relationship to the `ServiceTransaction` class. This file is part of the data access layer and relies on Entity Framework for ORM, potentially interacting with a database table named "ServiceTransactionReason".


file name is EmpowerAlertType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerAlertType.cs, 
filesummary is: The file EmpowerAlertType.cs is a model class within the Eroms.Data.Atlantic namespace that defines the structure and properties of the EmpowerAlertType entity in a database. This file likely serves as part of the data access layer, facilitating interactions between the application and the database related to alert management.

The EmpowerAlertType class includes properties such as Code and Description, which are crucial for identifying and describing different alert types. It maintains relationships with collections of related alerts: EmpowerAlerts, IgnoredAlerts, and ResolvedAlerts, indicating its dependence on other alert-related entities in the system.


file name is AccountEnrollment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountEnrollment.cs, 
filesummary is: The file AccountEnrollment.cs defines a data model for the Account Enrollment entity in the Eroms.Data.Atlantic namespace. It captures various attributes related to account enrollments, including dates, identifiers, utility information, contact details, and status fields. This model serves as part of the larger codebase for managing account enrollment processes, possibly interacting with databases for storage and retrieval through Entity Framework.

The key features include:
- Representation of account enrollment data with multiple properties for tracking and managing enrollments.
- Relationships to other entities like Aggregator and BatchEnrollmentSheet, indicating dependencies on related data structures.
- The model is structured for integration with a database, likely handling utility service enrollments and associated data.


file name is Invoice.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Invoice.cs, 
filesummary is: The file Invoice.cs defines the structure of the Invoice model within the Eroms application, which is likely related to financial transactions or billing. It includes properties representing various attributes of an invoice, such as invoice totals, account information, and payment details. The Invoice class also establishes relationships with other entities like Account, Address, and various collections representing its interactions with different components like payments and disputes. 

Key features include maintaining financial records, tracking payment statuses, and handling disputes related to invoices. Dependencies include various related models such as Account, Address, and collections like InvoicePayments and InvoiceDisputes, which are vital for the application's billing and invoicing functionalities.


file name is MCPEIntervalAudit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MCPEIntervalAudit.cs, 
filesummary is: The file MCPEIntervalAudit.cs defines a partial class representing an entity for auditing MCPE (Market Clearing Price for Electricity) intervals within the Atlantic region. It includes properties such as MCPEIntervalAuditKey, PowerRegion, MCPEDate, and values before and after changes, ensuring tracking of modifications. This class likely interacts with a database table named MCPEIntervalAudit, facilitating data management for auditing purposes in the broader energy market system.


file name is AccountSubLedgerDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountSubLedgerDetail.cs, 
filesummary is: The file AccountSubLedgerDetail.cs defines a data model for managing account subledger details within the Eroms.Data.Atlantic namespace. It establishes the structure of the AccountSubLedgerDetail entity with properties such as AccountSubLedgerDetailKey, Amount, DueDate, and tracking for payments related to account subledger details. This model is part of an Entity Framework setup, and it interacts with related tables like AccountSubLedger and AccountSubLedgerDetailPayment, highlighting its role in transaction management within the application.


file name is ThirdPartyPaymentProvider.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ThirdPartyPaymentProvider.cs, 
filesummary is: The file defines a data model for the "ThirdPartyPaymentProvider" entity within a larger system related to payments. It includes various properties that store data about payment providers, such as provider name, folders for local archives, and associated payment files. The model also establishes relationships with other entities, indicating dependencies on "LiteUpFile," "LockBoxFile," and "ThirdPartyPaymentFile" collections.


file name is TicketResponse.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TicketResponse.cs, 
filesummary is: The file TicketResponse.cs contains a class definition for TicketResponse, which is part of the Eroms.Data.Atlantic namespace. This class is mapped to the TicketResponse database table and includes properties related to ticket responses such as identifiers, creation and update details, the response text, and status. It also has a relationship with a Task entity, indicating that this feature is part of a system that manages tickets and their responses, possibly within a support or project management application.


file name is ServiceChargePlanUsageBasedRateAdderAudit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceChargePlanUsageBasedRateAdderAudit.cs, 
filesummary is: The file defines a C# class for auditing service charge plans in the context of a data model related to the Eroms project. It maps to a database table named "ServiceChargePlanUsageBasedRateAdderAudit" and includes various properties to track details such as user inputs and timestamps.

Features include:
- Audit tracking for service charge plans, which likely allows reviewing past changes and usage metrics. 
- Dependencies include a relationship with the "UsageBasedAdderType" class, potentially linking to the type of adder in the service charge calculation.

This is crucial for maintaining data integrity and accountability associated with service charge adjustments in the application.


file name is MeterUpdate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MeterUpdate.cs, 
filesummary is: This file is part of the Eroms codebase and defines the `MeterUpdate` class, which represents a database entity related to meter updates in a utility management system. It includes properties such as `ServiceLocationUpdateKey`, `MeterNumber`, and `MeterType`, and establishes relationships with other entities like `MeterUpdateType` and `ServiceLocation`. The context indicates that it is essential for tracking meter-related changes and may interact with a database for data persistence.


file name is ServiceDate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceDate.cs, 
filesummary is: The file ServiceDate.cs is part of the Eroms Data Atlantic namespace and defines the ServiceDate entity, which represents a table in the database. It contains properties for managing service dates, including identifiers, date info, and tracking details such as who created the record and when. This file is integral to the core functionality of the application, and it depends on other entities such as Service and ServiceDateType for its relationships.


file name is NEGINACCTSUMMARYTX.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NEGINACCTSUMMARYTX.cs, 
filesummary is: The file NEGINACCTSUMMARYTX.cs is part of the Eroms Data Atlantic namespace and defines a data model for the NEGINACCTSUMMARYTX entity. This model represents a table in a database and includes various properties that capture details about customer accounts and billing information. The entity is likely used within a larger application for tracking customer account summaries, with dependencies on a relational database for storing and retrieving data corresponding to the defined structure.


file name is ProcessType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ProcessType.cs, 
filesummary is: The file defines a data model class named ProcessType within the Eroms.Data.Atlantic namespace. This class represents a database table that stores different types of processes, including a unique code, a description, and a deprecation status. It also establishes a relationship with another entity, ProcessSchedule, indicating that multiple process schedules can be associated with each process type.


file name is DepositPayment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositPayment.cs, 
filesummary is: The file DepositPayment.cs defines the structure and behavior of the DepositPayment entity within the Eroms.Data.Atlantic namespace. It handles key properties such as DepositPaymentKey, DepositInstallmentKey, and PaymentKey while managing relationships with DepositInstallments and Payments. This file serves as a core component of the application’s data model, with dependencies on other entities like DepositInstallment and Payment, as well as integrating with collection types for DepositRefunds, thereby illustrating its role in managing deposit payment details in a database context.


file name is TexpoContractSummaryNJ_Ref_Old.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TexpoContractSummaryNJ_Ref_Old.cs, 
filesummary is: The file TexpoContractSummaryNJ_Ref_Old.cs is a data model class used within the Eroms Data Atlantic namespace, representing a summary of contracts related to the Texpo service. It defines various properties such as customer name, address, contract details, and pricing information, which are essential for handling contract information in the application.

This file likely plays a crucial role in managing and storing contract-related data in a database, possibly interacting with other data entities and database tables related to customer contracts and pricing structures. It provides the structure needed to facilitate contract processing and associated business logic.


file name is Promotion.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Promotion.cs, 
filesummary is: The file Promotion.cs is a model class representing promotions within the Eroms Atlantic application. It defines properties such as PromotionKey, Name, Code, and various metadata related to promotions, which likely serve as records in a database. It includes relationships to other entities like PromotionAccount, PromotionChargePlan, PromotionQueue, and PromotionTransaction, indicating it plays a central role in managing promotional activities and their associations within the broader codebase.


file name is CustomFieldControlType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CustomFieldControlType.cs, 
filesummary is: The file defines a data model class named CustomFieldControlType within the Eroms.Data.Atlantic namespace. This class represents a database table that includes properties for a unique code, a description, and a collection of related CustomField entities. It is part of a larger codebase focused on data management, specifically handling custom fields as part of a business application, likely involving user-defined data structures. Dependencies include the CustomField class and potentially a database context for Entity Framework interaction.


file name is CompetitiveResellerMessageFilter.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CompetitiveResellerMessageFilter.cs, 
filesummary is: The file CompetitiveResellerMessageFilter.cs defines a data model class used in the Eroms.Data.Atlantic namespace. It represents the structure of the CompetitiveResellerMessageFilter table in the database, including properties such as filter type, filter value, validity dates, and metadata for tracking creation and updates. This model likely relates to features involving managing reseller messaging filters within the larger codebase, with dependencies on the Entity Framework for data access and a relational database for persistence.


file name is Notification.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Notification.cs, 
filesummary is: The file Notification.cs is a class definition within the Eroms.Data.Atlantic namespace, representing a Notification entity. It encapsulates various properties related to notifications, such as identifiers, timestamps, and flags that indicate the processing state and associated data dependencies. The class relies on several relationships with other entities, including Account, Customer, Invoice, and NotificationType, and supports collections like FtpFileSource, NotificationData, and NotificationDetail, thus indicating its role in a broader database context for handling notifications and related processes.


file name is DepositRequirementByScore.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositRequirementByScore.cs, 
filesummary is: This file represents a data model within the Atlantic codebase, specifically focusing on the deposit requirements that vary by customer score. It defines properties related to deposit criteria, such as score ranges and associated financial details, along with display text for English and Spanish. The model relies on a relationship with another entity, DepositRequirement, and indicates potential dependencies on database tables for structured data management.


file name is InvoiceAging.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceAging.cs, 
filesummary is: The file InvoiceAging.cs defines a model class that represents the Invoice Aging data entity in an application related to managing customer invoices. It includes properties for invoice aging buckets and a reference to customer information. This class likely interacts with a database table called "InvoiceAging" and relies on the CustomerInfo class for managing customer-related data.


file name is CommodityType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CommodityType.cs, 
filesummary is: The file CommodityType.cs is part of a larger codebase that defines data models used in the Atlantic module of the Eroms application. This file specifically defines the CommodityType class, which represents a commodity with attributes such as Code, Description, Unit, and flags for add-on and Verzana compatibility. 

The CommodityType class has relationships with other entities, highlighting its dependencies on ServiceProviderCommodity and Service, indicating that it plays a crucial role in managing services related to commodities in the application.


file name is OutgoingEdiFile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/OutgoingEdiFile.cs, 
filesummary is: The file defines the OutgoingEdiFile class within the Eroms.Data.Atlantic namespace. This class represents a data model used to track outgoing Electronic Data Interchange (EDI) files. It includes properties for EDI file details such as sender and receiver codes, control numbers, acknowledgment statuses, timestamps, and file paths. 

Key features include managing the EDI file's lifecycle and tracking its acknowledgment status. It is associated with a database table named "OutgoingEdiFile" and includes a potential relationship with a competitive reseller through the CompetitiveResellerKey property.


file name is ServiceProviderPriorityCodeChargeAudit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderPriorityCodeChargeAudit.cs, 
filesummary is: The file defines a part of the data model for the Eroms system, specifically focusing on the auditing of service provider priority codes and their associated charges. It includes properties related to various charges for residential and commercial services and maintains audit information such as creation and update timestamps.

Key features include:
- It manages audit records for service provider charges with various categories (prepaid and postpaid).
- Dependencies include relationships to ServiceProvider and ServiceProviderPriorityCode entities, indicating that it interacts with other tables in the database.
- This implementation is essential for tracking changes in billing structures and ensuring data integrity over time.


file name is WorkGroupTaskExecutionHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WorkGroupTaskExecutionHistory.cs, 
filesummary is: This file defines a model class for tracking the execution history of tasks within a workgroup, specifically in the context of the Atlantic project. It contains various properties such as status, error codes, and timestamps, which are essential for monitoring task performance and handling errors. The class establishes a relationship with another entity, WorkGroupExecutionHistory, indicating that it may depend on related execution history data for processing.


file name is ACHProfileInformation.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ACHProfileInformation.cs, 
filesummary is: The file ACHProfileInformation.cs is part of the Eroms Atlantic module and serves as a data model for representing ACH (Automated Clearing House) profile information within the application. 

It defines the ACHProfileInformation class, which includes various properties related to ACH profiles, such as identifiers, status, account information, and timestamps for creation and updates. This class is related to other entities like Account, ACHProvider, and Status, and maintains collections of ACHPaymentProfileInformation and ACHTransaction, indicating its role in managing ACH transactions and payment profiles in the context of financial operations.


file name is NotificationMarkedAsIgnoreReason.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationMarkedAsIgnoreReason.cs, 
filesummary is: The file NotificationMarkedAsIgnoreReason.cs defines a data model for the "NotificationMarkedAsIgnoreReason" entity within the Eroms.Atlantic namespace. This entity is likely related to notification management, providing a way to categorize reasons for ignoring notifications. It includes properties for a unique code and a description, suggesting it may interact with a database table of the same name. Dependencies may include Entity Framework for data access and potentially other parts of the codebase that manage notifications or similar data entities.


file name is AccountHistoryAccountEnd.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountHistoryAccountEnd.cs, 
filesummary is: The file defines a data model for an account history entity within the Eroms Data Atlantic namespace. It represents changes to an account with properties such as replication key, account key, and timestamps for old and new values. This model likely interacts with an "Account" entity and may depend on a database table named "AccountHistoryAccountEnd" to store historical data related to account changes.


file name is TimeOfUse.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TimeOfUse.cs, 
filesummary is: The file defines a data model class named TimeOfUse, which is part of the Eroms.Data.Atlantic namespace. It outlines the structure of the TimeOfUse entity, including properties such as Code and Description, and establishes relationships with other entities like MeteredMeter, ServiceUsageByTimeOfUse, and UsageCharge. This model likely interacts with a database table named "TimeOfUse," and its relationships imply dependencies on these other entities for managing usage and billing information.


file name is AchPaymentQueueStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AchPaymentQueueStatu.cs, 
filesummary is: The file AchPaymentQueueStatu.cs defines a data model within the Eroms.Data.Atlantic namespace that relates to handling payment statuses in an application, likely part of a finance management system. 

It includes properties for payment status codes and descriptions, along with collections for associated payment queues and their histories, indicating a one-to-many relationship. This model is essential for tracking and managing payment processes, potentially linking to a database that stores payment data. Dependencies include access to related tables, specifically AchPaymentQueue and AchPaymentQueueHistory.


file name is CallBackPreferredTime.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CallBackPreferredTime.cs, 
filesummary is: The file CallBackPreferredTime.cs is part of the Eroms.Data.Atlantic namespace, and it defines the CallBackPreferredTime class representing a model for handling callback preferences in a system. This class includes properties such as CompetitiveResellerKey, Code, Description, IsDefault, and Status, and it relates to Notes, which is a collection of associated notes.

The file serves as an Entity Framework model to interact with a database table named CallBackPreferredTime. It likely plays a crucial role in the data access layer of the application, potentially affecting how callback preferences are stored and managed in the database, with dependencies on the Note entity for related information.


file name is ElectricityReliabilityCouncil.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ElectricityReliabilityCouncil.cs, 
filesummary is: The file ElectricityReliabilityCouncil.cs defines a data model for the Electricity Reliability Council within the Eroms.Data.Atlantic namespace. It represents a database table with properties such as Code, Abbreviation, LongForm, and Application, linking to the Application entity and allowing for multiple ClearingHouseInformation entries. This model is essential for managing electricity council data and is likely used within the application's data access layer to facilitate interactions with the database.


file name is XmlDataFile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/XmlDataFile.cs, 
filesummary is: The file defines the XmlDataFile class, which represents a database table used in the context of the Eroms Atlantic application. This class includes properties that capture metadata about XML data files, including file name, type, record count, and associated FTP sources and notifications. It establishes relationships with other entities, indicating it has dependencies on FtpFileSource and Notification classes, and it utilizes database annotations for schema mapping.


file name is ChargePlanAveragePrice.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanAveragePrice.cs, 
filesummary is: The file ChargePlanAveragePrice.cs defines a data model for the ChargePlanAveragePrice entity within the Eroms.Data.Atlantic namespace. It represents a table structure in a database with properties including identifiers for charge plans and service providers, along with average price fields for different pricing tiers. This model likely interacts with other components of the codebase related to pricing strategies or billing processes in the Atlantic-related features of the application.


file name is ServiceProviderPaymentMethod.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderPaymentMethod.cs, 
filesummary is: The file defines a data model class named ServiceProviderPaymentMethod within the Eroms.Data.Atlantic namespace. It represents a payment method associated with service providers and includes properties like Code and Description. This model is linked to collections of related entities such as ServiceProviderPayments, ServiceProviderPaymentQueues, and ServiceProviderRemittances, indicating its role in managing financial transactions for service providers in the larger codebase.


file name is Mail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Mail.cs, 
filesummary is: The file Mail.cs defines a model class for handling mail-related data within the Eroms.Atlantic namespace. It outlines the structure of the Mail table, detailing properties such as sender, recipient, subject, and message body, which are essential for mail processing. This model likely interacts with databases, requiring connections to tables like Account for managing user information and MailSettings for configuration.


file name is UsageChargeByUtility.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UsageChargeByUtility.cs, 
filesummary is: This file defines the `UsageChargeByUtility` class which represents a model related to usage charges for utilities within the Eroms Atlantic system. It includes various properties relevant to the charge plan, such as `ChargePlanKey`, `ServiceProviderKey`, and pricing details like `ChargePerUnit`. The class has relationships with other entities like `ChargePlan`, `ServiceProvider`, and multiple `ServiceProviderDocument` types, indicating dependencies on other parts of the codebase as well as linking to database records.


file name is ServiceOrder.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceOrder.cs, 
filesummary is: The file ServiceOrder.cs defines a data model for service orders within the Eroms.Data.Atlantic namespace. It includes properties that capture essential details about service orders, such as transaction types, service dates, meter information, and associated alerts. The class also establishes relationships with other entities like EmpowerAlert, ResolvedAlert, and various service order types, indicating that this code is integral to managing service orders in the application.


file name is AmsUsageAnomalyQueue.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AmsUsageAnomalyQueue.cs, 
filesummary is: The file AmsUsageAnomalyQueue.cs contains a class that represents a database table for monitoring anomalies in usage data. It defines properties related to a user’s energy consumption across multiple time intervals, as well as metadata for tracking the status and modifications of the records. This class depends on an Entity Framework context and may interact with other data entities like AMSUsageDataType and QueueStatu for comprehensive analytics and reporting.


file name is TaskStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaskStatu.cs, 
filesummary is: The file TaskStatu.cs defines a model class that represents the status of tasks within the Eroms Atlantic codebase, suggesting it is part of a larger application related to task management or tracking. The class utilizes attributes for database mapping, indicating it is tied to a database, possibly storing task statuses. The presence of keys and data annotations suggests it may be linked to a table that holds status information, which other parts of the application may depend on for functionality related to task processing or reporting.


file name is InvoiceDispute.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceDispute.cs, 
filesummary is: The file InvoiceDispute.cs is part of the Eroms.Data.Atlantic namespace and defines the InvoiceDispute model, which represents a record of disputes related to invoices within the application. This file contains properties that track the unique identifier for the dispute, the related invoice, dispute date, and additional details, and it establishes relationships with other models, specifically the Invoice and Dispute entities.

Features include:
- Represents disputes concerning invoices.
- Contains properties for dispute tracking, such as the date of dispute and dispute type.
- Relies on related entities, Invoice and Dispute, to form a cohesive database relationship.

This code is vital for managing invoice disputes, serving as a data model for the application’s business logic concerning invoicing and dispute resolution.


file name is TaxGroup.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaxGroup.cs, 
filesummary is: The file TaxGroup.cs defines a data model for managing tax groups within the Eroms Atlantic application. It outlines the properties of a TaxGroup, including an identifier, a description, and relationships to collections of Accounts, Services, and TaxGroupTaxTypes. This model interacts with a database table named "TaxGroup" and enables the application to manage related entity associations effectively.


file name is UsageChargeException.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UsageChargeException.cs, 
filesummary is: The file defines the `UsageChargeException` class which represents a data model for managing exceptions related to usage charges in a billing system. It captures details such as charge plans, pricing types, time frames, and rates, and contains properties linking to related entities like `ChargePlan` and `UsageCharge`. This model likely interacts with a database, indicating its central role in handling billing logic within the application.


file name is ThirdPartyPayment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ThirdPartyPayment.cs, 
filesummary is: This file defines a class named ThirdPartyPayment which serves as a representation of payment transactions from third-party sources. The class includes various properties that hold essential information related to payments, such as identifiers, receipt numbers, amounts, and agent details. It appears to be part of a larger system handling payment processing, potentially incorporating dependencies on a database table named ThirdPartyPayment, where transaction records are stored.


file name is ServiceProviderInformation.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderInformation.cs, 
filesummary is: The file ServiceProviderInformation.cs defines a data model class for managing service provider information within the Eroms Atlantic module, illustrating how service providers interact in the system. It features properties such as ServiceProviderInformationDuns and name, alongside relationships that include collections for service providers, cycle days, and priority codes. Dependencies include the ClearingHouseInformation class and database tables that store related service provider data, providing a structure for data management in the application.


file name is ServiceStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceStatu.cs, 
filesummary is: The file ServiceStatu.cs defines a data model representing the status of a service within the Eroms Atlantic framework. It outlines properties such as ServiceKey, Status, CreatedBy, CreatedAt, and ReplicationKey, which collectively track the service's state and metadata. The model has a relationship with another entity called Service, suggesting dependencies on the service data itself for managing statuses, potentially interacting with a database in the backend.


file name is PaymentMasterToExport.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PaymentMasterToExport.cs, 
filesummary is: The file PaymentMasterToExport.cs defines an Entity Framework model for a database table called PaymentMasterToExport within the Eroms.Data.Atlantic namespace. This model includes properties that represent various fields related to payment information, such as account details, payment amounts, and timestamps.

Key features include the tracking of payment details like account numbers, payment methods, and dates of transactions. It relies on database schemas with standard validation attributes and underscores the structure of exported payment records, which may link to user accounts and transaction histories within the broader application.


file name is NoteReason.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NoteReason.cs, 
filesummary is: The file NoteReason.cs defines a class representing a data model for the "NoteReason" table in a database, part of the Eroms.Data.Atlantic namespace. It contains properties that map to table columns including keys for identifying records and fields for descriptions and status. This class may serve as a foundation for data manipulation and is likely used in conjunction with Entity Framework for database interactions. Dependencies include the NoteArea class, which is also part of the data model, indicating a relationship between these entities.


file name is AccountTrueUpServiceInvoice.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountTrueUpServiceInvoice.cs, 
filesummary is: The file represents a model class named AccountTrueUpServiceInvoice, which is part of the Eroms.Data.Atlantic namespace. This class is linked to two entities—AccountTrueUp and ServiceInvoice—through foreign keys and defines the structure of a database table for managing service invoice records related to account true-ups.

Key features include holding invoice data including its total and maintaining relationships with other core entities. Dependencies include the AccountTrueUp and ServiceInvoice models, indicating that this class relies on those entities for complete functionality within the application.


file name is NoteArea.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NoteArea.cs, 
filesummary is: This file defines the `NoteArea` class, which represents a database table within the Eroms project focused on Atlantic data management. The class includes properties for handling key attributes such as `CompetitiveResellerKey`, `Code`, and `Description`, along with relationships to collections of `Note` and `NoteReason` entities. The `NoteArea` class is integral to the data structure, facilitating operations related to notes and reasons in the system's business logic.


file name is aurearateinfo.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aurearateinfo.cs, 
filesummary is: The file aurearateinfo.cs is a data model class representing the "aurearateinfo" table in a database, which relates to the broader codebase by defining how customer rate information is structured and managed.

This file encapsulates essential attributes of customer rate records, including identifiers like CustomerID and CustomerName, as well as contract dates and rate details. It utilizes attributes for Entity Framework to designate primary keys and column properties. The class structure indicates a dependency on a database table that must exist for the application to function correctly.


file name is ChargePlanExtension.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanExtension.cs, 
filesummary is: The file `ChargePlanExtension.cs` is part of the Eroms.Data.Atlantic namespace and defines a class that represents the `ChargePlanExtension` model in the application. This model contains various properties that configure charge plan behavior in different contexts (e.g., enrollment, renewals), allowing flexible management and display options across different platforms.

Key features of the `ChargePlanExtension` include configuration options for displaying charge plans on various signing and engagement platforms, requirements for deposits and credit checks, and conditions for new enrollments and renewals. It is linked to another entity, `ChargePlan`, establishing a relationship that likely controls how charge plans are referenced and utilized across the codebase.


file name is DirectDebitCreditCard.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DirectDebitCreditCard.cs, 
filesummary is: The file DirectDebitCreditCard.cs defines a class that models the structure of a DirectDebitCreditCard entity in the Eroms.Data.Atlantic namespace. This entity represents credit card information, including attributes such as CreditCardID, CardType, CardName, CardNumber, and expiration details. It likely interacts with a database table named "DirectDebitCreditCard" and is essential for managing payment processing features within the larger codebase.


file name is ServiceUsage.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceUsage.cs, 
filesummary is: The file ServiceUsage.cs defines a model for tracking service usage within the Eroms.Data.Atlantic namespace. It encapsulates various properties related to service transactions such as timestamps, quantity, invoicing status, and relationships with other entities like Service and UnitOfMeasure. This model is integral to the application's core business logic, likely related to billing or resource management, and may depend on associated services and units of measure for its functionality.


file name is NotificationMail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationMail.cs, 
filesummary is: The file NotificationMail.cs defines a class that represents a notification mail entity within the Eroms.Data.Atlantic namespace. It outlines properties such as sender, recipient, subject, and content for managing email notifications, forming an essential part of the application’s communication features. This class interacts with related entities like Account, MailSetting, and NotificationDetail, suggesting dependencies on associated database tables for retrieving and storing relevant information.


file name is NotificationMapTemplateAddressOption.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationMapTemplateAddressOption.cs, 
filesummary is: The file defines a data model for a NotificationMapTemplateAddressOption within the Eroms Atlantic system. This class is part of the Entity Framework, facilitating the database mapping for notification templates with associated options. It establishes a relationship with the NotificationMapTemplate, indicating a collection of templates linked to each address option. Dependencies include the NotificationMapTemplate class and relevant database configurations.


file name is RateTransition.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/RateTransition.cs, 
filesummary is: The file RateTransition.cs defines a data model for managing rate transitions within the Eroms Data Atlantic namespace. It outlines a class that represents a single rate transition record, detailing various attributes including identifiers, timestamps, and status flags relevant to billing or account management processes.

Key features include:
- Attributes like RateTransitionID, AccountKey, and CustID for unique identification.
- Support for data storage through Entity Framework, including database mappings and data annotations.

This model likely interacts with a database table named "RateTransition," and may depend on other components managing account and billing logic within the larger codebase.


file name is ResponseDeliveryMethod.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ResponseDeliveryMethod.cs, 
filesummary is: The file defines a class representing the ResponseDeliveryMethod entity within an Atlantic data context, suggesting it is part of a data model for the Eroms project. It contains properties for Code and Description, which are crucial identifiers for the response delivery method. This file likely interacts with a database table named "ResponseDeliveryMethod," and other components may depend on this data structure for managing response delivery options in the application.


file name is MeteredMeterInitial.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MeteredMeterInitial.cs, 
filesummary is: The file MeteredMeterInitial.cs defines the data model for the MeteredMeterInitial table in the Eroms.Data.Atlantic namespace, which is part of a larger data access layer in the application. It outlines the structure for metered readings, including properties such as ServiceLocationKey, MeterNumber, and InitialReadDate, indicating its role in managing utility meter data. This model likely depends on related services defined in other parts of the codebase, particularly the Service class, connecting meter readings to respective service records.


file name is aspnet_Paths.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aspnet_Paths.cs, 
filesummary is: The file Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aspnet_Paths.cs defines the `aspnet_Paths` class, which represents a model for managing paths within a web application context. 

This class includes properties for PathId, ApplicationId, and Path-related information, facilitating personalization features by linking with user-specific settings. The class maintains relationships with other models, such as aspnet_Applications and aspnet_PersonalizationPerUser, indicating dependencies on user personalization data and application context management.


file name is CompetitiveResellerMessageFilterType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CompetitiveResellerMessageFilterType.cs, 
filesummary is: The file CompetitiveResellerMessageFilterType.cs is a C# class file defining a model for the database table "CompetitiveResellerMessageFilterType" within the Eroms.Data.Atlantic namespace. This model represents the structure of data related to competitive reseller message filters, containing properties for a unique code and a description. This file may interact with a database through Entity Framework, indicating a dependency on the database layer for operations on competitive reseller message filters.


file name is LiteUpFileData.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/LiteUpFileData.cs, 
filesummary is: The file LiteUpFileData.cs is a model class within the Eroms.Data.Atlantic namespace that defines the structure and attributes of the LiteUpFileData entity used in the application. It reflects a data table with properties related to site information including address, city, state, and date fields, indicating it handles data relevant to physical locations. This model likely interacts with a database table called "LiteUpFileData" and has relationships with the LiteUpFile entity, forming part of a data access layer in the codebase.


file name is DirectDebitPaymentDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DirectDebitPaymentDetail.cs, 
filesummary is: The file defines a partial class named DirectDebitPaymentDetail, which represents a structure for managing details related to direct debit payments in the Eroms Atlantic system. This class is part of a broader entity framework model and includes properties that map to a database table, including identifiers for payments and invoices along with the payment amount. It potentially depends on a database table labeled "DirectDebitPaymentDetail" to store its records, signifying its role in the financial transactions process within the application.


file name is ThirdPartyDataProviderType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ThirdPartyDataProviderType.cs, 
filesummary is: The file ThirdPartyDataProviderType.cs defines a model class for representing a data provider type in the Eroms Atlantic system. This class serves as a blueprint for interacting with the "ThirdPartyDataProviderType" database table, detailing its properties such as a unique code and a description. Additionally, it establishes a relationship with a collection of ThirdPartyDataProviders, indicating that multiple data providers can be associated with a single provider type, which could be critical for referencing related data in the application.


file name is WorkProcessEditorType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WorkProcessEditorType.cs, 
filesummary is: The file contains a data model class named WorkProcessEditorType that is part of a larger database context within the Eroms.Data.Atlantic namespace. This class is used to represent a table in the database, defining its structure with properties for a unique code and a description, as well as a collection of related WorkProcessType entities. The class employs Entity Framework attributes to dictate how it maps to the corresponding database table, suggesting its use in managing work processes within the application.


file name is ApplicationRoleFolderName.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ApplicationRoleFolderName.cs, 
filesummary is: This file defines a data model class named ApplicationRoleFolderName within the Eroms.Data.Atlantic namespace. It represents a database table with properties including a unique code, a description, and a reference to an application. The class establishes a relationship with the Application entity, indicating a dependency on it for functionality related to application roles and their associated folder names.


file name is WorkGroupStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WorkGroupStatu.cs, 
filesummary is: The file WorkGroupStatu.cs is part of the data model in the Eroms Atlantic project, specifically representing a database entity. It defines a class that models a Work Group Status with properties for a unique code and a descriptive string, indicating its role in managing work group states within the application. This class likely interacts with a database table, mapping the data structure for persistent storage and retrieval of work group status information.


file name is InvoiceSeasonalIndex.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceSeasonalIndex.cs, 
filesummary is: The file contains a C# class definition for InvoiceSeasonalIndex, which represents an entity in a database related to invoice management. It includes properties for storing various details about invoices such as estimates, usage, and timestamps. This class is likely part of a larger application handling invoicing processes, with dependencies on the Account and Invoice classes for managing invoice-related data.


file name is ZonalCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ZonalCharge.cs, 
filesummary is: This file defines the ZonalCharge class, which represents a model within the Eroms.Data.Atlantic namespace, likely part of a larger system managing energy charges. The class includes properties related to charge plans, such as charge amounts, associated regions, and record tracking details. It also establishes relationships with other entities like ChargePlan and MCPEPowerRegion, indicating dependencies on corresponding databases or tables.


file name is ServiceCascadeType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceCascadeType.cs, 
filesummary is: This file defines a data model class called ServiceCascadeType within the Eroms.Data.Atlantic namespace. It represents a database table "ServiceCascadeType" with key attributes including a code, description, and status. The class could be part of a larger codebase related to managing service types, and it interacts with a database using Entity Framework for data persistence.


file name is ServiceTransactionReasonType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceTransactionReasonType.cs, 
filesummary is: This file defines a class named ServiceTransactionReasonType, which is part of the Eroms.Data.Atlantic namespace. It represents a database table for service transaction reasons, with properties for a code and its description. The class also establishes a relationship with another entity, ServiceTransactionReasonCode, indicating a collection of reason codes associated with each transaction reason type.


file name is InvoiceGroupSpanish.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceGroupSpanish.cs, 
filesummary is: This file defines a data model class named InvoiceGroupSpanish within the Eroms.Data.Atlantic namespace, which is part of the larger codebase dealing with invoice management. It represents an entity in the database with properties for Code and Description, where Code is a primary key and Description is a required field. The class likely interacts with a database table named "InvoiceGroupSpanish," potentially supporting features related to invoicing in Spanish.


file name is ChargePlanEvent.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanEvent.cs, 
filesummary is: The file ChargePlanEvent.cs is a model for the database entity "ChargePlanEvent" within the Eroms.Data.Atlantic namespace. It defines the structure of data associated with charge plans, including properties like Code and Description, and establishes a relationship with a collection of EventCharge objects.

Features include:
- Represents ChargePlanEvent with properties for unique identifier and description.
- Contains a collection for associated EventCharge records.
  
Dependencies: This class likely interacts with a database table named "ChargePlanEvent" and may depend on another model class "EventCharge".


file name is DocumentType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DocumentType.cs, 
filesummary is: This file defines a class named DocumentType within the Eroms.Data.Atlantic namespace, representing a data model associated with a database table called "DocumentType." It includes properties for a unique identifier (Code) and a description, which are fundamental for managing document types in the application. This model likely interacts with a database, requiring a connection to related tables and possibly frameworks like Entity Framework for data access.


file name is AccountTransactionTaxed.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountTransactionTaxed.cs, 
filesummary is: The file AccountTransactionTaxed.cs is part of the Eroms.Data.Atlantic namespace and defines the AccountTransactionTaxed class, which represents a database entity related to account transactions, specifically tracking taxed transactions.

Key Features:
- Represents the "AccountTransactionTaxed" entity with properties for transaction keys and an account key.
- It includes references to related entities, such as Account and AccountTransaction.

Business Context:
This model is likely used in financial applications to manage transactions involving taxes, ensuring accurate reporting and compliance. It depends on the existence of related database tables for "Account" and "AccountTransaction."


file name is LogArchive.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/LogArchive.cs, 
filesummary is: The file defines a data model class named LogArchive, which represents a database table in the Eroms.Data.Atlantic namespace. It contains properties that correspond to fields in the LogArchive table, including keys, messages, timestamps, and user information. This class is integral for logging purposes and may interact with a database to store and retrieve log records.


file name is NotificationMailTemplateChangeHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationMailTemplateChangeHistory.cs, 
filesummary is: The file NotificationMailTemplateChangeHistory.cs defines a data model for tracking changes to notification mail templates in the Eroms Atlantic system. It includes properties for replication keys, template identifiers, old and new template names and statuses, alongside metadata like who created the record and when.

Key features include:
- A representation of changes to mail templates, maintaining a history of modifications.
- Dependencies on related entities and potentially affecting tables, particularly within a database context for tracking email notifications. 

This model is part of a larger codebase focusing on notification systems, ensuring proper versioning and auditing of template changes.


file name is ServiceProviderChargeTemplateDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderChargeTemplateDetail.cs, 
filesummary is: This file is a C# class that defines the data model for the ServiceProviderChargeTemplateDetail entity within the Eroms.Data.Atlantic namespace. It represents a detail record associated with service provider charge templates, including properties such as a unique key and a charge code. The class establishes a relationship with the ServiceProviderChargeTemplate, indicating that it relies on the structure and existence of that related entity for its functionality.


file name is DepositInstallmentHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositInstallmentHistory.cs, 
filesummary is: This file defines a model class named DepositInstallmentHistory within the Eroms.Data.Atlantic namespace, representing the history of deposit installments in a financial application. The class includes properties such as DepositInstallmentHistoryKey, AccountKey, Amount, and DueDate, which are essential for tracking payment histories and their associated accounts. It establishes relationships with other models, namely Account and DepositInstallment, highlighting dependencies on these entities for the complete functionality of deposit management.


file name is CommodityPricingType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CommodityPricingType.cs, 
filesummary is: The file CommodityPricingType.cs defines a class that represents a data model for commodity pricing types in the Eroms.Atlantic namespace. This class includes properties for a unique code and a description, and it also has a collection of usage charge exceptions associated with it, indicating it relates to pricing rules or exceptions in a business context. This model likely interacts with a database table named "CommodityPricingType," affecting how pricing data is stored and utilized within the broader application.


file name is InvoiceType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceType.cs, 
filesummary is: The file InvoiceType.cs defines a data model for an InvoiceType entity in the Eroms.Data.Atlantic namespace. This entity is tied to the underlying database structure, representing a table that contains a code, a description, and several relationships with Account, AccountConversion, ChargePlan, and ServiceChargePlan objects. These relationships suggest that the InvoiceType entity is integral to processing invoices and managing related financial transactions within the broader application framework.


file name is CreditBureauType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CreditBureauType.cs, 
filesummary is: The file CreditBureauType.cs defines a data model for the CreditBureauType entity in the Eroms Atlantic codebase. This model includes properties for a unique code and a description, indicating that it is part of a financial or credit-related feature. It likely interacts with a database table named "CreditBureauType," highlighting its role in managing credit bureau data.


file name is Level.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Level.cs, 
filesummary is: This file defines a data model for a "Level" entity within the Eroms Atlantic system, part of a larger codebase related to data management. The "Level" class includes properties such as LevelKey, CompetitiveResellerKey, Name, and Description, which are vital for representing levels in a competitive reseller context. It may depend on underlying database tables to store these entities and likely collaborates with other components for data manipulation and retrieval.


file name is ChaseTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChaseTransaction.cs, 
filesummary is: The file ChaseTransaction.cs is part of the Eroms.Data.Atlantic namespace and defines a class for handling Chase Transaction data within a financial application. It outlines the attributes of a transaction, such as amount, authorization code, approval status, and reference IDs, and establishes relationships with the Account model. This class leverages Entity Framework for database mapping, resulting in dependencies on the Account class and the ChaseTransaction database table.


file name is ServiceSuspension.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceSuspension.cs, 
filesummary is: The file ServiceSuspension.cs is a data model class representing the 'ServiceSuspension' entity within the Eroms.Data.Atlantic namespace. It captures key details regarding service suspensions, including reasons for suspension, timestamps, and relationships to other entities such as Service and ServiceTransaction. This class is fundamental to the business logic regarding managing and recording service interruptions, with dependencies on the related entities and potentially a database for storage and retrieval of its data.


file name is PeriodicalChargeAmount.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PeriodicalChargeAmount.cs, 
filesummary is: The file defines a data model for handling periodical charge amounts within the Eroms Atlantic project. It outlines the properties of the PeriodicalChargeAmount class, including identifiers for periodical charges, amounts, and their types, positioning it as a part of the data layer in a larger application. This class likely interacts with a database table named "PeriodicalChargeAmount" and has a relationship with the PeriodicalCharge entity, indicating dependencies on both the database and other models in the codebase.


file name is RecurringCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/RecurringCharge.cs, 
filesummary is: The file RecurringCharge.cs is part of the Eroms Data Atlantic codebase and defines the RecurringCharge class, which represents a recurring charge entity in a billing system. This class includes properties related to the charge, such as amounts, taxability, status, and invoice details. Key relationships include associations with ChargePlan, InvoiceGroup, and collections of AMSChargeDetail and ServiceInvoiceRecurringCharge, which indicates that this class is integral to managing billing and invoicing processes in the application.


file name is Quote.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Quote.cs, 
filesummary is: The file defines a class named "Quote" that represents a quote entity in the Eroms application related to Atlantic operations. It contains properties that encapsulate quote details, such as keys for the contact and service provider, as well as various metadata associated with the quote. The class also establishes relationships with other entities like Address and REP, indicating its integration with those components for comprehensive data representation in the system.


file name is AccountSubLedgerSubTransactionType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountSubLedgerSubTransactionType.cs, 
filesummary is: The file contains a class definition for AccountSubLedgerSubTransactionType, which is part of the Eroms.Data.Atlantic namespace. This class is an entity model that represents a table in the database and encapsulates properties related to sub-transaction types, including their code and descriptions.

Key Features:
- The class includes properties for Code and Description, with validation attributes.
- It establishes relationships with other entities, such as AccountSubLedgerTransaction and DepositTransaction, indicating it is a part of the accounting subsystem.

Dependencies:
- The class is dependent on database tables: AccountSubLedgerSubTransactionType, AccountSubLedgerTransactions, and DepositTransactions.


file name is Image.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Image.cs, 
filesummary is: The file Image.cs defines a data model class `Image` within the Eroms.Data.Atlantic namespace, which likely represents the attributes and behaviors associated with images in the context of the Atlantic domain of the codebase. This class includes properties such as Code, CompetitiveResellerKey, Description, Bin, Vector, Type, and FileName, and establishes relationships with other entities like ImageType and a collection of ImageMap objects.

The `Image` class serves as a fundamental part of the application's data structure, potentially tied to features involving image management, storage, or retrieval. It relies on Entity Framework for ORM, with dependencies on related tables and entities like ImageType and ImageMap for establishing connections within the database.


file name is ServiceProviderPassThroughChargeForService.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderPassThroughChargeForService.cs, 
filesummary is: The file defines a data model for the "ServiceProviderPassThroughChargeForService" within the Eroms application, focusing on billing charges passed through service providers. It contains properties such as ServiceKey, ServiceProviderCharge, and PassThrough, representing the charges and their applicability. This model relies on the Entity Framework for database interactions and is likely linked to the "Service" class, indicating dependencies on related database tables for processing service charges.


file name is AuditPostPaymentAccountNumberSearch.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AuditPostPaymentAccountNumberSearch.cs, 
filesummary is: The file defines a data model named AuditPostPaymentAccountNumberSearch within the Eroms.Data.Atlantic namespace. This model represents the structure for logging events related to account number searches after payments, capturing key details such as session ID, user ID, timestamp of the action, account number, and whether the account number was found. It is likely utilized in the context of auditing and tracking user actions in a payment processing application, potentially interfacing with a database table named AuditPostPaymentAccountNumberSearch.


file name is ServiceLocationNoUspsMatch.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceLocationNoUspsMatch.cs, 
filesummary is: The file defines a class named ServiceLocationNoUspsMatch within the Eroms.Data.Atlantic namespace. It represents a database entity that maps to the ServiceLocationNoUspsMatch table, containing properties that include identifiers and descriptions related to service locations without USPS matches. This file is part of the data model in an Entity Framework context, indicating that it might be used for database operations that involve retrieving or storing data related to service locations and competitive resellers.


file name is EdiTransactionMap.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EdiTransactionMap.cs, 
filesummary is: The file EdiTransactionMap.cs defines a data model in the Eroms codebase that represents an EDI (Electronic Data Interchange) transaction mapping entity. It includes properties such as EdiTransactionMapId, CommonTransactionId, and Description, which are essential for identifying and describing transactions. This model is dependent on the EdiSegmentMap collection and the EdiState entity, indicating relationships with segment maps and states necessary for handling EDI transactions.


file name is BlockStrategy.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/BlockStrategy.cs, 
filesummary is: The file BlockStrategy.cs is a model class that defines the structure of the BlockStrategy entity within the Eroms.Data.Atlantic namespace. It represents a database table called "BlockStrategy" with fields for a unique code and a description. This model is part of the Entity Framework setup, likely serving as a foundation for data access and manipulation related to block strategies in the application.


file name is CompetitiveResellerHoliday.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CompetitiveResellerHoliday.cs, 
filesummary is: The file CompetitiveResellerHoliday.cs is a model class within the Eroms.Data.Atlantic namespace, representing the "CompetitiveResellerHoliday" entity in the codebase. It includes properties related to holiday records for competitive resellers, such as dates, reasons for holidays, and created/updated timestamps. This class likely interacts with a database table named "CompetitiveResellerHoliday" and may be used in conjunction with other classes that handle business logic pertaining to competitive resellers.


file name is InvoicePayment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoicePayment.cs, 
filesummary is: The file InvoicePayment.cs is a model definition for handling invoice payment details within the Eroms.Data.Atlantic namespace. It serves as part of the data layer in the application, defining the structure of the InvoicePayment entity, which includes properties like InvoicePaymentId, InvoiceKey, AccountTransactionKey, and various metadata fields.

The key features include tracking payments related to invoices and linking them to account transactions. This file relies on database annotations for Entity Framework, indicating it is part of an ORM (Object-Relational Mapping) setup. Dependencies include the AccountTransaction and Invoice models, which indicate relationships to other database entities.


file name is NotificationAttachmentType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationAttachmentType.cs, 
filesummary is: This file defines the NotificationAttachmentType class within the Eroms.Data.Atlantic namespace, which is part of a larger codebase related to a notification system. It serves as a model for database interactions and contains properties that represent specific attributes of notification attachments, such as a unique code and description. The class also establishes relationships with other entities, specifically NotificationData and NotificationMail collections, indicating dependencies on these related classes for managing notifications effectively.


file name is PreferredContactMethod.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PreferredContactMethod.cs, 
filesummary is: This file defines a model for the PreferredContactMethod entity within the Eroms Atlantic domain. It represents a contact method with properties for a unique code and a description, along with a collection of related Contact entities. As part of the data layer, it likely interacts with a database table named PreferredContactMethod and may serve as a foundation for managing user contact preferences in the application.


file name is ServiceProviderInvoiceCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderInvoiceCharge.cs, 
filesummary is: The file defines a data model class named ServiceProviderInvoiceCharge within the Eroms.Data.Atlantic namespace, representing charges related to service provider invoices. It encapsulates several attributes, such as charge type, service period dates, and related references, and establishes relationships with other classes, indicating dependencies on ServiceProviderInvoice and ServiceProviderInvoiceChargeType. This model is likely part of a larger system for managing financial transactions associated with service providers.


file name is ImportCustomer.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ImportCustomer.cs, 
filesummary is: This file defines a data model for managing customer information within the Eroms Atlantic project. The ImportCustomer class serves as a representation of customers' data, encapsulating personal and account details necessary for customer import operations.

Key features include fields for personal identification, contact details, address information, account identifiers, and preferences regarding billing and communication. It is linked to several other components through foreign key references (e.g., RatePlanKey, AggregatorKey), indicating dependencies on related tables and entities within the database.


file name is ServiceEndDate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceEndDate.cs, 
filesummary is: The file ServiceEndDate.cs is part of the Eroms.Data.Atlantic namespace, which suggests it is a class model related to the Atlantic data structure within the larger Eroms codebase. This file defines the ServiceEndDate entity, representing the end date of a service and includes properties such as ServiceKey, EndDate, CreatedAt, CreatedBy, and ReplicationKey. 

Key Features:
- Represents a service's end date with relevant timestamps and metadata.
- Contains a foreign key relationship with the Service entity.

Dependencies:
- Relies on the Service class for establishing a relationship, which links this model to another part of the data structure.


file name is RecurringDailyUsageCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/RecurringDailyUsageCharge.cs, 
filesummary is: The file RecurringDailyUsageCharge.cs defines a model class for handling recurring daily usage charges in a billing system, likely part of an invoicing application within the Eroms Data Atlantic namespace. It includes properties such as charge plan, invoice representation, amount, tax information, and status, and establishes relationships with other entities like ChargePlan, InvoiceGroup, and AMSChargeDetail. This file plays a crucial role in the business logic by managing billing practices, and may depend on a database for storing this charge data and its associations.


file name is TexasElectricCostCalculationType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TexasElectricCostCalculationType.cs, 
filesummary is: The file TexasElectricCostCalculationType.cs is part of the Eroms Data Atlantic model, defining a data entity for calculating electric costs in Texas. It includes a key property "Code" representing the unique identifier and a "Description" property that stores the details of the calculation type. This model likely interacts with a database table named "TexasElectricCostCalculationType" and could be used in business logic involving electric cost calculations.


file name is ServiceChargePlanIntervalBasedRateAdder.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceChargePlanIntervalBasedRateAdder.cs, 
filesummary is: This file defines a class, ServiceChargePlanIntervalBasedRateAdder, which is part of the Eroms.Data.Atlantic namespace. It represents a data model used to manage service charge plans with an interval-based rate system. The class includes properties to store various attributes related to service charge intervals, such as keys, interval ranges, and metadata about creation, along with relationships to other models like IntervalBasedAdderType and IntervalType.


file name is TexpoContractSummary.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TexpoContractSummary.cs, 
filesummary is: The file TexpoContractSummary.cs is part of the Eroms.Data.Atlantic namespace and defines the structure of a database entity called TexpoContractSummary. This entity represents a contract summary with various properties such as product name, plan details, pricing structure, effective dates, and conditions related to contracts in the system.

The class is mapped to a database table, which implies dependencies on a relational database for storing contract summaries. It includes fields that may be used for querying and managing contracts, indicating its role in the core business logic related to contract management and pricing in the Atlantic region context.


file name is ServiceUsageByTimeOfUse.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceUsageByTimeOfUse.cs, 
filesummary is: The file defines a data model for tracking service usage based on varying times of use within the Eroms Atlantic application. It contains the properties and structure for a database table named ServiceUsageByTimeOfUse, with a composite key consisting of ServiceUsageKey and TimeOfUse. This model is likely used to facilitate analytics and reporting on service consumption over different time periods, and it has a relationship with the TimeOfUse entity.


file name is CsaServiceAction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CsaServiceAction.cs, 
filesummary is: This file is a C# class definition for the entity `CsaServiceAction` within the `Eroms.Data.Atlantic` namespace. It represents a core entity in a database model, specifically related to service actions within a system, and manages a collection of `CsaServiceChronology` objects. It includes properties such as `Code`, which is a unique identifier, and `Description`, defining the nature of the service action, indicating potential dependencies on other parts of the application, particularly related to database operations and entity relationships.


file name is ThirdPartyDataProvider.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ThirdPartyDataProvider.cs, 
filesummary is: The file ThirdPartyDataProvider.cs defines a class representing a third-party data provider within the Eroms.Data.Atlantic namespace. This class includes properties for managing key attributes such as provider details, status, and metadata, along with collections that indicate relationships with other entities like credit check bureaux and data files.

Key features include:
- Represents a data provider with attributes like ProviderName, Type, and Status.
- Establishes relationships with related classes such as CreditCheckBureau, ThirdPartyDataFile, and ThirdPartyDataTransfer.
- Relies on other models for associations, including FTPSite and ThirdPartyDataProviderType, which are essential for the overall functionality of third-party data management in the system.


file name is LockBoxFile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/LockBoxFile.cs, 
filesummary is: The file LockBoxFile.cs defines a model class for a LockBoxFile in the data layer of the Eroms system. It captures various properties related to lockbox transactions, including file identifiers, transaction counts, amounts, and associations to check and coupon details. This class interfaces with the database, suggesting dependencies on tables for LockBoxCheckDetail and LockBoxCouponDetail, along with the ThirdPartyPaymentProvider entity.


file name is RequestType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/RequestType.cs, 
filesummary is: The file RequestType.cs defines the RequestType class, which is part of the Atlantic model in the Eroms data namespace. It represents a database entity with properties for a request type's code and description, where the code is a primary key. This class is linked to the "RequestType" table in the database, indicating it is crucial for managing request types within the application.


file name is AccountSubLedgerTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountSubLedgerTransaction.cs, 
filesummary is: The file defines a class named AccountSubLedgerTransaction, representing a model for transactions within a sub-ledger accounting system in the Eroms application. It includes properties such as transaction key, amount, transaction type, timestamps for creation and updates, and references to related entities like AccountCharge and Payment, indicating its role in managing financial records. This class depends on several other models/entities, hinting at a well-structured financial tracking feature within the broader codebase.


file name is InvoiceSiteCodeTax.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceSiteCodeTax.cs, 
filesummary is: The file contains a class definition for InvoiceSiteCodeTax within the Eroms.Data.Atlantic namespace. This class represents a database table with properties pertinent to invoice tax details such as tax rates, descriptions, and related entities. It connects to various other components including an Invoice and Service, indicating its role in managing financial transactions and tax calculations within the broader application.


file name is PrepaidInitialInvoice.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PrepaidInitialInvoice.cs, 
filesummary is: The file PrepaidInitialInvoice.cs is part of the Eroms.Data.Atlantic namespace and defines the PrepaidInitialInvoice class, which represents a data model for handling prepaid invoices in the application. This class includes essential properties such as invoice keys, quantity, rate, amount, and metadata related to its creation.

Key features include the tracking of invoice details linked to an account alongside timestamps for record-keeping. It appears to be part of a larger system that manages invoicing and accounts, indicating dependencies on other components like the Account class and a database table named PrepaidInitialInvoice.


file name is ServiceTransactionReasonCode.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceTransactionReasonCode.cs, 
filesummary is: The file is a data model class for a database entity in the Eroms application's Atlantic module. It defines the ServiceTransactionReasonCode entity with properties that correspond to a database table, including keys and relationships to other entities. This file interacts with the database to manage service transaction reasons, relying on related entities such as ServiceTransactionReasonType and potentially includes validation attributes for data integrity.


file name is ServiceProviderChargeCode.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderChargeCode.cs, 
filesummary is: This file is part of the data model for the Eroms Atlantic codebase and defines the `ServiceProviderChargeCode` class. This class represents a database entity that includes properties such as a unique code, a description, a general ledger account key, taxation status, and charge type. It is linked to a collection of `ServiceProviderCharge` objects, indicating a relationship with other parts of the system, potentially involving financial transactions or service billing.


file name is AccountEnrollment_old.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountEnrollment_old.cs, 
filesummary is: The file `AccountEnrollment_old.cs` contains a partial class definition for managing account enrollments within the Atlantic model of the Eroms codebase. This class defines various properties related to account enrollment information including dates, statuses, and customer details, indicating it plays a crucial role in handling enrollment data for services and utilities.

Key features include:
- Properties for managing enrollment dates and statuses, along with utility account details.
- Tracking of customer information like names, contact information, and billing addresses.
- Associations to other entities such as service providers and competitive resellers through various keys.

This class likely interacts with an underlying database for storing enrollment data, and dependencies may include access to related tables or entities handling utility accounts or enrollment transactions.


file name is User.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/User.cs, 
filesummary is: The file User.cs defines a User class within the Eroms.Data.Atlantic namespace, representing a user in the system. It includes properties for user information, authentication, and various permissions/settings that control access to features. The User class is linked to ChargePlanOfferedBy and SettingAuthorization collections, reflecting relationships with those entities, and may depend on a Status class for user state handling.


file name is BillReadyType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/BillReadyType.cs, 
filesummary is: The file defines the BillReadyType class, which is part of the Eroms.Data.Atlantic namespace. This class represents a database table with fields for a code and description, and it manages a collection of related BillReadyInvoice records. It is essential for the core functionality of billing processes in the larger codebase, potentially interfacing with databases to manage invoice states and types.


file name is BillTypeStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/BillTypeStatu.cs, 
filesummary is: The file BillTypeStatu.cs is a C# class that defines the BillTypeStatu entity within the Eroms.Data.Atlantic namespace. It primarily serves to represent the status of bill types associated with accounts, including properties like AccountKey, OldBillType, CreatedAt, and CreatedBy, which track when the status was created and by whom. This class relies on relationships with other entities, namely Account and BillType, indicating its integration with a broader data model within the codebase.


file name is NoteStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NoteStatu.cs, 
filesummary is: The file NoteStatu.cs defines a data model for handling the statuses of notes within the Atlantic system of the Eroms application. It includes properties such as CompetitiveResellerKey, Code, Description, IsDefault, and Status, which represent the state and characteristics of a note. The model also has a relationship with a collection of Note entities, indicating that each status can be associated with multiple notes, thus facilitating efficient management of note statuses in conjunction with databases that track note entries.


file name is ApplicableOn.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ApplicableOn.cs, 
filesummary is: The file ApplicableOn.cs defines a data model class named ApplicableOn within the Eroms.Data.Atlantic namespace. This class represents an entity with properties for an identifier, a name, and an optional description, suggesting its role in capturing specific attributes related to business logic. It uses attributes for defining primary keys and database generation, indicating integration with an Entity Framework database setup, which may depend on corresponding database tables for persistence.


file name is NoteCategoryDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NoteCategoryDetail.cs, 
filesummary is: The file NoteCategoryDetail.cs is part of the data model for the Eroms Atlantic project. It defines the NoteCategoryDetail entity, which includes properties like CompetitiveResellerKey, NoteCategory, Code, Description, and Status, serving as a representation of records in the NoteCategoryDetail database table. This entity relates to the NoteCategory and likely interacts with other parts of the application that manage note categories and their attributes.


file name is ServiceProviderPassThroughChargeForAccount.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderPassThroughChargeForAccount.cs, 
filesummary is: The file ServiceProviderPassThroughChargeForAccount.cs defines a data model for managing service provider pass-through charges associated with accounts. It contains properties for AccountKey and ServiceProviderCharge, which are marked as keys, along with a boolean to indicate pass-through status. This file relates to the larger codebase by representing a specific database table and interacts with the Account model for deeper business functionality, likely serving as part of a billing or account management system.


file name is EmpowerMessageType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerMessageType.cs, 
filesummary is: This file defines a data model for the "EmpowerMessageType" entity in the Eroms application, which is likely part of a larger context involving data handling in the Atlantic module. The model includes properties that correspond to various attributes of an Empower message, including its code, description, and associated stored procedure.

Key features of this code include defining the data structure for messages used within the application, along with constraints for each property to ensure data integrity. It relies on Entity Framework for ORM capabilities, implying dependencies on a database where the "EmpowerMessageType" table is defined, reflecting core business logic related to message processing and management within the Eroms system.


file name is NotePriority.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotePriority.cs, 
filesummary is: The file NotePriority.cs is part of the Eroms Data Atlantic code section and serves as a model class representing the NotePriority entity in the application's data structure. This class defines the properties for prioritizing notes associated with a competitive reseller, including a unique key, description, default status, and status code. It also includes a relationship with the CompetitiveReseller entity and a collection of related Note objects, indicating that it plays a crucial role in managing note priorities within the application.


file name is DepositRequirement_BackUp.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositRequirement_BackUp.cs, 
filesummary is: The file DepositRequirement_BackUp.cs defines a data model for deposit requirements within the Eroms Data Atlantic namespace. It outlines various attributes related to deposit requirements, such as deposit id, customer type, and fraud amount, among others. This model may interact with the database to manage deposit requirements and their respective user data, playing a crucial role in business processes related to financial transactions or requirements.


file name is ChargePlanServiceProviderAveragePriceAudit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanServiceProviderAveragePriceAudit.cs, 
filesummary is: This file defines a data model for auditing average prices of charge plans associated with service providers in the Atlantic region. It contains properties to track key identifiers, pricing details, and audit metadata such as creation and update timestamps, along with the user who made the changes. This class likely interacts with a database table named "ChargePlanServiceProviderAveragePriceAudit" and could be used in services related to pricing audits and validations in the overall application.


file name is AccountSubLedgerTransactionType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountSubLedgerTransactionType.cs, 
filesummary is: The file AccountSubLedgerTransactionType.cs defines a data model within the Eroms.Data.Atlantic namespace, representing the AccountSubLedgerTransactionType entity in the system. It includes properties such as Code and Description, with a relationship to a collection of AccountSubLedgerTransactions. This model likely interacts with a database table named AccountSubLedgerTransactionType and is part of implementing core business logic for managing financial transactions.


file name is Payment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Payment.cs, 
filesummary is: The Payment.cs file defines a Payment class that represents a payment entity within the Eroms Data Atlantic namespace. It contains properties related to a payment, such as amount, method, and status, and establishes connections to other entities like Account, Invoice, and various collections for sub-ledgers and transactions. This model interacts with a database table named "Payment" and is crucial for handling payment-related operations within the application. Dependencies include various payment-related entities and collections that ensure comprehensive management of financial transactions.


file name is Aggregator.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Aggregator.cs, 
filesummary is: The file Aggregator.cs defines the Aggregator class within the Eroms.Data.Atlantic namespace, representing a key entity in the application related to account management. It includes properties for attributes such as Name, Address, and Status, and establishes relationships with multiple collections like AccountAggregators and AggregatorContacts, enabling data organization for various account-related operations. This class is likely connected to a database table named "Aggregator" and may depend on other classes like Address and Position for its functionalities.


file name is ContractStartsOn.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ContractStartsOn.cs, 
filesummary is: This file defines a class `ContractStartsOn`, which is part of a larger ASP.NET Entity Framework application dealing with contract management in the Eroms Data Atlantic namespace. It represents a database table structure with properties to define contract start codes and their descriptions. Furthermore, it establishes a relationship with `ChargePlans`, indicating that each `ContractStartsOn` entry can be associated with multiple charge plans, showcasing a dependency on the ChargePlan class to utilize its properties.


file name is AccountContactUpdate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountContactUpdate.cs, 
filesummary is: The file AccountContactUpdate.cs defines a partial class for managing account contact updates within the Eroms Data Atlantic namespace. It represents a database entity mapped to the "AccountContactUpdate" table, which includes properties for tracking account contact changes, such as keys for account and contact details, the type of contact, and metadata like creation date and user. This class likely interacts with a database and may have dependencies on other entities or database tables for complete functionality, such as Account and ServiceLocation tables.


file name is ServiceProviderAdjustmentBreakdown.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderAdjustmentBreakdown.cs, 
filesummary is: The file defines a model class for the "ServiceProviderAdjustmentBreakdown" entity within the Eroms.Data.Atlantic namespace. This model includes properties representing the key identifiers and attributes related to service provider adjustments, such as an adjustment type and monetary amount. It is part of the larger data access layer and is likely used to interact with a database table named "ServiceProviderAdjustmentBreakdown," with dependencies on other related entities specified by the Guid keys.


file name is NotificationEmailFormat.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationEmailFormat.cs, 
filesummary is: This file defines the `NotificationEmailFormat` class within the `Eroms.Data.Atlantic` namespace, representing a database table for managing email notification formats. It includes properties such as `Code`, which acts as a unique identifier, and `Description`, detailing the notification format. The class also establishes a relationship with `NotificationTemplate`, indicating that multiple templates can be associated with a single email format, suggesting dependencies on related data structures.


file name is aspnet_Applications.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aspnet_Applications.cs, 
filesummary is: The file aspnet_Applications.cs is part of the Eroms.Data.Atlantic namespace and defines a class that represents an application entity within the system. This class manages the application's properties such as ApplicationName and ApplicationId and establishes relationships with other entities like Membership, Roles, Users, and Paths, which are likely core components of an authentication and authorization system. It plays a crucial role in managing application data and ensuring proper access control through its relationships in the codebase.


file name is Dispute.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Dispute.cs, 
filesummary is: The file Dispute.cs contains a class definition for managing dispute-related data in the Eroms application, specifically within the Atlantic module. The Dispute class includes properties for an identifier (Code), a textual description, and a collection of related InvoiceDispute entities that highlight the relationship between disputes and invoices. This file is integral to the core business logic as it outlines how disputes are structured and interconnected, likely supporting features related to invoice management or resolution processes.


file name is QueueStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/QueueStatu.cs, 
filesummary is: The file QueueStatu.cs appears to be part of a data model for an application within the Eroms.Data.Atlantic namespace. It defines the QueueStatu class, which represents a status entry in a queue system, including properties for code and description while establishing relationships to other entities.

Key features of the QueueStatu class include:
- It maintains a unique code and a descriptive string.
- It has collections that link to AmsUsageAnomalyQueue and AMSUsageImporterQueue, indicating it may interact with other data or processes related to usage anomalies and import functions.

This model likely interacts with a database to track various statuses related to queues, supporting business processes around data usage and importation.


file name is EdiEmpowerChannel.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EdiEmpowerChannel.cs, 
filesummary is: The file EdiEmpowerChannel.cs defines an Entity Framework model for the EdiEmpowerChannel, which is part of the Atlantic data namespace. This model describes the structure of data related to energy utility transactions, capturing various attributes such as transaction details, utility provider information, and customer account specifics. It likely interacts with a database table named "EdiEmpowerChannel," facilitating operations on energy distribution channels and supporting business processes in a utility management context.


file name is ServiceProviderInvoiceChargeDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderInvoiceChargeDetail.cs, 
filesummary is: The file defines a class named ServiceProviderInvoiceChargeDetail, which represents the details of charges associated with service provider invoices in the Eroms system. This class outlines various properties related to invoice charge details such as amounts, rates, charge codes, and relationships with other entities like invoices and general ledger transactions. It is part of a data model likely used in an Entity Framework context, indicating a structure that may be interconnected with various charges and invoice management features across the codebase.


file name is ACHProvider.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ACHProvider.cs, 
filesummary is: The file ACHProvider.cs defines a model class representing an ACH (Automated Clearing House) provider within the Eroms.Data.Atlantic namespace. This class serves as part of the data layer for handling ACH-related entities, including configurations, profile information, and transactions. It contains properties that define the ACH provider's code and description, along with collections for associated configurations, profile information, and transactions, indicating dependencies on related classes ACHConfiguration, ACHProfileInformation, and ACHTransaction.


file name is TaxAuthority.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaxAuthority.cs, 
filesummary is: The file TaxAuthority.cs is part of the Eroms.Data.Atlantic namespace and defines the TaxAuthority class, which represents a tax authority entity in the codebase. This class includes properties for the tax authority's identifier and description, as well as a collection of associated tax charge entries. It is likely part of a larger model interacting with a database, potentially linked to tax calculations and compliance functionalities. Dependencies may include the TaxChargeEntry class and a database table named TaxAuthority.


file name is Address.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Address.cs, 
filesummary is: The file defines an Address class as part of the Eroms.Data.Atlantic namespace, representing an address entity within the application. It includes properties such as AddressLineOne, City, State, and Zip, as well as relationships to other entities like Account, Aggregator, and Invoice, which are essentials for managing address information in a broader data context. The Address class plays a crucial role in the data model, likely interacting with a database to store and retrieve address-related information for various business processes.


file name is AggregatorContact_Old.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AggregatorContact_Old.cs, 
filesummary is: The file is a data model representing an entity called AggregatorContact_Old, which is likely part of a larger codebase focused on managing relationships between aggregators and their contacts. 

This file defines the properties of the AggregatorContact_Old class, including unique identifiers such as AggregatorKey and ContactKey, as well as fields for Username, CreatedAt, and CreatedBy. It appears to be part of an Entity Framework data model, suggesting that it may interact with a database containing records of aggregator contacts, facilitating data retrieval and manipulation.


file name is MailSetting.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MailSetting.cs, 
filesummary is: This file defines the MailSetting class within the Eroms.Data.Atlantic namespace, representing email configuration data. It contains properties for managing email settings including server details, authentication credentials, and status flags. The class also includes a relationship with NotificationMail, indicating it manages multiple notification email entries.


file name is AccountAgingWorkTable.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountAgingWorkTable.cs, 
filesummary is: The file defines a data model class named AccountAgingWorkTable, which is part of the Eroms.Data.Atlantic namespace. This class represents a database table used to manage account aging information, featuring properties that capture various aging metrics alongside a foreign key relationship to an Account entity. It is structured for use with Entity Framework, indicating dependencies on a relational database schema for storing account aging data.


file name is UnitOfMeasure.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UnitOfMeasure.cs, 
filesummary is: The file defines the UnitOfMeasure class within the Eroms.Data.Atlantic namespace, which is part of a larger codebase for managing units of measure in a data context. This class includes properties such as Code, Description, and IsActive, as well as collections of related entities like MeteredMeters and ServiceUsages.

Key features include the ability to represent different units of measurement with attributes for identification and relationships to various usage and billing-related collections. This file interacts with a database table named "UnitOfMeasure" and may depend on related tables such as MeteredMeter, ServiceProviderInvoiceChargeDetail, and UsageCharge for its functionality.


file name is FtpFileDirection.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/FtpFileDirection.cs, 
filesummary is: The file FtpFileDirection.cs defines a class representing the "FtpFileDirection" entity within the Eroms Data Atlantic namespace. This class is part of a larger data model that manages FTP file directions, including properties for a unique code, a description, and a collection of related FTP files. The class relies on Entity Framework for data management, and it likely corresponds to a database table, establishing relationships with the FtpFile entity.


file name is ThirdPartyDataTransfer.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ThirdPartyDataTransfer.cs, 
filesummary is: The file defines a class that represents the data structure for transferring data between third-party systems within the Eroms Atlantic application. It models various attributes such as the identifier, direction of transfer, timestamps, and XML metadata, ensuring synchronization and tracking of data transfers. The class also connects to a related entity, ThirdPartyDataProvider, indicating dependencies on external data sources or providers for successful operations, which may involve external databases or services.


file name is FoundAboutTheCompanyBy.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/FoundAboutTheCompanyBy.cs, 
filesummary is: The file FoundAboutTheCompanyBy.cs defines a data model class within the Eroms.Data.Atlantic namespace. It represents an entity named "FoundAboutTheCompanyBy" with properties such as Code, Description, Status, and DisplayOrderId. This entity has a relationship with a collection of related Service entities, indicating that it likely participates in core business logic related to company information management and services offered.


file name is ClearingHouseInformation.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ClearingHouseInformation.cs, 
filesummary is: This file defines the ClearingHouseInformation class, which is a part of the data model in the Eroms.Atlantic namespace. It represents the structure and relationships of clearing house data within the application, incorporating attributes for entity properties and defining key relationships with ClearingHouses, ServiceProviderInformations, and States. The class relies on Entity Framework for database interactions, necessitating a connection to a relevant database to function effectively.


file name is aspnet_WebEvent_Events.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aspnet_WebEvent_Events.cs, 
filesummary is: The file defines a data model class `aspnet_WebEvent_Events` within the `Eroms.Data.Atlantic` namespace, related to handling web event logs in an application. This class includes properties for storing event details such as event IDs, timestamps, event types, and messages, which are essential for tracking application behavior and errors. It serves as an entity framework model and may depend on a database table for web event records, aiding in the logging and monitoring of application events.


file name is PeriodType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PeriodType.cs, 
filesummary is: The file PeriodType.cs is part of the Eroms.Data.Atlantic namespace and defines a model class related to a database entity. This class represents a "PeriodType," which is likely used to categorize various types of periods in a business context, such as billing cycles or subscription periods. 

Key features include:
- It contains properties for a unique code and a description, essential for identifying the type of period.
- It establishes a one-to-many relationship with PeriodicalCharge, indicating that one PeriodType can be associated with multiple charges.
- The class utilizes Entity Framework annotations for database mapping, which suggests dependencies on a database table named "PeriodType".

Overall, this file contributes to the core data representation within the codebase, linking the period types to periodical charges within a larger financial or subscription management system.


file name is FtpFileSource.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/FtpFileSource.cs, 
filesummary is: The file FtpFileSource.cs defines a class that represents the data model for the "FtpFileSource" entity in the Eroms Atlantic system. This class includes properties that correspond to an FTP file ID and various GUID keys for associated files and notifications, establishing relationships with other entities like FtpFile and Notification. It serves as a foundational component for handling file sources, linking to related data, and managing interactions with a database.


file name is DepositInstallment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositInstallment.cs, 
filesummary is: The file DepositInstallment.cs defines a class representing a deposit installment within the Eroms Data Atlantic namespace. This class encapsulates the properties associated with a deposit installment, including its amount, due date, and notifications regarding missed installments or disconnections. 

Key features include relationships with other classes such as Account, DepositInstallmentHistory, DepositPayment, and DepositTransaction. The structure also suggests dependencies on certain configurations such as the service key and security deposit ID, indicating integration with broader financial or account management systems.


file name is NotificationDeliveryMethod.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationDeliveryMethod.cs, 
filesummary is: The file NotificationDeliveryMethod.cs is a model class that defines the NotificationDeliveryMethod entity within the Eroms.Data.Atlantic namespace. It represents a table in a database, capturing properties such as Code and Description, along with collections of related entities for managing notification delivery methods. This file likely interacts with the database and is part of a larger system focusing on notifications, involving components like profiles, details, and templates.


file name is CompetitiveResellerBusinessHour.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CompetitiveResellerBusinessHour.cs, 
filesummary is: This file defines the CompetitiveResellerBusinessHour class within the Eroms.Data.Atlantic namespace, which models the business hours of competitive resellers. It includes properties such as key identifiers, operational times, and status indicators for each day of the week, as well as tracking for created and updated records. This file is likely part of a broader system managing reseller operations, potentially interfacing with other components such as reseller information, time zone data, and user tracking.


file name is InvoiceDeliveryMethod.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceDeliveryMethod.cs, 
filesummary is: The file InvoiceDeliveryMethod.cs defines a data model for the InvoiceDeliveryMethod entity within the Eroms.Data.Atlantic namespace. It outlines the structure of this entity, which has properties for a unique Code and a Description, and maintains a collection of related Account entities. This model likely interacts with a database table named "InvoiceDeliveryMethod," indicating its role in handling invoice delivery methods within the broader codebase, which may include features related to account management and invoicing processes.


file name is DirectDebitPayment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DirectDebitPayment.cs, 
filesummary is: The file defines a data model class for managing direct debit payments within a payment processing application. It includes properties representing various attributes of a payment, such as account details, payment identifiers, amounts, status, and timestamps. The class and its properties are tied to a database table called "DirectDebitPayment," indicating its role in database interactions and data persistence for the overall application features related to payment processing.


file name is AccountSubLedgerStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountSubLedgerStatu.cs, 
filesummary is: This file defines a data model class called AccountSubLedgerStatu within the Eroms.Data.Atlantic namespace. It is part of a larger codebase that likely involves financial or accounting systems, as it appears to deal with sub-ledger account statuses. The class includes properties for a unique code and a description, indicating that instances of this class would be used to represent specific statuses in a database, relying on Entity Framework for database interactions.


file name is BillReadyInvoice.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/BillReadyInvoice.cs, 
filesummary is: This file defines the BillReadyInvoice class within the Eroms.Data.Atlantic namespace, representing a model used in the application. It serves as a data structure to manage invoices that are ready for billing, detailing various properties such as keys and timestamps.

Key features include relationships with the Account, Invoice, Service, and ServiceTransaction entities, showcasing how invoices are linked to different accounts and services. The class depends on the relevant database tables: BillReadyInvoice, Account, Invoice, Service, and ServiceTransaction to function effectively.


file name is IntervalMeterDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/IntervalMeterDetail.cs, 
filesummary is: The file IntervalMeterDetail.cs defines a data model for the IntervalMeterDetail table in a database, capturing key metrics for interval meters used in service locations. It outlines properties for the service location's key, meter number, unit of measure, time intervals, and various integer values that likely represent meter readings. This model is essential for the application's data interactions and is associated with related entities such as IntervalMeterDetailType, MeteredMeter, and Service, indicating its role in a larger energy or utility management system.


file name is ThirdPartyPaymentFileError.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ThirdPartyPaymentFileError.cs, 
filesummary is: The file defines a data model class `ThirdPartyPaymentFileError` within the Eroms.Data.Atlantic namespace, which likely represents a table in a database related to third-party payment errors. This model includes properties such as error description, resolution status, and keys related to payment files. It is essential for managing payment-related error records, indicating dependencies on database tables and existing payment file processes.


file name is NoteCategory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NoteCategory.cs, 
filesummary is: The file NoteCategory.cs is part of the Eroms Data Atlantic module and defines the NoteCategory entity. It outlines the structure of the NoteCategory table, including properties like CompetitiveResellerKey, Code, Description, and two collections for related Note and NoteCategoryDetail entities.

This file is essential for managing note categories within the application, enabling the storage and retrieval of related notes and details. It relies on Entity Framework for data operations and has dependencies on the Note and NoteCategoryDetail classes for managing relationships.


file name is UnmeteredServiceType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UnmeteredServiceType.cs, 
filesummary is: The file defines the "UnmeteredServiceType" class within the Eroms.Data.Atlantic namespace, which is part of a larger codebase likely focused on managing data related to unmetered utilities. This class is designed to represent service types for unmetered services, detailing both attributes and relationships to other entities.

Key Features include:
- Attributes such as "Code" and "Description" for identifying and describing different service types.
- Relationships to collections of "UnmeteredMeter" and "UnmeteredMeterMonthly", indicating that each service type can be associated with multiple meters and monthly records.

Dependencies include the use of Entity Framework for data management and references to related entities that likely reside within the same or interconnected modules of the codebase.


file name is ChargePlanPaymentMethodOffered.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanPaymentMethodOffered.cs, 
filesummary is: This file defines the ChargePlanPaymentMethodOffered entity within the Eroms.Data.Atlantic namespace, representing a relationship between charge plans and payment methods in the application. It contains properties such as ChargePlanKey and PaymentMethodOffered, which serve as keys for database identification, along with a Status field. The file establishes dependencies on the ChargePlan and PaymentMethod entities, indicating it is part of a broader system for managing payment options within charge plans.


file name is Customer.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Customer.cs, 
filesummary is: The file Customer.cs defines the Customer entity for the Eroms Data Atlantic application, representing customer-related data and relationships. It plays a critical role in the codebase by encapsulating essential information like customer identifiers, status, and various related collections like Accounts and Services. It also indicates dependencies on other entities such as Account, CsaService, Notification, and Service, reflecting its integral role in managing customer interactions within the system.


file name is NotificationTemplate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationTemplate.cs, 
filesummary is: The file NotificationTemplate.cs defines a class representing a notification template within the Eroms.Data.Atlantic namespace. This class contains properties to manage notification characteristics, such as type, delivery method, and template content. It establishes relationships with various data entities like Language and NotificationType, indicating its role in a larger system that likely involves communication management for competitive resellers.


file name is InvoicePNFIncorrect_SCOTT2.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoicePNFIncorrect_SCOTT2.cs, 
filesummary is: The file is a data model class representing an invoice record in the Eroms.Atlantic namespace of the Eroms codebase. It defines the structure for invoices, including critical attributes such as account numbers, invoice details, and payment status. This model likely interacts with the database through Entity Framework, suggesting dependencies on database tables related to invoice management.


file name is Referral.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Referral.cs, 
filesummary is: The file Referral.cs defines a class representing a referral entry within the Eroms.Data.Atlantic namespace. It outlines key attributes related to referrals, including identifiers for the referred and referrer accounts, a referral code, processing status, and timestamps for creation and updates. The class establishes a relationship with the Account entity, indicating dependencies on the Account structure and its data.


file name is aspnet_PersonalizationPerUser.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aspnet_PersonalizationPerUser.cs, 
filesummary is: The file defines a data model class named aspnet_PersonalizationPerUser, which is part of the Eroms.Data.Atlantic namespace. This class represents user-specific personalization settings in a web application, including properties for ID, user, path, and page settings, effectively linking users to their customization settings.

Key features include:
- It stores a unique identifier for each personalization entry.
- It maintains references to related entities: aspnet_Paths (suggesting a structure for managing paths) and aspnet_Users (managing user data).
- It includes support for binary data (PageSettings) to store custom settings and a timestamp for tracking updates. 

This model likely interacts with database tables corresponding to these entities within the application’s context, emphasizing user personalization.


file name is PowerGenerationSource.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PowerGenerationSource.cs, 
filesummary is: The file is a C# model class representing a table in a database called "PowerGenerationSource." This file defines the structure for storing information about power generation sources, including properties such as source name, product percentage, state, country, and state average. It is part of a larger codebase likely related to energy management or analytics, with dependencies on a database as well as a related "State" model for further contextual information.


file name is MeteredMeterHistorical.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MeteredMeterHistorical.cs, 
filesummary is: The file MeteredMeterHistorical.cs is a model class that represents the data structure for historical metering information in the Eroms Atlantic application. It defines various properties related to meter readings, including identifiers, measurement details, and consumption data, which are essential for tracking service usage over time. This class is tied to a database table named MeteredMeterHistorical and has a dependency on the Service model, indicating interconnected data relationships in the codebase.


file name is ResolvedAlert.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ResolvedAlert.cs, 
filesummary is: The file ResolvedAlert.cs is part of the Eroms.Data.Atlantic namespace and defines the ResolvedAlert class, which represents a model for resolved alerts in the application. This model includes various properties such as ResolvedAlertId, AlertId, timestamps, user information, and foreign keys that link to other entities like Account and Service.

The ResolvedAlert class serves as a critical part of the application's alert management system, likely interacting with a database table named "ResolvedAlert". It may depend on other models like Account, EmpowerAlertStatus, and Service, and is used for tracking the status and details of alerts that have been resolved.


file name is DisconnectSetup.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DisconnectSetup.cs, 
filesummary is: The file defines a data model class for managing disconnect setup parameters related to competitive resellers in the Atlantic region. It includes properties that specify various intervals and amounts associated with late fees and disconnection processes. This class is linked to a database table named "DisconnectSetup" and relies on the AgingGroup class for additional context.


file name is MeterHistoricalAverage.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MeterHistoricalAverage.cs, 
filesummary is: The file MeterHistoricalAverage.cs is part of the Eroms.Data.Atlantic namespace and defines a data model representing the historical average readings from utility meters. It includes properties for meter data by month, creation, and update timestamps. This model likely interacts with a database table "MeterHistoricalAverage" to store and retrieve meter average data, emphasizing the importance of data integrity by using keys and validation attributes.


file name is NotificationType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationType.cs, 
filesummary is: The file NotificationType.cs is part of the Eroms Data Atlantic namespace and defines the NotificationType class which likely represents a data model in the application's database. This class is critical for managing notification types, including attributes like code, description, and a flag for customizability.

Key features include various related collections for account notifications, notifications themselves, notification templates, and mappings to delivery profiles. The class relies on the database table "NotificationType" and may interact with several other classes and collections, indicating a well-structured relationship in handling notifications within the overall application.


file name is ServiceProviderDropReason.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderDropReason.cs, 
filesummary is: This file defines the `ServiceProviderDropReason` class within the Eroms.Data.Atlantic namespace, which is part of the data model for the Atlantic region of the application. It represents a database table for storing reasons why a service provider might be dropped, including relevant fields like ReasonCode and Description. The class has a relationship with the `ServiceProviderCommodity` class, indicating dependencies on this related entity for data operations.


file name is ServiceProviderInvoiceTaxType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderInvoiceTaxType.cs, 
filesummary is: This file defines the `ServiceProviderInvoiceTaxType` class within the `Eroms.Data.Atlantic` namespace, which is part of a larger codebase focused on handling service provider invoice details. 

Key Features:
- Represents a data model for invoice tax types with properties for identifying tax codes and descriptive titles.
- Contains a collection of related `ServiceProviderInvoiceChargeTax` entities, indicating a relationship between tax types and invoice charges.

Business Context:
- This class is central to managing and categorizing tax types applicable to service provider invoices, facilitating accurate tax calculations.
  
Dependencies:
- This model works in conjunction with `ServiceProviderInvoiceChargeTax`, potentially linking to a database table named `ServiceProviderInvoiceChargeTax`.


file name is StoredProceduresToRun.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/StoredProceduresToRun.cs, 
filesummary is: This file defines a data model class called StoredProceduresToRun within the Eroms.Data.Atlantic namespace, which is part of a larger codebase focusing on data handling and operations related to the Atlantic business logic. The class is marked for use with Entity Framework, representing a database table that stores metadata for stored procedures to be executed, identified by a unique competitive reseller key and a stored procedure name. Dependencies may include database connections and further integration with the Entity Framework for executing the stored procedures defined in this class.


file name is AccountCustomNotification.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountCustomNotification.cs, 
filesummary is: The file defines a data model class for the "AccountCustomNotification" entity in the Eroms application, specifically under the Atlantic namespace. It represents custom notifications associated with user accounts, containing properties such as custom notification ID, account key, notification type, metadata, creation, and update timestamps, along with references to related Account and NotificationType entities.

This class is integral to the application's notification system, enabling the storage and management of notifications in a structured format. It directly interacts with the database to persist notification details and is likely dependent on other models or tables representing accounts and notification types.


file name is Aggregator_Old.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Aggregator_Old.cs, 
filesummary is: The file Aggregator_Old.cs is a model class in the Eroms.Data.Atlantic namespace that represents an 'Aggregator' entity within the application's data context. It contains properties with various data types and attributes for validation, primary keys, and database relationships, indicating its role in persisting aggregator information in a database.

Key Features: The class encapsulates aggregator details including identifier keys, name, and status, which may be used for managing aggregator records within the system.
Dependencies: It relies on Entity Framework for data operations and involves dependencies on other data entities via foreign key relationships (e.g., AddressKey and CompetitiveResellerKey).


file name is CompetitiveResellerPrepaidDwelling.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CompetitiveResellerPrepaidDwelling.cs, 
filesummary is: The file CompetitiveResellerPrepaidDwelling.cs is part of the Eroms.Data.Atlantic namespace and defines a data model for the CompetitiveResellerPrepaidDwelling entity. It contains properties that represent the state of a competitive reseller's prepaid dwelling, including identifiers and status information. This model may interface with a database table named CompetitiveResellerPrepaidDwelling and could be used for data operations in an Entity Framework context, highlighting its role in the overall data management framework of the application.


file name is EmpowerMessage.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerMessage.cs, 
filesummary is: This file defines the EmpowerMessage class within the Eroms.Data.Atlantic namespace, which is part of a codebase likely focused on managing and processing messages related to empowerment in a competitive reseller context. 

The EmpowerMessage class represents a database table used to store key attributes such as unique identifiers, a code for stored procedures, user information, and status flags related to message activity and type. It depends on the Entity Framework for data access, indicating that it interacts with a database where the table "EmpowerMessage" exists. This class plays a key role in the business logic of managing messages, likely influencing operations and user interactions within the application.


file name is ServiceTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceTransaction.cs, 
filesummary is: The file ServiceTransaction.cs is a core component of the Eroms Data Atlantic namespace that defines the ServiceTransaction class. This class represents the structure and attributes of a service transaction in the application, including keys, transaction details, and various related entities.

The ServiceTransaction class is equipped with several properties, such as ServiceTransactionKey, TransactionDate, and various status flags (e.g., Rejected, Accepted). It also includes relationships to collections of related entities like AccountCharges and ServiceOrders, indicating dependencies on other tables or models within the database that are crucial for managing service transactions in the application.


file name is TaskType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaskType.cs, 
filesummary is: This file is a data model for a database entity within the Eroms Data Atlantic module. It defines a "TaskType" class that represents a table in the database, including properties such as Code and Description. This model may interact with a database to retrieve or store task-related information, and it is likely utilized by other parts of the application that manage tasks or workflows.


file name is GeneralLedgerAccount.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/GeneralLedgerAccount.cs, 
filesummary is: The file defines a data model class named GeneralLedgerAccount, which represents an account in a general ledger within the Eroms.Data.Atlantic namespace. This model includes properties such as account key, name, description, and status, along with relationships to collections of GeneralLedger and GeneralLedgerPostingAccount entities. It likely interacts with a database, requiring tables for general ledger accounts, posting accounts, and types, reflecting the financial management context of the application.


file name is BillPaymentAssistanceFund.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/BillPaymentAssistanceFund.cs, 
filesummary is: The file BillPaymentAssistanceFund.cs is part of the Eroms.Data.Atlantic namespace and defines a class that represents a database entity for managing assistance funds for bill payments. This class includes properties such as BillPaymentAssistanceFundKey, CompetitiveResellerKey, AccountKey, ContributionAmount, and ContributedOn, indicating it stores relevant information about the funds contributed toward bill payments. The class has a relationship with an Account entity, suggesting dependencies on the Account class and possibly a related database table for managing account details.


file name is ServiceProviderAveragePriceAudit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderAveragePriceAudit.cs, 
filesummary is: The file ServiceProviderAveragePriceAudit.cs defines a data model for auditing average prices from service providers within the Eroms.Atlantic namespace. It represents the ServiceProviderAveragePriceAudit table which holds important attributes such as pricing metrics, timestamps, and user information for auditing purposes. This file is essential for managing and tracking pricing data and likely interacts with databases to store and retrieve audit records.


file name is DocumentData.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DocumentData.cs, 
filesummary is: The file DocumentData.cs is part of the Eroms.AtlanticModel and defines the DocumentData class, which is likely a part of the data access layer in the larger codebase. This class represents a database table for storing document-related information, including its binary data and a collection of related Document entities. It establishes relationships with the Document entity, indicating that multiple documents can be associated with a single DocumentData entry.


file name is Note.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Note.cs, 
filesummary is: The file Note.cs defines a data model for "Note" within the Eroms system, indicating its relevance in managing notes related to various services and customers. This model includes various properties to track details such as status, priority, and callback information, and it establishes relationships with other entities such as Account, Service, and NoteHistory. The Note class can play a crucial role in a customer management system, likely interacting with databases and APIs to maintain notes in regard to customer interactions, service requests, or account management.


file name is accountchargetrueupincorrect.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/accountchargetrueupincorrect.cs, 
filesummary is: This file defines an entity class for a database table named "accountchargetrueupincorrect" within the Eroms.Data.Atlantic namespace. It represents core features related to account charges, including properties such as account keys, amounts, tax information, and invoicing details, which are essential for managing billing processes. This class likely interacts with a database to facilitate CRUD operations, depending on an underlying database setup for storing and retrieving account charge information.


file name is EventCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EventCharge.cs, 
filesummary is: The file EventCharge.cs defines a data model for event charges related to service invoices within the Eroms application, specifically under the Atlantic namespace. It outlines properties such as charge amounts, tax information, and contract terms, and establishes relationships with other entities like ChargePlan and ServiceInvoiceEventCharge, indicating it's a crucial part of the application's billing or invoicing system. This model is linked to databases through Entity Framework, which may also mandate integration with related tables for calculating charges and fees.


file name is ChaseAccount.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChaseAccount.cs, 
filesummary is: The file ChaseAccount.cs represents a model in the Eroms Data Atlantic namespace, specifically for managing data related to the ChaseAccount entity in a larger application, likely involving financial transactions or account management.

The ChaseAccount class includes properties such as Account ID, Username, Password, Merchant ID, and various boolean flags to indicate account capabilities. It has a relationship with the CompetitiveReseller entity, which suggests that it may depend on related data to function properly within the wider system, impacting how accounts are handled in relation to resellers and their payment processing capabilities.


file name is MenuItemsInRole.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MenuItemsInRole.cs, 
filesummary is: The file MenuItemsInRole.cs defines a class that represents the relationship between menu items and user roles within the Atlantic application. It contains properties to identify each menu item, including its unique key, hierarchical level, associated role name, and parent menu item name.

This class serves as a model for a database table called MenuItemsInRole, which is likely used to manage user permissions and navigation within the application. Its structure implies dependencies on a database design that supports role-based access control through menu item management.


file name is ConsumptionToExport.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ConsumptionToExport.cs, 
filesummary is: The file ConsumptionToExport.cs defines an entity class within the Eroms.Data.Atlantic namespace, which represents the structure of the ConsumptionToExport table in a database. This class encapsulates key details related to energy consumption data that is intended for export, including account identifiers, consumption details, and metadata about the readings. Dependencies include Entity Framework for data modeling and possibly interactions with a database where the ConsumptionToExport table resides, capturing energy usage over specified periods along with required validation attributes for its fields.


file name is AccountDispute.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountDispute.cs, 
filesummary is: The file AccountDispute.cs defines a part of the data model for the Eroms data management system, specifically related to handling account disputes. It represents the AccountDispute entity, which includes various properties such as AccountKey, Dispute, and timestamps for disputing and clearing disputes. This model likely interacts with a database table named "AccountDispute" and has a relationship with an Account entity, indicating a dependency on the account data structure.


file name is AccountTrueUpAdjustment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountTrueUpAdjustment.cs, 
filesummary is: The file is a C# model class that defines the structure for the "AccountTrueUpAdjustment" entity within the "Eroms.Data.Atlantic" namespace. It represents a table in the database, indicating that it is integral to the business logic and data management of the application.

The main features include properties for identifiers and foreign keys linking to related entities, specifically "AccountTrueUp". This suggests that it is used to manage adjustments related to account reconciliation. The dependencies are on the "AccountTrueUp" entity and potentially other related databases or tables that manage account details and adjustments.


file name is ZonalChargeAudit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ZonalChargeAudit.cs, 
filesummary is: The file ZonalChargeAudit.cs defines a data model class that represents a database table for auditing zonal charge information in the Eroms Data Atlantic module. The main features include properties for charge history, identifiers for charge plans and regions, as well as created and updated timestamps for record tracking. This model likely interacts with a database entity framework, and it depends on the database table "ZonalChargeAudit" to store and retrieve data related to zonal charges.


file name is MeteredMeterMonthly.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MeteredMeterMonthly.cs, 
filesummary is: The file is a model class representing a "MeteredMeterMonthly" entity within the Eroms.Data.Atlantic namespace. It defines various properties related to metered measurements, such as meter numbers and usage quantities, and is typically used for interacting with a database table named "MeteredMeterMonthly."

This class captures key aspects of meter readings over monthly intervals, including identifiers, measurement intervals, and flags for estimated readings or cancellations. It is tied to a database schema, relying on properties like ServiceLocationKey and ServiceUsageKey, indicating relationships with other tables in the codebase.


file name is EventType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EventType.cs, 
filesummary is: The file EventType.cs is part of the Eroms Data Atlantic code module, serving as a model that defines the structure of EventType objects in the application. It outlines essential properties such as EventTypeId, EventName, and timestamps for creation and modification, establishing the core attributes necessary for tracking events in the system.

The EventType class facilitates managing events by providing metadata like descriptions and total days associated with each event. It may depend on framework elements for data persistence, and is likely used in database operations requiring validation and tracking of event-related data across the application.


file name is CustomFieldCollectionPage.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CustomFieldCollectionPage.cs, 
filesummary is: This file, CustomFieldCollectionPage.cs, is a model class within the Eroms.Data.Atlantic namespace, representing the "CustomFieldCollectionPage" entity in the context of an Entity Framework data model. This class defines properties such as Code and Description, and it establishes relationships with collections of CustomField and CustomFieldCollectionPageLocation objects, indicating a structure for managing custom fields and their locations. As part of the data layer, it depends on the Entity Framework for database interactions and likely ties into the broader data architecture of the application.


file name is QuoteIdGenerator.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/QuoteIdGenerator.cs, 
filesummary is: The file contains a class definition for QuoteIdGenerator within the Eroms.Data.Atlantic namespace, which appears to be part of a larger system for managing quote identifiers in an application related to Atlantic operations. 

Features included in this file are the definition of properties for the quote identifier, including QuoteId, QuoteKey, and CreatedAt, which are essential for tracking quote data. It is likely connected to a database table named "QuoteIdGenerator," and may be used in conjunction with other classes or services that interact with quote-related operations within the application.


file name is UserFunction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UserFunction.cs, 
filesummary is: The file UserFunction.cs defines a data model for the UserFunction entity in the Eroms.Data.Atlantic namespace. It outlines properties and attributes relevant to user functions within the application, such as Code, Name, Description, and the timestamps for creation and updates. This model likely interacts with a database table named "UserFunction" and could be used in various functionalities requiring user permissions or roles in the overall system.


file name is AccountTrueUp.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountTrueUp.cs, 
filesummary is: The file AccountTrueUp.cs defines the AccountTrueUp entity within the Eroms.Data.Atlantic namespace, which is part of a larger codebase focused on financial account management. This model represents a financial true-up, encompassing key properties like account balance, adjustments, and payment details.

Core features include managing account balances through various transactions and adjustments, all tied to an Account. It establishes relationships with detailed transactions and invoices, highlighting dependencies on associated data such as AccountTrueUpDetails and AccountTrueUpPayments, which facilitate comprehensive account reconciliations.


file name is AlertType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AlertType.cs, 
filesummary is: The file AlertType.cs defines a data model for the "AlertType" entity within the Eroms.Data.Atlantic namespace. This entity represents alert types with a unique code and a description, and it has a collection of related "Alert" objects, indicating a one-to-many relationship. This model likely interacts with a database table named "AlertType", and can be part of a larger system that manages alerts and their types.


file name is DatabaseDiagram.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DatabaseDiagram.cs, 
filesummary is: This file is part of the data access layer for the Eroms Atlantic application, specifically defining a model related to the database structure. It represents the entity "DatabaseDiagram" which includes attributes for the database diagram's ID, model name, and table name.

The core feature of this file is to map the DatabaseDiagram entity to a table in the database, facilitating interaction with the database in a structured manner. This model may depend on other parts of the codebase, such as Entity Framework for object-relational mapping, and could be linked to corresponding database tables for maintaining the application's data integrity.


file name is InvoiceGroup.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/InvoiceGroup.cs, 
filesummary is: The file InvoiceGroup.cs defines a model that represents an invoice group within the Eroms.Data.Atlantic namespace. It is part of a larger codebase that likely pertains to handling billing and charging processes, with various attributes that indicate the characteristics of invoice groups, such as charges, statuses, and localizations. Dependencies include collections of different charge types and an ApplicationType relating to how this model interacts with billing logic and data storage.


file name is ServiceProviderCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderCharge.cs, 
filesummary is: The file ServiceProviderCharge.cs represents a data model for the ServiceProviderCharge entity in the Eroms Atlantic codebase. This model is part of the database schema, defining properties such as ServiceProviderKey, ChargeCode, and Amount, which are essential for managing charges associated with service providers. It also includes relationships to other entities like ServiceProviderChargeRelationship and ServiceProviderChargeCode, indicating dependencies that note how this data interacts with broader business processes and requirements.


file name is Document.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Document.cs, 
filesummary is: The file defines a Document model for the Eroms data management system, encapsulating core attributes related to document management such as description, references, creation, and update timestamps. It establishes relationships with document categories, references, and statuses, which may influence how documents are categorized and tracked within the application. This model indicates dependencies on the DocumentCategory, DocumentReference, and Status entities, along with a collection of DocumentData that could represent additional information related to each document.


file name is TrueUpAccountTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TrueUpAccountTransaction.cs, 
filesummary is: The file TrueUpAccountTransaction.cs is a data model class that defines the structure for TrueUpAccountTransaction entities within the Eroms.Data.Atlantic namespace. It contains properties that represent various attributes of a true-up transaction, including keys, types, timestamps, and amounts.

Key Features:
- Represents a financial transaction related to true-up accounts.
- Attributes include transaction identifiers, status flags (true-up, invoice, adjustment), a posting date, and transaction amount.
- It has a virtual relationship with a TrueUp entity, indicating a dependency on another data model.

Business Context:
This class likely plays a role in financial reconciliation or adjustments for accounts in the Atlantic region, tracking important transaction details. The presence of Entity Framework attributes suggests it is used for database interactions.


file name is BillType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/BillType.cs, 
filesummary is: The file BillType.cs defines a data model for a "BillType" entity used within the Eroms.Data.Atlantic namespace. This class is associated with database table "BillType" and includes properties like Code and Description, along with relationships to Account and BillTypeStatu collections. It plays a crucial role in the data structure of the application, potentially impacting billing-related functionalities and requiring proper database management and entity relationship handling.


file name is NotificationForPendingDisconnect.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationForPendingDisconnect.cs, 
filesummary is: The file NotificationForPendingDisconnect.cs defines a data model for the "NotificationForPendingDisconnect" entity within the Eroms.Data.Atlantic namespace. It represents a structure that stores information related to notifications for pending disconnections, including keys for various associated entities such as Account and Notification.

This class features several properties, including unique identifiers and timestamps, as well as navigation properties that link it to other models. These dependencies indicate that it interacts closely with the Account, Notification, and PendingDisconnect entities, which suggest a larger context focused on managing customer accounts and their disconnection notifications.


file name is AgingTrace.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AgingTrace.cs, 
filesummary is: The file AgingTrace.cs defines a data model representing the "AgingTrace" entity within the Eroms.Data.Atlantic namespace of the codebase. This file includes properties that will likely be mapped to a database table, capturing details about events, users, and system performance metrics.

Key features include tracking various event-related information such as timestamps, user details, and resource usage. This model might be dependent on a database schema that includes the "AgingTrace" table, which will store relevant application performance and activity data for further analysis or reporting.


file name is TrueUp.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TrueUp.cs, 
filesummary is: The file TrueUp.cs defines a data model class for managing TrueUp entities in the Eroms system, specifically within the Atlantic module. The TrueUp class captures essential information related to invoice adjustments, including amounts invoiced and flags for finalization. It maintains relationships with other entities such as Account, TrueUpAccountTransaction, TrueUpError, and various charge details, indicating it plays a crucial role in financial data handling within the application’s business logic framework. Dependencies include relationships with the Account entity and collections of related transactions and charges.


file name is WeatherMoratorium.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WeatherMoratorium.cs, 
filesummary is: The file WeatherMoratorium.cs defines a data model for the Weather Moratorium entity in the Eroms system. This class includes properties related to service providers, locations, and relevant dates, which facilitate tracking moratoriums on weather services. It likely interacts with the database table "WeatherMoratorium" and is linked to the ServiceProvider entity to establish relationships within the data structure.


file name is EdiError.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EdiError.cs, 
filesummary is: The file EdiError.cs defines the EdiError class within the Eroms.Data.Atlantic namespace, which represents a database table structure for storing error details related to Electronic Data Interchange (EDI) files. This class includes properties such as incomingEdiFilekey, Filepath, errordescription, receivedat, and ReplicationKey, facilitating error tracking and management within the broader Eroms application. It relies on Entity Framework for ORM, suggesting dependencies on the database configuration and potentially linked tables for EDI file processing.


file name is ServiceUsageToBeMoved.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceUsageToBeMoved.cs, 
filesummary is: The file defines a data model for the `ServiceUsageToBeMoved` entity in the Eroms Atlantic namespace, which is part of a larger codebase that likely deals with service usage management and billing. It represents a database table with various properties such as service keys, dates, quantities, and statuses related to service usage transactions. The entity may interact with other components of the codebase that handle data retrieval, validation, and invoicing for services.


file name is CreditCheckBureau.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CreditCheckBureau.cs, 
filesummary is: This file defines the `CreditCheckBureau` class, which is part of the data access layer for the Eroms.Atlantic namespace. It represents a database table that stores information related to credit check bureaus, including properties such as a unique code, description, enabled status, and a relationship to third-party data providers and risk models. This class is likely used in conjunction with database operations to manage credit bureau data and their associated risk models within the larger application.


file name is AgingGroup.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AgingGroup.cs, 
filesummary is: This file defines the AgingGroup class, which represents a data model in the Eroms.Data.Atlantic namespace. It includes properties like CompetitiveResellerKey, Code, and Description, and establishes a relationship with AgingInterval and DisconnectSetup, indicating it handles aging-related data for competitive resellers. This file is likely part of a larger application that manages billing or account aging processes, relying on a database that includes tables for AgingGroup and AgingInterval.


file name is EdiSegmentMap.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EdiSegmentMap.cs, 
filesummary is: The file EdiSegmentMap.cs is part of a data model representing the EDI (Electronic Data Interchange) segment mapping in the Atlantic codebase. It defines the EdiSegmentMap class, which outlines the structure and relationships for EDI segment data, including properties such as EdiSegmentMapId, SegmentId, and SegmentQualifier. This class is associated with EdiElementMap and EdiTransactionMap classes, indicating dependencies on these models for managing EDI mappings effectively.


file name is DepositTransactionType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositTransactionType.cs, 
filesummary is: The file DepositTransactionType.cs defines a model for handling deposit transaction types in the Eroms Data Atlantic system. It includes properties such as Code and Description to represent various types of deposit transactions, along with a collection of related DepositTransaction entities. This structure is likely integral to database interactions and may rely on a corresponding database table named "DepositTransactionType" for data storage and retrieval.


file name is Position.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Position.cs, 
filesummary is: The file defines a Position class within the Eroms.Data.Atlantic namespace, representing a key entity in the application's data model. This class includes essential fields such as PositionKey, CompetitiveResellerKey, Name, Description, and IsDefault, as well as relationships to Aggregator and AggregatorPosition entities, indicating a structure that supports hierarchical data. It is likely part of a larger data management or CRM system that relies on Entity Framework for database interactions, involving relationships with tables that store Aggregator and AggregatorPosition data.


file name is Account.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Account.cs, 
filesummary is: The file Account.cs defines the structure of the Account entity for the Eroms Data Atlantic module. It includes a variety of properties related to accounts, such as account keys, customer details, billing information, and various collections representing related business activities and transactions.

The Account entity interacts extensively with other parts of the codebase, maintaining relationships with multiple collections like payments, transactions, and notifications, which are essential for managing user accounts and billing processes. It also relies on related entities such as Customer, Address, and various transaction types, indicating a complex system designed to handle detailed financial operations within the application.


file name is AchPaymentQueueHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AchPaymentQueueHistory.cs, 
filesummary is: The file AchPaymentQueueHistory.cs defines a data model class used for tracking the history of ACH payment queue records within the Eroms system. It contains properties representing key payment information, statuses, and associated entities such as Account, ACHTransaction, and Invoice. This class is part of the Entity Framework and is crucial for managing payment-related data, likely interacting with a database table named "AchPaymentQueueHistory."


file name is ServiceDateType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceDateType.cs, 
filesummary is: The file defines the ServiceDateType class as part of a data model for the Eroms Atlantic application. It includes properties for a unique identifier (Code) and a description, with a relationship to a collection of ServiceDate objects. This model is likely used to represent service dates in a database, implying dependencies on Entity Framework and database tables related to service dates.


file name is SettingAuthorization.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/SettingAuthorization.cs, 
filesummary is: The file SettingAuthorization.cs defines a data model for managing authorization settings within the Eroms Atlantic application. It includes properties such as ServiceKey, AccountKey, and various user details, which are critical for tracking authorization requests and updates. This model also interacts with related entities like Account, Service, and User, indicating dependencies on these components for complete functionality within the application's authorization framework.


file name is ServiceInvoice.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceInvoice.cs, 
filesummary is: The file ServiceInvoice.cs defines a модель для работы с данными, связанными с выставлением счетов за услуги в рамках архитектуры Eroms. Он включает в себя свойства и связи, которые описывают различные типы сборов и налогов, относящихся к счетам за услуги. Это модель может использоваться в контексте работы с базой данных для обработки и хранения информации о выставленных счетах на услуги, взаимодействуя с другими сущностями, такими как ChargePlan и ServiceProviderInvoice.


file name is BlackList.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/BlackList.cs, 
filesummary is: This file defines a class named BlackList within the Eroms.Data.Atlantic namespace, which represents a data model for maintaining a blacklist. The BlackList class includes properties such as BlackListKey, AccountName, SSN, CalledFrom, PhoneNumber, and ESIID, each with specific data types and constraints. This model likely interacts with a database table named "BlackList" to store or retrieve information related to accounts that are flagged for various reasons, suggesting a dependency on a database structure to function effectively in the larger codebase.


file name is ServiceProviderHoliday.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderHoliday.cs, 
filesummary is: This file defines a class representing a model for service provider holidays within the Atlantic context of the Eroms application. It includes properties for a unique identifier, holiday date, and holiday reason, with a relationship to the ServiceProvider entity. This model is likely part of a larger system managing service availability and scheduling based on holidays, potentially interacting with a database to store and retrieve this information.


file name is FtpFile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/FtpFile.cs, 
filesummary is: The file FtpFile.cs defines a model class for managing FTP file entities within the Eroms.Data.Atlantic namespace. It includes properties for various attributes of an FTP file, such as its ID, direction, name, size, status, and timestamps for creation and updates. The class has dependencies on other entities like FtpFileDirection, TransferStatu, and FtpFileSource, indicating relationships with additional components in the codebase, likely for handling different aspects of file transfers.


file name is ApplicationType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ApplicationType.cs, 
filesummary is: The file ApplicationType.cs is a model class that defines the data structure for "ApplicationType" in the Eroms.Data.Atlantic namespace. This class includes properties such as Code and Description, and it establishes a relationship with the InvoiceGroup class, indicating that it can have multiple associated invoice groups. It is part of a larger codebase likely related to managing various types of applications and their associated invoice processing features, using a database context to persist and retrieve this data from a relational database.


file name is AccountsOptedIn.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountsOptedIn.cs, 
filesummary is: The file AccountsOptedIn.cs defines a data model for the "AccountsOptedIn" entity within the Eroms Data Atlantic namespace. This model tracks user opt-in attempts for various communication methods, including SMS, email, and IVR. It contains properties related to account identifiers, attempt counts, and timestamps, highlighting the business context of managing user preferences for different notification methods. This file likely depends on others for database interactions, such as entity framework configurations and databases managing user data.


file name is AccountDeposit.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AccountDeposit.cs, 
filesummary is: The file AccountDeposit.cs is part of the Eroms.Data.Atlantic namespace and defines a data model class for handling account deposits. 

The AccountDeposit class includes properties such as AccountKey, RequiredDeposit, and various fields related to deposits and refunds, providing essential structure for managing financial transactions linked to accounts. This model likely interacts with a database table named "AccountDeposit" and is used in conjunction with the Account entity, suggesting a system focused on financial services or accounting where deposits and refunds are tracked.


file name is ServiceHistoryEndDate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceHistoryEndDate.cs, 
filesummary is: The file defines the `ServiceHistoryEndDate` class, which is part of the `Eroms.Data.Atlantic` namespace and represents a database table that tracks changes to service history records. It includes fields for tracking the replication key, service key, type, old and new date values, user details, and creation timestamp. The class has a relationship with a `Service` entity, indicating dependencies on related service records.


file name is RecurringPayment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/RecurringPayment.cs, 
filesummary is: The file represents a model class for recurring payments within an application. It establishes the structure of the RecurringPayment entity, which is part of a larger system likely focused on managing payment plans and associated events.

Key Features:
- Defines properties such as RecurringPaymentKey, PaymentPlanKey, and Amount.
- Establishes relationships with other entities like PaymentPlan and RecurringPaymentEvent.

Business Context:
This model will likely interact with a database table named "RecurringPayment," storing data related to scheduled payments for customers, potentially impacting how subscriptions or recurring billing are handled within the application.


file name is ChargePlanPrepaidInitialHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanPrepaidInitialHistory.cs, 
filesummary is: The file ChargePlanPrepaidInitialHistory.cs is a C# class file that defines the structure for storing historical records related to prepaid charge plans in a database. This class represents a model in the Entity Framework, with various properties that map to the attributes of a database table, including keys, types, and other financial particulars. This file is integral to the data layer of the codebase, as it manages the historical records for charge plans, which likely supports billing or invoicing features in the larger application context. 

Key features include properties for charge plan definitions, invoice representations, and user updates. Dependencies include databases that store charge plans, reseller data, and potentially invoice generation systems.


file name is DirectDebitInfo.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DirectDebitInfo.cs, 
filesummary is: The file DirectDebitInfo.cs defines a data model class for handling direct debit information related to customers within the Eroms Atlantic codebase. It includes key properties such as account key, customer details, and payment scheduling information, helping manage recurring payment transactions and related metadata. This model interacts with a database table called "DirectDebitInfo" and may depend on other components for user authentication and payment processing functionality associated with the application.


file name is sysdiagram.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/sysdiagram.cs, 
filesummary is: This file defines a partial class named 'sysdiagram' within the Eroms.Data.Atlantic namespace. It represents a database table structure, specifically for storing information about diagrams associated with database principals in an Entity Framework context. Key properties include 'name', 'principal_id', 'diagram_id', 'version', and 'definition', which likely corresponds to a database table that handles visual representations or schemas in the application.


file name is NonRecurringPayment.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NonRecurringPayment.cs, 
filesummary is: The file NonRecurringPayment.cs defines a partial class called NonRecurringPayment, which is part of the Eroms.Data.Atlantic namespace. This class represents a model for non-recurring payments in a financial or subscription context, including properties such as PaymentPlanKey, Amount, and linked entities for PaymentPlan and NonRecurringPaymentEvent. 

As it stands, this class is critical for managing non-recurring payment information within the application, likely utilized by other parts of the system to handle payment processing, and it depends on the PaymentPlan and NonRecurringPaymentEvent entities as part of database interactions.


file name is ServiceUsageBilledByServiceProvider.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceUsageBilledByServiceProvider.cs, 
filesummary is: The file represents a model class for managing service usage data within the Eroms Data Atlantic namespace. It primarily defines the properties and relationships for service usage billed by service providers, including relevant data such as dates, quantities, and invoicing details. The class also establishes associations with other entities, notably the Service and UnmeteredMeterMonthly, indicating its function in tracking and managing billing information in a broader service-related system.


file name is ChargePlansFromTexpoEFL.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlansFromTexpoEFL.cs, 
filesummary is: The file ChargePlansFromTexpoEFL.cs is a class definition for an entity that likely represents charge plans associated with a service or product in the Eroms Atlantic model. It defines various properties related to charge plans, including product details, effective dates, price changes, and Spanish language equivalents, indicating a need for multilingual support. This class may be used in conjunction with a database table named "ChargePlansFromTexpoEFL," and its functionality could depend on data access and manipulation in the Entity Framework context.


file name is GeneralLedger.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/GeneralLedger.cs, 
filesummary is: The file "GeneralLedger.cs" contains a code definition for the GeneralLedger class, which is part of the Eroms.Data.Atlantic namespace. This class represents a model in the application that relates to financial transactions, specifically those recorded in a general ledger, highlighting properties such as transaction key, account key, posting date, and amounts for debits and credits.

Features include tracking financial entries linked to "GeneralLedgerAccount" and "GeneralLedgerTransaction" objects, suggesting dependencies on these related classes. This file forms part of a database schema represented via Entity Framework, indicating that it will interact with a database table named "GeneralLedger".


file name is AMSUsageImporterQueue.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AMSUsageImporterQueue.cs, 
filesummary is: The file AMSUsageImporterQueue.cs defines a data model related to the usage import queue within the Eroms Atlantic module. It includes properties for tracking usage counts, statuses, and metadata regarding creation and updates. This model is likely tied to a database table named "AMSUsageImporterQueue," and may depend on a related "QueueStatu" entity for status management.


file name is GeneralLedgerJournalType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/GeneralLedgerJournalType.cs, 
filesummary is: The file GeneralLedgerJournalType.cs defines a model class representing a type of journal in the general ledger system. It includes properties such as Code and Description, as well as relationships with other entities, specifically GeneralLedgerPostingAccount. This model is part of the data access layer for the Atlantic project, indicating its role in managing journal entries and the associated accounts in a financial context.


file name is WorkGroupTaskStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WorkGroupTaskStatu.cs, 
filesummary is: This file defines a class named WorkGroupTaskStatu within the Eroms.Data.Atlantic namespace. It represents a data model used to manage the status of workgroup tasks, containing properties for a unique code and a descriptive string. This model likely interacts with a database, as indicated by the usage of attributes for primary key identification and constraints, suggesting it is essential for data operations related to task statuses in the larger application.


file name is AmsUsageAnomalyQueueHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AmsUsageAnomalyQueueHistory.cs, 
filesummary is: The file AmsUsageAnomalyQueueHistory.cs represents a data model for tracking usage anomaly history in the Eroms Atlantic module. It defines properties related to various usage metrics, including timestamps and user information, thereby facilitating the storage and retrieval of anomaly data. This class seems to interact with a database table named "AmsUsageAnomalyQueueHistory," capturing comprehensive usage data for further analysis, potentially linking to other components within the Atlantic module's functionality.


file name is Language.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Language.cs, 
filesummary is: The file defines a partial class named Language within the Eroms.Data.Atlantic namespace, representing a database table structure. It encapsulates properties that include a unique language code and a description, along with relationships to multiple collections such as Accounts, NotificationTemplates, NotificationTypeMapToDeliveryProfiles, and Terms. This file is part of the data model, enabling core functionalities related to language management within the application, and relies on Entity Framework for database interactions.


file name is ContractSummary.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ContractSummary.cs, 
filesummary is: The file ContractSummary.cs is part of the data model for the Eroms Data Atlantic namespace, representing a database table. It defines the structure and properties of a contract summary, including details like contract terms, pricing, and effective dates. This class likely connects with a larger codebase focused on contract management, requiring integration with a database that contains contract information and relationships with charge plans.


file name is Application.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Application.cs, 
filesummary is: The file `Application.cs` is a model class that defines the structure of the `Application` entity in the Eroms.Data.Atlantic namespace. This class represents critical attributes of an application within the system, including various properties and collections related to access audits, roles, URLs, control numbers, and logging mechanisms, establishing its role in managing application-related data within the codebase.

Key Features:
- Represents the `Application` entity with attributes like `Code` and `Description`.
- Contains multiple collections (e.g., `AccessAudits`, `LogTypes`) that denote relationships to other entities.

Dependencies:
- This class is likely tied to database tables reflecting its properties and relationships with other tables representing access audits, roles, logs, and other features within the application domain.


file name is ACHAccount.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ACHAccount.cs, 
filesummary is: The file ACHAccount.cs defines a model for an ACHAccount entity within the Eroms Data Atlantic codebase. This class includes properties such as ACHAccountKey, AccountKey, Number, ACHAccountType, and BankName, which describe the attributes of an ACH account. It has a dependency on the Account class, indicating a relationship between ACH accounts and bank accounts, and uses Entity Framework for database interactions.


file name is PendingDisconnectType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PendingDisconnectType.cs, 
filesummary is: The file defines a data model class called PendingDisconnectType, which is part of the Eroms.Data.Atlantic namespace. This class represents a database table that holds information regarding types of pending disconnects. It includes properties for a unique code and description, along with a collection to manage associated notifications, indicating a relationship with other entities in the codebase.


file name is StationCodeMap.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/StationCodeMap.cs, 
filesummary is: The file StationCodeMap.cs defines a data model for the StationCodeMap entity within the Eroms.Data.Atlantic namespace, linking it to a database table called "StationCodeMap." This file establishes the structure of the station code mapping, including properties like StationCode, Zone, and McpePowerRegion, which can be used for managing station information across different zones and power regions. It serves as a part of the data access layer that interacts with the database, providing a way to represent and manipulate station data in the application.


file name is ClearingHouse.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ClearingHouse.cs, 
filesummary is: The file ClearingHouse.cs defines a data model for a ClearingHouse entity within the Eroms.Data.Atlantic namespace. It includes properties that represent various attributes of a clearing house, such as its name, status, and associated interests, along with relationships to other entities like Address and ClearingHouseInformation.

This file serves as a foundation for the data management system, ensuring proper representation and handling of ClearingHouse data within a database context, relying on Entity Framework features for database interactions. Key dependencies include the Address and ClearingHouseInformation models, as well as collections for managing related ClearingHouseInterests and DepositInterests.


file name is ServiceProviderPriorityCodeCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceProviderPriorityCodeCharge.cs, 
filesummary is: This file defines the `ServiceProviderPriorityCodeCharge` class, which represents a data model in the Eroms Atlantic module. It details various charges related to service providers, including different rates for residential and commercial services based on switch and move-in scenarios. The model relies on other entities such as `ServiceProvider` and `ServiceProviderPriorityCode`, indicating a relational context in the database schema.


file name is TaskText.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TaskText.cs, 
filesummary is: The file TaskText.cs is a model class that represents the structure of the TaskText entity in the Eroms.Atlantic namespace. It defines attributes related to task text such as TaskKey, Text, CreatedBy, CreatedAt, and ReplicationKey, as well as a nullable reference to taskAssignmentKey. This model may interact with a database table called TaskText and is likely used for data management in the broader Eroms application.


file name is AuditPostAdjustmentEntry.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AuditPostAdjustmentEntry.cs, 
filesummary is: The file contains a class definition for "AuditPostAdjustmentEntry," which represents an audit log for post-adjustment entries in the Atlantic module of the Eroms application. It includes properties such as Session ID, User ID, timestamps, account details, adjustment types, and amounts that relate to financial transactions. This model interacts with a database table named "AuditPostAdjustmentEntry," indicating that it captures important auditing information that could be linked to transactional records in the system.


file name is Term.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/Term.cs, 
filesummary is: The file Term.cs defines the structure of the Term entity within the Eroms.Data.Atlantic namespace, representing a database table called "Term." It includes properties for Code, Description, Language, and Value, each with specific data annotations for validation and relational mapping. The Term entity relies on the Language entity as a foreign key, indicating a relationship with another table in the database.


file name is NotificationTypeValidityMap.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationTypeValidityMap.cs, 
filesummary is: This file defines the `NotificationTypeValidityMap` class, which maps notification types to their validity concerning delivery methods within the Eroms Data Atlantic namespace. It includes properties such as notification type, delivery method, creation details, and whether a PUC (Public Utility Commission) is required. The class also establishes relationships with `NotificationDeliveryMethod` and `NotificationType`, indicating dependencies on these entities for proper functionality within the application.


file name is EmpowerModule.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerModule.cs, 
filesummary is: The file EmpowerModule.cs defines a data model for the EmpowerModule entity within the Eroms.Data.Atlantic namespace. It outlines the structure and properties of the EmpowerModule, including its ID, name, color, and a collection of associated ReportMaps. This file is essential for managing the relationship between the EmpowerModule and ReportMap entities in the application's database, relying on Entity Framework for data interactions.


file name is PremiumDisconnectLocationType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PremiumDisconnectLocationType.cs, 
filesummary is: The file PremiumDisconnectLocationType.cs defines a data model class within the Eroms.Data.Atlantic namespace, representing the "PremiumDisconnectLocationType" table in a database. This class includes properties for a code and a description that are essential for managing premium disconnect locations in the application. It likely serves as a core element of the business logic related to managing disconnect locations, and it depends on Entity Framework for database interactions.


file name is ScottsPrepaidParameter.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ScottsPrepaidParameter.cs, 
filesummary is: The file ScottsPrepaidParameter.cs is a model class for the Eroms.Atlantic segment of a larger codebase, specifically designed for handling prepaid parameters associated with a service. It defines the ScottsPrepaidParameter entity with properties such as ServiceKey, ScottsPrepaidParameterType, Count, and ReplicationKey. The class has a relationship with another entity, Service, indicating that it depends on the Service model, which might involve database tables for storing parameters and related service data.


file name is NotificationMapTemplateOverwriteOption.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationMapTemplateOverwriteOption.cs, 
filesummary is: The file NotificationMapTemplateOverwriteOption.cs defines a data model for managing notification map templates in the Atlantic module of the Eroms application. It includes properties for a unique code and a description, indicating its role in the database schema. This model also establishes a relationship with an associated collection of NotificationMapTemplate objects, suggesting it is part of a larger system managing notifications.


file name is WorkGroupTask.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WorkGroupTask.cs, 
filesummary is: This file defines a model class called WorkGroupTask within the Eroms.Data.Atlantic namespace, likely used in an Entity Framework context. It represents a task associated with a workgroup, encapsulating key attributes such as task identification, description, status, and timestamps. The class has relationships with WorkGroup and WorkProcessType, indicating dependencies on these entities for its operations.


file name is MeterInformationToExport.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MeterInformationToExport.cs, 
filesummary is: The file defines a data model class called MeterInformationToExport within a specific namespace, indicating its role in the codebase's data layer. It represents a table in the database containing information about meters, including account and premise identifiers, meter number, load profile, action type, and the timestamp of the last update. This class is likely used for managing and exporting meter-related data, depending on interactions with a database that stores this information.


file name is BatchEnrollmentStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/BatchEnrollmentStatu.cs, 
filesummary is: This file defines the BatchEnrollmentStatu class within the Eroms.Data.Atlantic namespace, which represents the status of batch enrollments in an educational or training context. It contains properties for a unique status code and a description, alongside a collection of related AccountEnrollment entries, suggesting a relationship to other management or reporting functionalities regarding enrollments. As part of a larger codebase, it potentially interacts with a database for tracking enrollment statuses.


file name is LogType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/LogType.cs, 
filesummary is: The file LogType.cs defines the LogType class, which represents a database table associated with logging functionalities in the Eroms Atlantic data context. This class captures essential attributes such as a unique code, description, and associated application details, while also establishing relationships with the Log entity for managing log entries. The LogType class is pivotal for tracking and managing log types in the application, supporting the logging feature's functionality and its dependency on the Log and Application entities.


file name is AuditPostAdjustmentAccountNumberSearch.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AuditPostAdjustmentAccountNumberSearch.cs, 
filesummary is: The file defines a data model for auditing account number searches within the Eroms.Data.Atlantic namespace. It encapsulates the structure for the AuditPostAdjustmentAccountNumberSearch entity, which includes properties like AuditKey, SessionId, UserId, ActionAt, Accountnumber, and Found. This model likely interacts with a database table named "AuditPostAdjustmentAccountNumberSearch" and may support features related to auditing user actions and account searches within the application.


file name is ServiceLocationHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceLocationHistory.cs, 
filesummary is: The file ServiceLocationHistory.cs defines a data model for tracking changes in service location details, including address, city, and zip code updates. It utilizes Entity Framework for data storage, requiring a ServiceLocation reference for related data handling. The model captures essential metadata such as who created the record and when, indicating its role in maintaining historical data integrity for service locations within the application.


file name is RejectedAccountCharge.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/RejectedAccountCharge.cs, 
filesummary is: The file RejectedAccountCharge.cs defines a data model for the RejectedAccountCharge entity within the Eroms.Data.Atlantic namespace. It represents charges that have been rejected for accounts, detailing various attributes such as account information, invoice details, and rejection specifics. This model may interact with a database table named "RejectedAccountCharge" and could be utilized by other components of the system that handle billing and invoicing processes.


file name is MCPEPowerRegion.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MCPEPowerRegion.cs, 
filesummary is: The file MCPEPowerRegion.cs contains a class definition for the entity MCPEPowerRegion, which is part of the Eroms.Data.Atlantic namespace. This class models a power region, with properties for its code and description, and it establishes relationships with other entities including UsageCharges, ZonalCharges, and McpePowerRegionCombinationTypes, indicating its role in a broader energy management system. The file relies on Entity Framework for database mapping, and it interacts with associated tables that store charge and combination type data related to power regions.


file name is ContractPeriod.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ContractPeriod.cs, 
filesummary is: The file ContractPeriod.cs is a part of the Eroms.Data.Atlantic namespace, representing a model class within the larger codebase, specifically mapping to the "ContractPeriod" table in a database. It encapsulates the features related to contract periods, providing properties like Code and Description, and establishing a relationship with ChargePlan entities, suggesting that multiple charge plans can relate to a single contract period.

The class is essential for managing contract period data, which may be pivotal for generating billing cycles or promotional plans, and relies on Entity Framework for ORM (Object-Relational Mapping) functionality. It also includes data validation attributes that ensure the integrity of the data being stored.


file name is ServiceSuspensionMeter.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceSuspensionMeter.cs, 
filesummary is: This file defines a data model class named ServiceSuspensionMeter that is part of the Eroms Data Atlantic namespace. It represents a table in the database with three properties: ServiceSuspensionKey, MeterNumber, and ReplicationKey, with ReplicationKey serving as the primary key. The class has a relationship with another entity, ServiceSuspension, indicating that it is used within a larger system potentially managing service suspensions and related data.


file name is CollectionQueue.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CollectionQueue.cs, 
filesummary is: The file CollectionQueue.cs defines a data model for managing a collection queue within the Eroms Atlantic context. This class involves various properties related to accounts and their collection statuses, such as account details, contact information, dates, and balances. It is linked to a database table ("CollectionQueue") and serves as a fundamental part of the business logic for tracking collections and notifications in the overall application ecosystem.


file name is MeteredMeter.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/MeteredMeter.cs, 
filesummary is: The file MeteredMeter.cs is part of the Eroms.Data.Atlantic namespace and defines the MeteredMeter class, which represents a model for a metered meter entity in the system. This class includes properties relevant to metering data, such as ServiceLocationKey, MeterNumber, and several others, with relationships to collections and other types indicating dependencies on IntervalMeterDetail and other entities like TimeOfUse and UnitOfMeasure. The MeteredMeter class is crucial for managing utility metering information, likely interacting with a database table called “MeteredMeter” to store and retrieve data.


file name is CompetitiveResellerMessage.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CompetitiveResellerMessage.cs, 
filesummary is: The file CompetitiveResellerMessage.cs is part of the Eroms Atlantic codebase and defines a data model for storing competitive reseller messages in a database. It includes properties that represent various attributes of the message, such as its key, content, validity period, and audit information. This class likely interacts with a database table named "CompetitiveResellerMessage" and may be utilized by other parts of the application that involve handling reseller messaging features.


file name is AchPaymentQueue.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AchPaymentQueue.cs, 
filesummary is: The file AchPaymentQueue.cs defines a data model for the AchPaymentQueue entity within the Eroms.Data.Atlantic namespace. It represents a queue for ACH payment processing with attributes such as payment status, draft date, and associated accounts and transactions. This model likely interacts with a database, requiring synchronization with tables for accounts, invoices, and ACH transactions to manage payment data and statuses effectively.


file name is ChargePlan.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlan.cs, 
filesummary is: The file ChargePlan.cs defines a data model for representing a Charge Plan within the Eroms.Data.Atlantic namespace. This model includes various properties related to pricing, contracts, and billing, representing a core feature of the system related to energy charge management. It has multiple dependencies, including related entities and collections like ChargePlanAmpDetail, ChargePlanAudit, and others, suggesting that the Charge Plan interacts with a comprehensive data structure for managing various charge types and contract summaries vital for billing and customer relationship management.


file name is ServiceOrderPoleNumber.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceOrderPoleNumber.cs, 
filesummary is: This file defines a model class for managing service order pole numbers within the Atlantic region of the Eroms data structure. It contains properties for the service order key and pole number, both of which are essential for uniquely identifying a service order associated with a specific pole. The class establishes a relationship with another entity, ServiceOrder, indicating a dependency on that model for data operations.


file name is ChargePlanZip.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanZip.cs, 
filesummary is: The file defines a data model class for the "ChargePlanZip," which is part of the Eroms Atlantic codebase. It represents a mapping to the "ChargePlanZip" table in the database, containing properties for ChargePlanKey, Zip, and Status, along with references to related entities ChargePlan and Zip. This class is crucial for managing charge plans associated with specific zip codes, indicating a relationship with other tables in the database.


file name is GraphType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/GraphType.cs, 
filesummary is: The file GraphType.cs defines a data model within the Eroms codebase for the "GraphType" entity, part of the Atlantic component of the application. It contains properties such as Code and Description, and it establishes a one-to-many relationship with the GraphMap entity, indicating that each graph type can be associated with multiple graph maps. This file is essential for database interactions, likely linking to database tables and facilitating the management of graph types in the application.


file name is accounttempinsert.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/accounttempinsert.cs, 
filesummary is: The file accounttempinsert.cs contains a class definition for an Entity Framework model representing a temporary account insertion table in the database. This class includes properties to handle various account-related details, including keys, billing information, invoicing types, and customer data. It serves as a data structure that interacts with the broader codebase's database operations, specifically focused on account management.


file name is PrepaidMeasureType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PrepaidMeasureType.cs, 
filesummary is: The file defines a class `PrepaidMeasureType`, which is part of the Eroms.Data.Atlantic namespace. It represents a table in the database that stores information related to prepaid measure types, including properties such as a unique code and a description. This class also establishes relationships with other entities, indicating dependencies on collections of `ChargePlanPrepaidInitial` and `CompetitiveResellerPrepaidMeasureType`, essential for managing prepaid offerings in the context of a larger financial or telecommunications application.


file name is GeneralLedgerTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/GeneralLedgerTransaction.cs, 
filesummary is: The file GeneralLedgerTransaction.cs defines a data model for managing general ledger transactions within the Eroms.Data.Atlantic namespace. This model establishes a structure for tracking financial transactions, including various collections for related account transactions and service provider details, which are key to the financial operations of the application. It includes references to other entities like AccountTransaction, GeneralLedger, and others, indicating dependencies on those components for full functionality.


file name is ServiceChronology.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceChronology.cs, 
filesummary is: The file ServiceChronology.cs is a model class that represents the ServiceChronology entity in the Atlantic submodule of the Eroms data architecture. This model captures actions related to services, including properties such as ServiceKey, ServiceAction, and ActionAt, and defines relationships with other entities like Service and ServiceAction.

The class is used for tracking changes or actions within a service context, relying on Entity Framework for data persistence. Key dependencies include the Service and ServiceAction classes, which are likely to manage service details and action types, respectively. This model is essential for maintaining historical records of service interactions within the application.


file name is SwitchHoldType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/SwitchHoldType.cs, 
filesummary is: The file SwitchHoldType.cs defines a model class for a table named "SwitchHoldType" within the Eroms.Data.Atlantic namespace. It includes properties for the switch hold type code and its description, along with a collection to manage related service switch holds. This file contributes to the data structure of the application, and its functionality could be essential for managing service-related functionalities within the overall system. It may depend on other data entities, particularly the ServiceSwitchHold, which could relate to specific services affected by these switch holds.


file name is DepositTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/DepositTransaction.cs, 
filesummary is: The file DepositTransaction.cs defines a model class for Deposit Transactions in the Eroms application, specifically under the Atlantic namespace. It includes properties that represent various attributes of a deposit transaction, such as amount, type, timestamps, and relationships with other entities like DepositRefund, Payment, and AccountSubLedgerCharge. The class is a crucial part of the application's data layer, likely interacting with a database to handle deposit transaction operations.


file name is SystemSetting.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/SystemSetting.cs, 
filesummary is: This file defines the `SystemSetting` class within the Eroms.Data.Atlantic namespace, which represents a system settings configuration model in the application. It includes properties such as `Code`, `SettingName`, `SettingDescription`, `SettingValue`, `DefaultValue`, and a boolean `IsEromsSetting`. The class is likely used for managing application settings, and it is associated with a database table, suggesting dependencies on a database schema for proper functionality.


file name is ServiceLocationUpdate.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceLocationUpdate.cs, 
filesummary is: The file defines a data model class named ServiceLocationUpdate within the Eroms.Data.Atlantic namespace, representing updates related to service locations in the system. It contains various properties such as ServiceLocationKey, address details, and billing information, indicating its role in managing service location updates in a billing or utility context. This model likely interacts with other components related to metering and service management, relying on databases for persistence and possibly involving collections of related entities like MeteredMeterUpdate and MeterUpdate.


file name is ACHTransaction.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ACHTransaction.cs, 
filesummary is: The file ACHTransaction.cs defines a data model for ACH transactions within the Eroms.Data.Atlantic namespace. It captures key transaction details such as AccountKey, ACHProvider, amount, along with associated metadata and relationships with other entities like Account, ACHPaymentProfileInformation, and various collections for payment queues and histories. This model structure indicates its central role in managing financial transactions and may rely on dependencies like databases that support the ACH transaction processes.


file name is EmpowerQuote.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/EmpowerQuote.cs, 
filesummary is: The file EmpowerQuote.cs represents a data model within the Eroms.Atlantic namespace, specifically focused on the "EmpowerQuote" entity. It defines the structure and attributes of an EmpowerQuote object, including properties like EmpowerQuoteKey, PrepaidMeasureType, and various date and monetary fields, which collectively encapsulate details relevant to quotes in a business context. The model is likely part of a larger application involving charge plans and prepaid measures, interacting with a database table named "EmpowerQuote".


file name is AMSUsageSummaryDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AMSUsageSummaryDetail.cs, 
filesummary is: The file AMSUsageSummaryDetail.cs defines a data model for the "AMSUsageSummaryDetail" entity, representing detailed usage information in the Eroms system's Atlantic data domain. This class includes properties such as usage timestamps, reads, multipliers, and various usage metrics segmented by time intervals. It establishes a relationship with the AMSUsageSummary entity, indicating a dependency on it, which organizes the summarized usage data within the overall application.


file name is ChargePlanMarketing.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanMarketing.cs, 
filesummary is: The file defines a class named ChargePlanMarketing, part of the Eroms.Data.Atlantic namespace. This class represents a marketing charge plan in a database context and includes properties for various marketing features and a relationship to a ChargePlan entity. It relies on Entity Framework for data modeling, indicating dependencies on the database schema to handle ChargePlan and associated feature attributes.


file name is PremisesToExport.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PremisesToExport.cs, 
filesummary is: This file defines a data model class named PremisesToExport within the Eroms.Data.Atlantic namespace. It represents a database table used for managing export information related to premises, including attributes like account IDs, address details, service dates, and relevant identifiers. Dependencies include database connectivity and potential relationships with other entities in the data model, pertinent for applications that deal with energy services.


file name is AspxPageURL.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AspxPageURL.cs, 
filesummary is: The file Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AspxPageURL.cs defines the AspxPageURL class, which is part of the Eroms data model in the Atlantic namespace. This class represents a database entity with various properties such as Code, Description, and flags for page characteristics. It also establishes relationships with other entities, notably an Application object and a collection of EmpowerMenus, indicating a connection to a broader application context and user interface navigation.


file name is AMSUsageSummary.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AMSUsageSummary.cs, 
filesummary is: The file AMSUsageSummary.cs defines a data model for an entity named AMSUsageSummary, which likely represents a summary of usage data in an energy management system. This entity includes properties that capture meter readings, usage dates, and related metadata, suggesting it is part of a larger system focused on energy consumption tracking and reporting. The model has dependencies on other entities, such as AMSUsageSummaryDetail, indicating a relational structure that might involve various entities interacting with usage data stored in a database table named AMSUsageSummary.


file name is AmpServiceProviderChargeDetail.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/AmpServiceProviderChargeDetail.cs, 
filesummary is: This file defines the `AmpServiceProviderChargeDetail` class, which is part of the Eroms.Data.Atlantic namespace. It represents a database entity that models charge details associated with service providers. Key features include properties for various identifiers, a description, and an amount, with relationships established to account and service-related entities, indicating its integration with other parts of the system like accounts and transactions.


file name is PromotionChargePlan.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PromotionChargePlan.cs, 
filesummary is: The file PromotionChargePlan.cs is a model file representing the PromotionChargePlan entity within the Eroms Data Atlantic namespace. It defines the structure of the PromotionChargePlan, including properties such as PromotionChargePlanKey, ChargePlanKey, PromotionKey, and UsageChargeByUtilityKey, which relate to charge plans and promotions.

Key features include the entity's unique identifier and its relationships with other entities like ChargePlan and Promotion. This file is critical for data management within the codebase, particularly for handling promotions associated with charge plans in a specific context, likely supported by a database structure that uses these identifiers.


file name is PaymentPlan.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PaymentPlan.cs, 
filesummary is: The file defines a class `PaymentPlan` within the `Eroms.Data.Atlantic` namespace, which represents a payment plan entity in the context of a broader financial application. It encapsulates various properties such as payment status, date validity, creator information, and associated relationships with other entities like `AccountAggregator` and `RecurringPayment`, indicating its role in managing payment structures.

The `PaymentPlan` class is part of the database schema, mapping to a table named "PaymentPlan." It establishes several collections that relate to payments and account management, which could be critical for any application focused on financial transactions or account management systems. Dependencies include various payment types and aggregators, as well as potential integration with other systems via the `CompetitiveResellerKey` and `ReferenceCommissionPlanId` properties.


file name is TexpoContractSummaryPA_12_01.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/TexpoContractSummaryPA_12_01.cs, 
filesummary is: The file TexpoContractSummaryPA_12_01.cs defines a data model for handling contract summaries in the Eroms.Data.Atlantic namespace. It includes various properties such as customer type, effective date, contract term, and pricing structure, which represent attributes of a contract. This model would likely interact with a database containing contract data, facilitating data management and retrieval for business operations related to contracts in the Atlantic model.


file name is ChargePlanAuditReason.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ChargePlanAuditReason.cs, 
filesummary is: The file ChargePlanAuditReason.cs defines a data model for the entity ChargePlanAuditReason within the Eroms.Data.Atlantic namespace. It serves as a part of the database layer, representing a table that stores audit reasons related to charge plans. The model includes properties for a unique code and description, and establishes a relationship with the ChargePlanAudit entity, indicating dependencies on related audit data.


file name is NotificationTypeMapToDeliveryProfile.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationTypeMapToDeliveryProfile.cs, 
filesummary is: This file defines the data model for mapping notification types to delivery profiles within the Eroms application. It includes fields for keys, priorities, and timestamps, along with relationships to other entities like Account, Language, and NotificationDeliveryProfile. This model incorporates Entity Framework features, so it is likely to be used in database interactions related to notification management.


file name is PendingMoveOut.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/PendingMoveOut.cs, 
filesummary is: The file `PendingMoveOut.cs` defines a data model for handling pending move-out requests within the Eroms Atlantic system. It represents the structure of the `PendingMoveOut` table, which includes fields like `ServiceOrderKey`, `DisconnectCompletionDate`, and `MoveOutDate`, capturing key information about service disconnections. This model is closely linked to the `Service` and `ServiceOrder` entities, suggesting a dependency on these related classes for fully managing service transitions.


file name is aspnet_PersonalizationAllUsers.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/aspnet_PersonalizationAllUsers.cs, 
filesummary is: This file defines a partial class named aspnet_PersonalizationAllUsers, which is part of the Eroms.Data.Atlantic namespace. It outlines the structure for handling user personalization settings in an application, including properties such as PathId, PageSettings, and LastUpdatedDate. This class has a dependency on another entity, aspnet_Paths, indicating a relationship likely linked to user-specific page settings stored in a database.


file name is WorkProcessStatu.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/WorkProcessStatu.cs, 
filesummary is: The file is a C# class definition for `WorkProcessStatu`, part of the Eroms project under the AtlanticModel namespace. It represents a database entity with attributes that define properties like `Code` and `Description`, including data validation rules. This model likely relates to a database table where processes' status is stored, facilitating data transactions and operations within the application.


file name is ScottsPrepaidQuote.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ScottsPrepaidQuote.cs, 
filesummary is: The file ScottsPrepaidQuote.cs defines a data model for handling prepaid quotes in the Eroms Atlantic application. It captures various attributes related to rental properties, such as rate plans, dwelling types, and amenities, to facilitate generating quotes. This model connects to the ScottsPrepaidQuote database table and may interact with other business logic and database files related to property management or quoting systems.


file name is LegalEntity.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/LegalEntity.cs, 
filesummary is: The file LegalEntity.cs is part of the Eroms Atlantic data model, specifically dealing with the representation of legal entities within the system. It defines the LegalEntity class which includes properties for a unique identifier and a required name. This file serves as a data structure, which may interact with databases to manage legal entity information, likely used in conjunction with Entity Framework for data operations.


file name is UserHistory.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/UserHistory.cs, 
filesummary is: The file `UserHistory.cs` defines a data model class that represents user activity records within the Eroms application. This class includes properties for the username, action type, action timestamp, and a primary key for replication purposes. It relies on Entity Framework annotations for table mapping, indicating its use in a database context, likely interacting with a user history table to track user actions within the system.


file name is ServiceOrderResponseType.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/ServiceOrderResponseType.cs, 
filesummary is: The file defines a class for managing the details of service order response types within the Eroms Atlantic codebase. It outlines properties for a response type, such as Code and Description, and establishes a relationship with a collection of ServiceOrders. This class is a part of the data layer, likely tied to a database table that manages service order responses, indicating it is essential for handling the core functionality of service order processing in the application.


file name is NotificationDeliveryTemplateMap.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/NotificationDeliveryTemplateMap.cs, 
filesummary is: The file NotificationDeliveryTemplateMap.cs defines a partial class that represents the mapping for notification delivery templates in a data context. It contains properties that capture details such as notification types, delivery templates in XML format, and metadata for tracking creation and updates.

Key features include the management of notification delivery templates with attributes indicating their structure and requirements. The class is linked to a database table, indicating that it interacts with a NotificationType class, suggesting a relationship with other data entities in the system.


file name is CommunicationDirection.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/AtlanticCodeFirst/CommunicationDirection.cs, 
filesummary is: The file CommunicationDirection.cs is part of the Eroms Data Atlantic namespace and defines a model class for handling communication directions within a database context. This class outlines properties like a unique code and a description, while also establishing a relationship with a collection of Note objects. It is likely a crucial part of the application's data layer, interacting with a database table named CommunicationDirection, which may be used in various features related to messaging or communication workflows.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Eroms.AtlanticModel/Properties/AssemblyInfo.cs, 
filesummary is: The file AssemblyInfo.cs is a configuration file that contains metadata about the Eroms.AtlanticModel assembly. It defines essential attributes like title, product name, and versioning information. This file does not contain any business logic; it primarily serves to provide information for the assembly's deployment and integration.


file name is ZipPlus4Detector.cs, 
file path is: Eroms_Sorted/Utility/ZipPlusFourDetector/ZipPlus4Detector.cs, 
filesummary is: This file is part of the utility features within the EPSolutions Empower codebase, specifically focused on handling ZIP+4 codes for address verification. The core functionality revolves around invoking the FixServiceLocationsZipPlusFours method from the UspsAddressFinder class, which likely addresses ZIP code formatting or correction issues in address data. It implies a dependency on the UspsAddressFinder class and access to associated business objects to ensure accurate address handling.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Utility/ZipPlusFourDetector/Properties/AssemblyInfo.cs, 
filesummary is: This file is an AssemblyInfo.cs file that contains metadata about the ZipPlus4Detector assembly. It specifies attributes such as the assembly title, description, and versioning information, which are essential for identifying and managing the assembly within a larger codebase. This file does not contain any core business logic but is integral to the assembly's configuration.


file name is Program.cs, 
file path is: Eroms_Sorted/Utility/NaesbAdministrator/Program.cs, 
filesummary is: This file is the main entry point for a Windows Forms application named NaesbAdministrator within the Empower Utility namespace. It initializes the application by enabling visual styles and starts the main form, FormMain. This program likely serves as a user interface for managing tasks related to NAESB (North American Energy Standards Board), although specific business features are not detailed in this file.


file name is FormMain.Designer.cs, 
file path is: Eroms_Sorted/Utility/NaesbAdministrator/FormMain.Designer.cs, 
filesummary is: The file FormMain.Designer.cs is a part of the user interface for the Naesb Administrator application within the larger EPSolutions.Empower.Utility codebase. It primarily features the design structure of a Windows Form, defining controls such as tabs, buttons, text fields, and labels.

The interface includes tabs for managing "Us" and "Them" configurations, as well as functionality for outbound files. It encompasses a variety of user inputs, including GPG settings, administrator information, and file management. The file lays out support for the application's functionality but does not include core business logic, making it essential for visual organization and user interaction rather than processing actions or data directly. This file functions collaboratively with event handlers and back-end logic found in other files of the codebase for full feature implementation.


file name is FormMain.cs, 
file path is: Eroms_Sorted/Utility/NaesbAdministrator/FormMain.cs, 
filesummary is: The file FormMain.cs is a Windows Forms application component that provides a graphical user interface for managing U.S. and Them administrative functions in the context of the NAESB (North American Energy Standards Board) administration. It facilitates the selection, creation, and modification of U.S. entities and Them entities, which are integral to processing outbound files. The application interacts with a database to perform CRUD operations, leveraging a collection of utilities from EPSolutions' Empower Core libraries for data handling and email notifications.

Key Features:
1. User Management: The UI allows users to create and edit U.S. and Them entities, managing their respective configurations such as names, common codes, and file directories.
2. Outbound File Management: Provides capabilities to handle outbound file encryption and sending, including features to encrypt files, send them, and track the status of each operation.
3. Email Notifications: Integrates SMTP functionality to send escalation reports regarding outbound files.

Dependencies:
- Us and Them classes for managing collections of users and themes.
- Database access for executing stored procedures like emPower_GetUss and emPower_GetOutboundFilesByCommonCodes for data retrieval.
- External libraries for data handling and SMTP client functionality.


file name is Settings.Designer.cs, 
file path is: Eroms_Sorted/Utility/NaesbAdministrator/Properties/Settings.Designer.cs, 
filesummary is: The file is an auto-generated settings file typically used for managing application configuration within a .NET framework project. It provides a centralized location for application settings, ensuring that configurations remain consistent throughout the application.

This file does not contain any core business logic. It simply implements a settings manager that allows the application to access its configuration data consistently. The settings may relate to user preferences or application settings but do not interact with any specific features or dependencies directly.


file name is Resources.Designer.cs, 
file path is: Eroms_Sorted/Utility/NaesbAdministrator/Properties/Resources.Designer.cs, 
filesummary is: This file is a generated resource manager class used for handling localized strings within the NaesbAdministrator section of the EPSolutions Empower utility. It facilitates access to resources like text and images based on the current culture settings. As a boilerplate file, it does not contain business logic but provides essential support for resource management in the application.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Utility/NaesbAdministrator/Properties/AssemblyInfo.cs, 
filesummary is: The file is an AssemblyInfo.cs file, which contains metadata about the Naesb Administrator assembly. It sets attributes such as the assembly title, description, and version information. This file is crucial for defining how the assembly interacts with other components but does not contain the core business logic of the application.


file name is AccountTypesAttribute.cs, 
file path is: Eroms_Sorted/Utility/DataAnnotations/AccountTypesAttribute.cs, 
filesummary is: This file defines a custom attribute named AccountTypesAttribute used within the context of the Empower application. It is designed to hold an array of account types, which can be utilized for validation purposes, likely to enforce rules related to account categories across the application. This file may relate to other parts of the system that manage user accounts or perform validation checks based on the specified account types.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Utility/DataAnnotations/Properties/AssemblyInfo.cs, 
filesummary is: This file is an assembly information file for a .NET project, specifically for the EPSolutions.Empower.Utility.DataAnnotations library. It contains metadata about the assembly such as its title, version, and copyright information. This file helps define the identity of the assembly within the larger codebase and is essential for deployment and version control, but does not contain any business logic or key features.


file name is Program.cs, 
file path is: Eroms_Sorted/Utility/VersionEditor/Program.cs, 
filesummary is: This file is a utility program that manages versioning for an assembly in the VersionEditor namespace. It reads and modifies the version information in the VersionInfo.cs file based on command-line arguments that indicate which part of the version (major, minor, build, revision) to increment. The program relies on the correct path to the Deployment directory to function properly.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Utility/VersionEditor/Properties/AssemblyInfo.cs, 
filesummary is: The file AssemblyInfo.cs is a configuration file that contains metadata about the VersionEditor assembly. It holds attributes that define the assembly's title, description, and versioning details. This file is essential for managing assembly identity, particularly when integrating with other .NET components.


file name is NaesbService.cs, 
file path is: Eroms_Sorted/Services/NaesbService/NaesbService.cs, 
filesummary is: The NaesbService.cs file is part of a service that implements the process of uploading NAESB EDI files. It is structured to manage file encryption, sending, and error escalation, providing logging capabilities and handling configuration via app settings. This service relies on external settings for execution intervals, file paths, and email notifications, crucial for its operational environment.

The core features include:
1. Service Initialization and Configuration: Initializes timers and checks paths for log files, GPG executable, and keyring.
2. Processing Logic: Contains methods to encrypt, send files, and handle error escalation.
3. Logging Mechanism: Logs operational activities and errors to track the service's performance and issues.

Dependencies include configuration settings for the file paths, methods for interacting with the database and DataStore for market transfers, and support for email notifications via SMTP.


file name is Program.cs, 
file path is: Eroms_Sorted/Services/NaesbService/Program.cs, 
filesummary is: This file, Program.cs, serves as the entry point for the NaesbService application within the EPSolutions.Empower.Services namespace. It is responsible for initializing and running the service, specifically the NaesbService class. This file does not contain core business logic but rather provides a setup for the service to operate within a Windows service framework.


file name is ProjectInstaller.cs, 
file path is: Eroms_Sorted/Services/NaesbService/ProjectInstaller.cs, 
filesummary is: This file is part of the Eroms Sorted Service components and is focused on the installation process of the NaesbService. It defines a ProjectInstaller class that inherits from Installer, facilitating the installation of the service on a system. It includes an event handler for after the installation process, but does not contain business logic.


file name is NaesbService.Designer.cs, 
file path is: Eroms_Sorted/Services/NaesbService/NaesbService.Designer.cs, 
filesummary is: This file is a designer code file for the NaesbService component in a service-oriented application. It primarily serves as a support structure for the service, not containing core business logic, but rather defining basic component initialization and disposal. Its purpose is to integrate with visual design tools and does not directly depend on other components or databases.


file name is ProjectInstaller.Designer.cs, 
file path is: Eroms_Sorted/Services/NaesbService/ProjectInstaller.Designer.cs, 
filesummary is: This file is a designer part of a service installer class for the NaesbService in the EPSolutions.Empower namespace. It primarily facilitates the installation and configuration of a Windows service, dealing with its lifecycle. The file does not contain core business logic but serves a critical role in setting up service components.


file name is Program.cs, 
file path is: Eroms_Sorted/Services/NaesbService/ConsoleApplication1/Program.cs, 
filesummary is: The file Program.cs contains the main entry point for a console application designed to manage outbound files for encryption and transmission. It involves loading files from a data store, processing each file through encryption, saving it within a database transaction, and sending the encrypted files via an EDI (Electronic Data Interchange) sender.

Key features include:
- Loading a collection of outbound files using a stored procedure.
- Encrypting each outbound file and saving it to a database within a transaction.
- Sending the processed files using the EDI protocol.

Dependencies:
- The application relies on external libraries for handling data operations and encryption.
- It interacts with a data store identified as MarketTransfer and uses a stored procedure called emPower_GetOutboundFilesToEncrypt.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Services/NaesbService/ConsoleApplication1/Properties/AssemblyInfo.cs, 
filesummary is: The file AssemblyInfo.cs contains assembly metadata for a .NET application named ConsoleApplication1. It defines attributes such as title, version, and COM visibility, which are used for configuration purposes in the context of .NET assemblies. This file does not contain core business logic but serves as a boilerplate for assembly details.


file name is EPSolutions.Empower.Services.NaesbService.csproj.FileListAbsolute.txt, 
file path is: Eroms_Sorted/Services/NaesbService/obj/Release/EPSolutions.Empower.Services.NaesbService.csproj.FileListAbsolute.txt, 
filesummary is: The file is a list of absolute paths to various components associated with the NaesbService project, including executables, libraries, configuration files, and debug symbols. It serves as an output generated during the build process, outlining the necessary artifacts for the NaesbService service.

Since this file contains paths for compiled and configuration files rather than core business logic, the summary is: 
This file lists the absolute paths of output artifacts for the NaesbService project, including executables and required libraries. It assists in managing the project's build dependencies and file organization. Overall, it plays a critical role in the build process but does not contain business logic.


file name is .NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbService/obj/Release/.NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
filesummary is: This file is a boilerplate configuration file that specifies the target framework for a .NET application. It indicates that the project is built using .NET Framework version 4.7.2. This file does not contain any business logic and is primarily used for compiling the project correctly within the specified framework.


file name is .NETFramework,Version=v4.8.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbService/obj/Release/.NETFramework,Version=v4.8.AssemblyAttributes.cs, 
filesummary is: This file is a generated assembly attributes file for a .NET Framework project, specifically targeting version 4.8. It serves as a configuration file, defining the target framework for the application. As such, it does not contain core business logic or functional code, but rather supports the larger codebase configuration by specifying compatibility with the .NET Framework version.


file name is .NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbService/obj/Release/.NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
filesummary is: This file is an auto-generated assembly attributes file for a .NET Framework project targeting version 4.8.1. It defines the target framework information for the project, which helps the build system understand the environment in which the code is intended to run. As a configuration file, it does not contain any core business logic or features.


file name is EPSolutions.Empower.Services.NaesbService.csproj.FileListAbsolute.txt, 
file path is: Eroms_Sorted/Services/NaesbService/obj/Debug/EPSolutions.Empower.Services.NaesbService.csproj.FileListAbsolute.txt, 
filesummary is: This file is a listing of absolute paths for various files associated with the NaesbService project within a larger codebase. It is primarily related to the build and debug outputs of the project, serving as a reference for the compiled executables, configuration files, and dependencies.

The file does not contain core business logic, but provides a concise overview of file locations generated during the build process of the NaesbService project, including essential dependencies such as libraries for Azure storage and JSON processing. It helps in identifying resource files, configuration, and binaries necessary for the service operation.


file name is .NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbService/obj/Debug/.NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
filesummary is: This file is an autogenerated assembly attributes file for a .NET Framework project. It specifies that the project targets .NET Framework version 4.7.2. It primarily serves as a configuration file and does not contain any business or core logic.


file name is .NETFramework,Version=v4.8.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbService/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs, 
filesummary is: This file is an autogenerated assembly attributes file for a .NET Framework project. It specifies that the target framework for the application is .NET Framework 4.8. This file does not contain any core business logic or functionality; it is primarily used for framework configuration purposes.


file name is .NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbService/obj/Debug/.NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
filesummary is: This file is an autogenerated assembly attributes file for a .NET Framework project, specifically targeting version 4.8.1. It serves to inform the runtime about the version of the framework being used, thereby facilitating proper execution of the application within that context. As a boilerplate file, it does not contain any business logic or core functionality.


file name is Microsoft.WindowsAzure.Storage.xml, 
file path is: Eroms_Sorted/Services/NaesbService/bin/Release/Microsoft.WindowsAzure.Storage.xml, 
filesummary is: The file Microsoft.WindowsAzure.Storage.xml is an XML documentation file that describes the members, methods, and properties associated with the Microsoft Azure Storage library, specifically focused on functionality related to Blobs and Tables. This documentation facilitates the understanding of the library's various functionalities, such as data upload, download, and management of blob properties.

Key Features include:
- **Blob Management:** Definitions for handling different types of blobs (e.g., block, append, page) including upload, download, and delete operations.
- **Encryption Support:** Features for managing blob encryption keys and their rotation.
- **Asynchronous Operations:** Methods for performing non-blocking I/O operations to improve application performance.
- **Metadata and Properties:** Operations for fetching and updating blob metadata and properties.
  
Dependencies: This library interacts with Azure storage services and requires Azure Storage Account credentials and blobs to function correctly. It relies on various types and classes defined within the Azure SDK.


file name is Newtonsoft.Json.xml, 
file path is: Eroms_Sorted/Services/NaesbService/bin/Release/Newtonsoft.Json.xml, 
filesummary is: This file is an XML documentation file for the Newtonsoft.Json library, specifically outlining its classes, methods, properties, and exceptions. It is related to a larger codebase as it provides essential documentation for developers using this library to perform JSON serialization and deserialization in their applications.

The file contains no core business or code logic, merely serving as a reference guide for the Newtonsoft.Json API. It lists various functionalities like reading/writing JSON data, handling different data types, and managing JSON structure while providing an overview of the options available for developers.


file name is Microsoft.WindowsAzure.Storage.xml, 
file path is: Eroms_Sorted/Services/NaesbService/bin/Debug/Microsoft.WindowsAzure.Storage.xml, 
filesummary is: The file `Microsoft.WindowsAzure.Storage.xml` is an XML documentation file that provides structured documentation about the Microsoft Azure Storage library. It contains summaries, remarks, and details about various types, methods, and properties within the library, which is essential for developers using the Azure Storage services.

Key Features:
- Defines entities for managing Azure Storage, including blobs, tables, and queues.
- Documents core classes like `CloudBlob`, `CloudTable`, and `CloudQueue` with their methods for handling typical operations like reading, writing, and deleting storage entities.
- Includes metadata for each class and member, enhancing code maintainability and usability via intellisense in IDEs.

The integration of these types into a larger codebase would typically depend on connections with Azure services for data storage, retrieval, and management, necessitating knowledge of Azure credentials and service endpoints.


file name is Newtonsoft.Json.xml, 
file path is: Eroms_Sorted/Services/NaesbService/bin/Debug/Newtonsoft.Json.xml, 
filesummary is: This file, `Newtonsoft.Json.xml`, is an XML documentation file for the Newtonsoft.Json library, commonly known as Json.NET. It provides detailed documentation on various classes, properties, methods, and functionalities related to JSON serialization and deserialization in .NET.

The file primarily consists of XML summaries, defining the purpose and usage of classes related to the handling of JSON data. It includes details for classes such as `JsonSerializer`, `JsonReader`, and `JsonWriter`, as well as various serialization settings and converters that work with JSON and .NET types.

Overall, this XML documentation serves as a reference for developers using the Newtonsoft.Json library, detailing how to effectively incorporate its features into their .NET applications.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Services/NaesbService/Properties/AssemblyInfo.cs, 
filesummary is: The file AssemblyInfo.cs is a configuration file that contains metadata about the NAESB Service assembly. It defines attributes such as the assembly title, description, COM visibility, and version information. This file is essential for assembly identification and does not contain any core business logic.


file name is DistributionLossFactorExtractor.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/DistributionLossFactorExtractor.cs, 
filesummary is: The file DistributionLossFactorExtractor.cs is a class within the EPSolutions.Empower.Services.MarketTransferProcessor namespace that specializes in extracting Distribution Loss Factor (DLF) data from CSV files into corresponding database tables. It inherits from the MarketTransferExtractor class and handles the population of two key tables: 'DlfFile' for file metadata and 'DlfFileData' for detailed DLF entries. Dependencies include Microsoft Excel interop for file manipulation and the DistributionLossFactorFile and DistributionLossFactorFileData objects for managing DLF data records in the database.


file name is MarketTransferEngine.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketTransferEngine.cs, 
filesummary is: The MarketTransferEngine.cs file contains the core logic for the Market Transfer Processor, which is part of the EPSolutions Empower services. This engine manages the startup, execution, and cleanup of operations related to collecting and extracting market data from various sources (e.g., Distribution Loss Factor, Transmission Loss Factor). It depends on Excel for data extraction and requires integration with the MarketWarehouse database and various data collector/extractor classes to function effectively.


file name is MarketTransferExtractor.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketTransferExtractor.cs, 
filesummary is: The file MarketTransferExtractor.cs is a core component of the MarketTransferProcessor service within the EPSolutions Empower framework. It defines the MarketTransferExtractor class, which is responsible for extracting data from various file formats and populating a database with that data. The extraction process is initiated through the ExtractFromFilesToDatabase method, which handles the reading of files, error logging, and delegates the actual data population to a subclass method for specific tables.

Key features include:
- The use of Excel interop for file handling.
- Logging of extraction processes and error management.
- Extension points for specific file types and database tables through subclassing.

This class relies on utility functions for file manipulation and logging, possibly interacting with a database structure, though the database specifics are handled in the subclasses.


file name is ESIIDCollector.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/ESIIDCollector.cs, 
filesummary is: The EsiIdCollector.cs file defines a class for collecting ESIID data from the ERCOT market, extending from a base class called MarketTransferCollector. It includes methods to download files, extract dates, and construct filenames from the market data. The class utilizes web requests to retrieve data from specific URIs and depends on a FileTransferManager for file list retrieval, making it crucial for data processing in the overall market transfer application.


file name is MarketTransferService.Designer.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketTransferService.Designer.cs, 
filesummary is: This file, MarketTransferService.Designer.cs, is a designer-generated code file for the Market Transfer Processor service. It primarily contains boilerplate code related to the service's initialization and resource management. The file is essential for setting up the service environment but does not include any core business logic or features.


file name is LoadProfileCollector.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/LoadProfileCollector.cs, 
filesummary is: The file LoadProfileCollector.cs is a core component of the MarketTransferProcessor service within the EPSolutions Empower application. It defines a LoadProfileCollector class responsible for gathering Load Profile data from the ERCOT market, extending functionality from the MarketTransferCollector class. The class includes a method to download a list of files from a specified market source URL, managing exceptions and logging errors as necessary, indicating its dependency on the FileTransferManager and utility functions for logging.


file name is Consts.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/Consts.cs, 
filesummary is: The file is a constants definition file for the Market Transfer service within the Empower application. It provides string constants used for identifying and describing the service. The constants may be utilized throughout the service implementation for consistency, setting up registry key values, and ensuring proper branding and description of the service functionality.


file name is BackCastedLoadProfileExtractor.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/BackCastedLoadProfileExtractor.cs, 
filesummary is: The file BackCastedLoadProfileExtractor.cs is a core component of the MarketTransferProcessor service, which likely plays a crucial role in extracting and populating energy load profiles from Excel files into a database. This class extends MarketTransferExtractor and provides essential functionality to handle data extraction, transformation, and storage from specific zip files following the ERCOT naming convention. 

Key features include:
- It connects to an Excel file, extracts data from specified sheets, and saves this data to a database entity called BCLPFileData.
- There are dependencies on specific database tables such as BCLPFiles, BCLPFileDatas, and BCLPResources, which are utilized in checking existing entries and storing new data.

This file demonstrates significant business logic related to the energy market data processing and requires an understanding of data management within an energy-focused database schema.


file name is MarketCredentials.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketCredentials.cs, 
filesummary is: The file MarketCredentials.cs defines a class that serves as a data model for the "MarketCredentials" table in a database, facilitating data storage and retrieval. It contains properties that manage the credentials and settings necessary for market data access, such as user ID, password, and folder paths. This class relies on the EmpowerBusinessObject base class and interacts with the MarketWarehouse data store, which likely involves dependencies on specific database infrastructure related to market operations.


file name is MarketLog.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketLog.cs, 
filesummary is: The MarketLog.cs file defines a class that manages interaction with the MarketLog database table, specifically for storing and retrieving market log entries. It includes properties like MarketLogKey, MarketIdentifier, LogDate, and LogDescription, which are essential for keeping track of various log details related to market activity. This class likely plays an essential role in the overall functionality of a system focused on market data processing, depending on the Core and BusinessObjects libraries for foundational operations.


file name is TransmissionLossFactorCollector.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/TransmissionLossFactorCollector.cs, 
filesummary is: This file, TransmissionLossFactorCollector.cs, is a C# class that extends the functionality of a market data collector within the EPSolutions Empower software. It specifically handles tasks related to gathering Transmission Loss Factor data from the ERCOT market.

The core feature of this class is its ability to download a list of market data files from a specified URL. It overrides a method from its parent class, MarketTransferCollector, to implement this functionality. The class also integrates with a FileTransferManager to retrieve the file data and performs error logging via the Utility class in case of exceptions.


file name is MarketCredentialsCollection.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketCredentialsCollection.cs, 
filesummary is: The MarketCredentialsCollection.cs file defines a collection class that manages MarketCredentials objects, facilitating their retrieval and storage in a database context. It supports operations related to the MarketCredentials table and allows the creation of new instances of MarketCredentials. This class implements functionalities to determine the type of the objects it contains and is dependent on the IEmpowerObject interface and the MarketCredentials class for its core operations.


file name is MarketClearingPriceEnergyExtractor.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketClearingPriceEnergyExtractor.cs, 
filesummary is: The file MarketClearingPriceEnergyExtractor.cs is part of the EPSolutions.Empower project and serves as a key component for extracting Market Clearing Price for Energy (MCPE) data from Excel files into a database. It inherits from the MarketTransferExtractor class and primarily deals with file handling, data processing, and database interactions. 

This extractor processes Excel files named with a specific format, extracting relevant market data and storing it in database tables such as 'MCPEFile' and 'MCPEFileData'. It uses several utility functions and interacts with Excel to pull data, log messages, and handle exceptions effectively. The functionality that relies on external dependencies includes the use of the Microsoft Office Interop for Excel operations and the Empower utilities for logging and data conversion.


file name is ESIIDExtractor.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/ESIIDExtractor.cs, 
filesummary is: The file ESIIDExtractor.cs is a service class that focuses on extracting ESIID data from files and populating it into database tables, particularly for a market transfer process. It extends the MarketTransferExtractor class and features methods for file handling, data extraction, and logging. This class relies on external libraries and assumes the presence of certain database schema, specifically the ESIIDFile and ServiceLocationLookup tables, for successfully saving the extracted data.

Key Features:
1. Extracts ESIID data from ZIP files, which are unpacked and processed for storage in a database.
2. Contains methods to populate relevant tables, handling specific fields such as service locations and addresses.
3. Utilizes logging for tracking extraction processes, and error handling for robust operation during data manipulation.


file name is LoadProfileExtractor.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/LoadProfileExtractor.cs, 
filesummary is: The LoadProfileExtractor.cs file is a part of the MarketTransferProcessor service within the EPSolutions.Empower codebase, focused on extracting Load Profile data from CSV files and populating it into database tables. It extends functionality from a base extractor class to handle various specific extraction tasks involving Excel interop for data handling.

Key features include methods for populating LoadProfile data into the 'LpFile' and 'LpFileData' database tables, along with error handling and logging for unsuccessful operations. This depends on the LoadProfileFile and LoadProfileFileData objects, with the latter requiring dynamic property assignment based on data extracted from Excel worksheets, indicating its importance in the data processing pipeline.


file name is MarketTransferService.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketTransferService.cs, 
filesummary is: The file MarketTransferService.cs is a service implementation that manages market transfers as part of the EPSolutions software. It utilizes scheduled tasks to run processes related to market data handling at configurable intervals. The service relies on the MarketTransferEngine for its core functionality and utilizes system timers, configurations, and logging mechanisms for operation and error handling. 

Key Features:
- Implements Windows Service with controls for starting, stopping, pausing, and resuming processes.
- Configures a timer for regular processing intervals, which can be set through configuration files with an option for daily execution.
- Logs various service events for monitoring and debugging.

Dependencies:
- It depends on a configuration setting for the polling interval and whether to run daily, which impacts its operational timing.
- Relies on the MarketTransferEngine class for executing market transfer logic.


file name is Utility.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/Utility.cs, 
filesummary is: The file Utility.cs is part of the MarketTransferProcessor service in the EPSolutions Empower project. It provides utility functions for common operations such as converting text to various data types (decimal, DateTime, int), validating file existence, manipulating date/time strings, retrieving files from a directory, and logging messages related to market data.

Key functions include conversions for numeric and date values, file system interactions, and specific logging functionality that appears to involve saving entries to a database, indicating a dependency on a MarketLog class for logging purposes. Overall, this file supports essential backend processes for the MarketTransferProcessor service.


file name is MarketClearingPriceEnergyCollector.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketClearingPriceEnergyCollector.cs, 
filesummary is: The file MarketClearingPriceEnergyCollector.cs is an implementation of a service class responsible for collecting Market Clearing Price for Energy (MCPE) data from the ERCOT market. It extends a base collector class and provides methods to initiate a data collection process, download files, and log events during execution. The class relies on various utilities for logging and file management and interacts with a data store to determine the date range for data retrieval.

Key features include:
- Collection of MCPE data over a specified date range.
- Downloading files from a specified URL and saving them to a local folder.
- Error handling and logging for successful and failed operations.

Dependencies include the base class MarketTransferCollector and the use of utilities and data store methods for date management and file handling.


file name is ExcelManager.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/ExcelManager.cs, 
filesummary is: The file ExcelManager.cs is part of the MarketTransferProcessor service within the EPSolutions Empower codebase. It serves as a utility for managing Excel application instances, including functions to start and quit Excel, delete generated files, and interact with Excel workbooks. This functionality provides essential support for generating and manipulating Excel data, which is likely related to market transfer processes in the application. The file uses Microsoft.Office.Interop.Excel, indicating a dependency on Microsoft Excel for its operations.


file name is MarketDataSource.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketDataSource.cs, 
filesummary is: The file MarketDataSource.cs defines a class that handles database interactions for the MarketDataSource table. It includes properties for managing market data identifiers, URLs for downloading data, and configurations for data storage. This class forms the foundation for managing market-related data transfer activities, likely interacting with databases and requiring dependencies on other components within the Overall Market Transfer Processor system.


file name is MarketTransferProcessor.XML, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketTransferProcessor.XML, 
filesummary is: The file is an XML documentation file for the MarketTransferProcessor service, detailing various components, classes, and methods related to the extraction and processing of market data. It serves as documentation for developers, outlining functionality relevant to data extraction from files to database tables and is part of a larger system interacting with market data.

The MarketTransferProcessor includes several key features:
1. **Data Extraction and Handling**: Contains classes and methods for extracting Transmission Loss Factors, Distribution Loss Factors, Load Profiles, and various market data from files, primarily leveraging Excel and CSV formats.
2. **Data Collection**: Facilitates the collection of data from various sources like ERCOT and ONCOR, providing methods for downloading and processing this data.
3. **Database Integration**: Interfaces with various database tables (e.g., TlfFile, DlfFile, LpFile) to store and load data effectively, indicated by attributes and methods managing these interactions.

Dependencies noted include the Microsoft.Office.Interop.Excel library for handling Excel files and multiple database tables for storing various types of market data.


file name is MarketDataSourceCollection.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketDataSourceCollection.cs, 
filesummary is: The file MarketDataSourceCollection.cs defines a collection class that manages a group of MarketDataSource objects used for database operations related to market data. It enables the instantiation of new MarketDataSource instances and identifies the type of objects it collects. This class relates to the broader system by supporting data retrieval from the MarketDataSource table in the database, making it essential for managing market data within the application.


file name is MarketTransferProcessInstaller.Designer.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketTransferProcessInstaller.Designer.cs, 
filesummary is: The file is a designer file for the MarketTransferProcessInstaller class in the EPSolutions Empower project, serving as part of the Windows service installation process. It contains boilerplate code generated by the designer tool, including methods for resource management and initialization of components. This file typically does not implement any core business logic, focusing instead on supporting the functionality of the service installer.


file name is BackCastedLoadProfileCollector.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/BackCastedLoadProfileCollector.cs, 
filesummary is: The file is a C# class, part of a service module in a larger codebase that focuses on market data collection, specifically for ERCOT (Electric Reliability Council of Texas). It extends the functionality of a base collector to download load profile data, managing data retrieval and storage operations.

The class BackCastedLoadProfileCollector inherits from MarketTransferCollector and includes methods for downloading data files from a specified URL based on a date range. It interacts with the MarketEntities database to log the downloaded files, indicating dependencies on the BCLPFiles table for storing file paths and timestamps.


file name is MarketTransferObject.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketTransferObject.cs, 
filesummary is: The file MarketTransferObject.cs is part of the MarketTransferProcessor service within the EPSolutions Empower framework. It serves as a foundational class that provides functionality for managing market transfer data, including checking if data files exist, constructing filenames based on specific rules, extracting dates, and handling file unzipping.

Key features include:
- Management of record counts and availability dates for market data.
- Methodologies for verifying if specific market files are already collected, which involve database queries to a market warehouse.
- Utility functions for filename creation based on date formatting.

Dependencies include interactions with a database (through DataHelper) to check file existence, and it employs a zip library for file decompression.


file name is MarketTransferCollector.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketTransferCollector.cs, 
filesummary is: The file MarketTransferCollector.cs contains a class responsible for collecting market data from ERCOT (Electric Reliability Council of Texas). It provides methods to initiate data collection, handle file downloads from specified URLs, and manage credentials for server access. Dependencies include utility functions for logging and file management, along with external file transfer capabilities.

Key Features:
- CollectDataToFiles: Initiates the collection of market data, downloading files if they haven't been obtained previously.
- DownloadFile: A method to download a specific file based on its URL and save it locally.
- SetCredentials: Prepares server access credentials for downloading data.

The file interacts with the FileTransferManager for file downloads and leverages utility classes for logging and file validation.


file name is MarketTransferProcessor.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketTransferProcessor.cs, 
filesummary is: The file MarketTransferProcessor.cs defines a service processor for handling market transfers within the EPSolutions Empower application. It includes installation and uninstallation logic for the service, along with a console mode to run the service interactively. The core functionality relies on the MarketTransferEngine class and interacts with the Windows registry for service name handling, making it critical for service management and operation.


file name is TransmissionLossFactorExtractor.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/TransmissionLossFactorExtractor.cs, 
filesummary is: The file TransmissionLossFactorExtractor.cs is a core component of the MarketTransferProcessor service, specifically designed to extract Transmission Loss Factor data from Excel files and populate it into the database. It defines the TransmissionLossFactorExtractor class, which has methods for reading from .CSV files and inserting this data into the appropriate database tables, including 'TlfFile' and 'TlfFileData'. It relies on the Microsoft Office Interop Excel library for handling Excel files and has dependencies on other classes such as TransmissionLossFactorFile and TransmissionLossFactorFileData for data representation.


file name is DistributionLossFactorCollector.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/DistributionLossFactorCollector.cs, 
filesummary is: The file DistributionLossFactorCollector.cs is part of a service layer that focuses on collecting data related to Distribution Loss Factors from the market, specifically for ERCOT. It extends the MarketTransferCollector class, indicating that it is part of a larger system for market data management.

The main feature of this class is the DownloadListOfFiles method, which retrieves a list of files from a specified market source URL and returns them in a structured format. This functionality depends on the FileTransferManager and utilizes error handling for robustness, indicating it is tasked with ensuring accuracy and reliability in data collection.


file name is MarketTransferProcessInstaller.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/MarketTransferProcessInstaller.cs, 
filesummary is: The file MarketTransferProcessInstaller.cs is a code file that serves as an installer for the Market Transfer Process service within the EPSolutions Empower application. It establishes the setup routine for this service, allowing it to be installed properly on a system. This file likely depends on installation components and configurations defined elsewhere in the codebase to ensure the service operates as intended in the overall application architecture.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Services/MarketTransferProcessor/Properties/AssemblyInfo.cs, 
filesummary is: The file AssemblyInfo.cs is an assembly metadata file that provides configuration details about the .NET assembly. It is a boilerplate code file that defines attributes for the assembly, such as its visibility to COM components and compliance with the Common Language Specification. This file plays a crucial role in the overall project but does not contain core business logic.


file name is WatchDogService.Designer.cs, 
file path is: Eroms_Sorted/Services/WatchDog/WatchDogService.Designer.cs, 
filesummary is: This file is a designer-generated code file for the WatchDog service in the EPSolutions.Empower project. It primarily deals with the initialization and resource management of the service component. The file includes methods for disposing of resources and registering the service in the Windows Registry, specifically under local machine settings.


file name is WatchDogService.cs, 
file path is: Eroms_Sorted/Services/WatchDog/WatchDogService.cs, 
filesummary is: The file WatchDogService.cs implements a Windows Service that monitors and manages other services, specifically the Empower services. Its core functionality includes starting and stopping these services as needed. Dependencies within the code include the WatchDogEmpower class, which handles launching and stopping service hosts, indicating a reliance on this component for proper service management.


file name is WatchDogServiceInstaller.cs, 
file path is: Eroms_Sorted/Services/WatchDog/WatchDogServiceInstaller.cs, 
filesummary is: The file WatchDogServiceInstaller.cs is a configuration file for installing the WatchDog service within the EPSolutions Empower application. It facilitates the installation process of the service by implementing necessary components from the System.Configuration.Install namespace. This file does not contain core business logic, as it primarily focuses on the installation mechanics of the service.


file name is WcfServiceHostWrapper.cs, 
file path is: Eroms_Sorted/Services/WatchDog/WcfServiceHostWrapper.cs, 
filesummary is: The file WcfServiceHostWrapper.cs is part of a service in the Empower solution that manages a WCF service host, launching it with specified options for communication via MSMQ. It encapsulates functionality like process execution, command line building, and exception handling related to WCF services.

The core features include:
- Management of WCF service hosting with configurable parameters.
- Handling verbosity levels for output.
- Controlled execution of the service host with options for window display and process priority.

Dependencies likely include the WCF service configuration and MSMQ for messaging processes, as well as any specific executables defined in the parameters like binexe, which points to the WCF service host application.


file name is WatchDogServiceInstaller.Designer.cs, 
file path is: Eroms_Sorted/Services/WatchDog/WatchDogServiceInstaller.Designer.cs, 
filesummary is: This file is a partial class designed for the installation of the WatchDog service within a larger service management context. It configures components required for the service's installation and does not contain business logic. 

The WatchDogServiceInstaller is responsible for setting up service parameters like display name, service name, and startup type. It interacts with the Windows registry to retrieve installation keys, indicating it may correspond with other configuration files or constants defined elsewhere in the codebase.


file name is ProcessAsUser.cs, 
file path is: Eroms_Sorted/Services/WatchDog/ProcessAsUser.cs, 
filesummary is: The ProcessAsUser.cs file is part of the WatchDog service in the EPSolutions.Empower namespace, focusing on executing a process under a specific user's context. This class utilizes Windows API functions to handle user authentication and process creation, crucial for applications that require elevated privileges or need to run tasks in a different user session.

The core functionality includes:
- A method to log in a user and launch a process under that user’s context.
- It manages Windows security attributes to allow the process interaction with the desktop.
- Dependencies include various Windows APIs (advapi32.dll, Kernel32.dll) and specific Windows structures for security and process management.

This functionality is essential for scenarios where a service needs to interact with user sessions, particularly in environments with different user context restrictions.


file name is WatchDogEmpowerCheck.cs, 
file path is: Eroms_Sorted/Services/WatchDog/WatchDogEmpowerCheck.cs, 
filesummary is: The file WatchDogEmpowerCheck.cs is a service class responsible for monitoring and managing the Empower system. It handles starting and stopping the WorkDispatcher, checks the health of various components through periodic checks, and logs important messages related to those operations.

Features of this file include:
1. Starting and stopping the Empower service and its associated WorkDispatcher.
2. Periodic health checks for the Empower system, including SMS, phone, and email checks.
3. Logging functionalities that interact with a database to store log messages.

It depends on several external components, such as WorkDispatcherClient for service operations, configuration settings for service parameters, and the EmpowerLogEntities for logging. It also references various system diagnostics and threading capabilities.


file name is WatchDogServiceApplication.cs, 
file path is: Eroms_Sorted/Services/WatchDog/WatchDogServiceApplication.cs, 
filesummary is: The file WatchDogServiceApplication.cs is part of the WatchDog service application, which is designed to manage a specific service for monitoring or managing tasks in a software ecosystem. This file contains the main functionality for running the service, including service installation, uninstallation, and providing console execution options.

It features the core functionality to install and uninstall itself through Windows Registry modifications, handle exceptions with logging, and provide command-line usage instructions for maintaining the service. Dependencies include the WatchDog service itself and potential interactions with the event log for error reporting.


file name is Consts.cs, 
file path is: Eroms_Sorted/Services/WatchDog/Common/Consts.cs, 
filesummary is: This file defines a static class containing constants used within the WatchDog service of the EPSolutions Empower framework. It provides standard identifiers for the service's display name, service name, description, and registry keys for installation. As a configuration file, it does not include core business logic but plays a crucial role in maintaining consistent naming and configuration across the service.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Services/WatchDog/Properties/AssemblyInfo.cs, 
filesummary is: This file is a configuration file for an assembly in a .NET project. It contains metadata attributes such as the assembly title, description, and visibility for COM components. This file does not contain any core business logic but rather sets up foundational information for the service.


file name is Program.cs, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/Program.cs, 
filesummary is: This file is a C# program file that serves as the entry point for a Windows Service application within the EPSolutions.Empower.Services.NaesbToEmpower namespace. It primarily orchestrates the execution of the service by initializing and running an instance of the Service class. This file is integral to the core functionality of the application, which appears to be related to the integration or processing of data in line with the overall objectives of the EPSolutions Empower project.


file name is Service.cs, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/Service.cs, 
filesummary is: The Service.cs file is a Windows Service that handles the processing of files for the NaesbToEmpower service within the EPSolutions Empower framework. It primarily manages file movement and archiving in a specified directory at configured intervals, triggered by a timer.

Features include:
- A timer-based service that processes and archives files from a specified incoming directory.
- Methods for file processing and archiving, utilizing settings from a configuration file.
- The service can be started, stopped, paused, and resumed.

Dependencies involve configurations for folder paths and interval timings, likely stored in an application settings file, and integration with OperationsManager for file processing.


file name is Service.Designer.cs, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/Service.Designer.cs, 
filesummary is: This file is a designer file for a service component, generated to support the Visual Studio designer tools. It primarily includes boilerplate code for initializing the service and managing resource disposal. The file does not contain core business logic or features, focusing instead on setup for the service's functionality.


file name is .NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/obj/Release/.NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
filesummary is: This file is a generated assembly attributes file for a .NET Framework project. It specifies that the project targets .NET Framework version 4.7.2, indicating compatibility requirements for the code. This file does not contain core business logic but is essential for the build process within the larger codebase.


file name is .NETFramework,Version=v4.8.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/obj/Release/.NETFramework,Version=v4.8.AssemblyAttributes.cs, 
filesummary is: The file is a generated assembly attributes file for a .NET Framework project targeting version 4.8. It specifies the framework version and is used to inform the runtime environment about the project settings. This file does not contain any core business logic; it simply provides metadata for the assembly.


file name is .NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/obj/Release/.NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
filesummary is: This file is an auto-generated assembly attributes file that defines the target framework for the project, specifying that it uses .NET Framework version 4.8.1. It does not contain any core business logic or features but serves as essential metadata for the project’s configuration. Its primary role is to ensure compatibility with the specified version of the .NET framework when compiling the application.


file name is EPSolutions.Empower.Services.NaesbToEmpower.csproj.FileListAbsolute.txt, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/obj/Release/EPSolutions.Empower.Services.NaesbToEmpower.csproj.FileListAbsolute.txt, 
filesummary is: The provided file is a list of absolute paths to compiled binaries and other associated files for the NaesbToEmpower service within a larger codebase. It primarily serves as a build output artifact that helps track dependencies and includes configurations for various architectures such as x86, amd64, and arm64.

This file contains paths to essential libraries needed for the NaesbToEmpower service, indicating it is related to the deployment and execution of this service rather than containing core business logic. The libraries listed, which include different versions of runtime files and support components, are essential for the correct functioning of the service across different platforms and setups.


file name is .NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/obj/Debug/.NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
filesummary is: This file is an auto-generated assembly attributes file for a .NET Framework project. It specifies the target framework version as .NET Framework 4.7.2, ensuring that the application is built against the correct version of the framework. This file is part of the build process and does not contain core business logic or features.


file name is .NETFramework,Version=v4.8.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs, 
filesummary is: This file is an auto-generated assembly attributes file for a .NET Framework project, specifically targeting version 4.8. It provides framework versioning information and does not contain any core business logic or application features. 

Summary: 
This file defines the target framework for the project as .NET Framework 4.8. It is a boilerplate code file essential for proper versioning but does not implement any functionality. No dependencies or core logic are present in this file.


file name is .NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/obj/Debug/.NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
filesummary is: This file is an auto-generated assembly attributes file for a .NET Framework project targeting version 4.8.1. It typically assists the build process by specifying the framework version used, but it does not contain any core business logic or functionality. Thus, it is primarily a configuration element within the codebase.


file name is EPSolutions.Empower.Services.NaesbToEmpower.csproj.FileListAbsolute.txt, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/obj/Debug/EPSolutions.Empower.Services.NaesbToEmpower.csproj.FileListAbsolute.txt, 
filesummary is: The file analyzed is a list of absolute paths to various output files and dependencies related to a project named NaesbToEmpower, likely part of a larger software service. These files include executables, configuration files, and caches used during the development and debugging processes.

This file serves as a generated list that helps in managing project outputs and dependencies, primarily for development and debugging.

The NaesbToEmpower project appears to involve processing or transforming data related to NAESB (North American Energy Standards Board) into another form, potentially for an application named Empower. It relies on additional components like SqlServerSpatial160.dll for spatial data processing and includes various manifest and configuration files that detail the execution environment and settings.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Services/NaesbToEmpower/Properties/AssemblyInfo.cs, 
filesummary is: The file AssemblyInfo.cs is a configuration file related to assembly attributes in a .NET project. It defines metadata about the assembly, including its reliability, visibility, and compliance status. This file serves to provide necessary assembly-level information but does not contain any core business logic.


file name is Program.cs, 
file path is: Eroms_Sorted/Services/SlackAndEmailMessenger/Program.cs, 
filesummary is: The file Program.cs is the main entry point for a service application related to scheduling within the EPSolutions Empower codebase. It primarily sets up and runs a service that likely processes scheduled tasks, potentially involving notifications via Slack or email. The service relies on the core library and business objects from the EPSolutions.Empower.Core namespace, and handles exceptions by sending an alert through Slack when issues arise.


file name is Service.cs, 
file path is: Eroms_Sorted/Services/SlackAndEmailMessenger/Service.cs, 
filesummary is: This file defines a Windows service in C# that manages scheduled tasks through a timer. It retrieves a configuration setting for the polling interval and ensures the service runs processes at defined intervals, handling exceptions and logging any failures. The business context involves managing scheduled tasks through `ScheduleManager`, which likely interacts with various underlying processes or databases but does not explicitly detail those dependencies in this file.


file name is Service.Designer.cs, 
file path is: Eroms_Sorted/Services/SlackAndEmailMessenger/Service.Designer.cs, 
filesummary is: The file is a partially-defined designer class for a service in a larger application, likely related to scheduling tasks. It contains boilerplate code for initializing the service and managing its components but does not include any business logic. The primary purpose of this file is to provide a structure for the service, enabling it to interact with other components within the codebase.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Services/SlackAndEmailMessenger/Properties/AssemblyInfo.cs, 
filesummary is: The file AssemblyInfo.cs is a configuration file used in .NET applications to define assembly-level attributes. It specifies properties such as reliability contract and COM visibility, which are crucial for interacting with other software components. This file does not contain core business logic but sets essential assembly metadata for the larger codebase.


file name is Program.cs, 
file path is: Eroms_Sorted/Services/TrueUpStager/Program.cs, 
filesummary is: This file is part of a Windows Service application, specifically serving as the entry point for the TrueUpStager service within the EPSolutions.Empower namespace. Its main function initializes and runs the service, allowing it to operate as part of a larger system where multiple services can be managed simultaneously.

The code is primarily focused on setting up the service infrastructure and does not contain core business logic. It relies on the ServiceBase class to manage the service's lifecycle, indicating that it may connect with other services or components in the application.


file name is Service.cs, 
file path is: Eroms_Sorted/Services/TrueUpStager/Service.cs, 
filesummary is: The file Service.cs defines a Windows Service for staging data in the TrueUp process within the EPSolutions.Empower.Services namespace. It utilizes a timer to periodically execute data processing tasks, pulling configuration settings from an external app settings file. Key dependencies include configurations for the service interval and a service invoice manager which connects to the business logic handling invoices.

The core features include:
- Periodically executing the PerformProcesses method based on a timer.
- Error handling and logging capabilities for monitoring and troubleshooting.
- Integration with application settings to customize service behavior. 

Overall, this service facilitates ongoing data staging processes, ensuring timely updates while providing robust error management.


file name is Service.Designer.cs, 
file path is: Eroms_Sorted/Services/TrueUpStager/Service.Designer.cs, 
filesummary is: This file, Service.Designer.cs, is a boilerplate code generated as part of a component or service in the EPSolutions.Empower application. It primarily handles the initialization and disposal of resources for the associated service component and does not contain any core business logic. It is essential for integrating the service into a larger framework, ensuring proper resource management during its lifecycle.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Services/TrueUpStager/Properties/AssemblyInfo.cs, 
filesummary is: The file AssemblyInfo.cs is a configuration file that provides metadata about the assembly in the Eroms_Sorted codebase. It includes attributes that define the assembly's reliability and compliance characteristics. This file is essential for the overall integrity and interoperability of the assembly but does not contain any core business logic.


file name is USPSImportService.Designer.cs, 
file path is: Eroms_Sorted/Services/ImportProcessor/USPSImportService.Designer.cs, 
filesummary is: This file is a designer-generated partial class for the USPSImportService in a service-oriented architecture, specifically facilitating interaction with the UPS import functionalities. It primarily contains boilerplate code for service initialization and resource management without implementing core business logic. The file utilizes the Windows Registry to set up service-related configuration, indicating its dependency on registry entries for execution parameters.


file name is AMSImportService.Designer.cs, 
file path is: Eroms_Sorted/Services/ImportProcessor/AMSImportService.Designer.cs, 
filesummary is: The file AMSImportService.Designer.cs is a partial class file that contains designer-generated code for the AMSImportService component within a service importing framework. It is primarily concerned with setting up the service's configuration and managing resource disposal rather than containing business logic. The file interacts with the Windows Registry to retrieve service name settings needed for its initialization.


file name is AMSImportService.cs, 
file path is: Eroms_Sorted/Services/ImportProcessor/AMSImportService.cs, 
filesummary is: The AMSImportService.cs file defines a Windows service that periodically runs an import process using a timer. It initializes with a configurable poll interval, logs various operational messages, and manages the start and stop events of the service. The core functionality is handled by the ImportProcessorEngineManager, which is crucial for executing the import tasks.


file name is ImportServiceInstaller.Designer.cs, 
file path is: Eroms_Sorted/Services/ImportProcessor/ImportServiceInstaller.Designer.cs, 
filesummary is: This file is a partial class for an installer related to the import services in the EPSolutions Empower software. It defines the configuration for three specific import services (AMS, USPS, and CCH) and manages their installation settings. The file primarily serves as a boilerplate for service registration and does not contain core business logic.


file name is CCHImportService.cs, 
file path is: Eroms_Sorted/Services/ImportProcessor/CCHImportService.cs, 
filesummary is: The file CCHImportService.cs defines a Windows service that manages the timing of periodic import operations. It sets up a timer based on a configurable interval to run import processes, specifically through an ImportProcessorEngineManager. The service handles events for starting and stopping the timer and logs significant actions or errors during execution. 

Key dependencies include the configuration for the polling interval, which defaults to 3 minutes, and the ImportProcessorEngineManager that handles the core import logic.


file name is ImportServiceApplication.cs, 
file path is: Eroms_Sorted/Services/ImportProcessor/ImportServiceApplication.cs, 
filesummary is: This file, ImportServiceApplication.cs, is part of a service-oriented architecture that handles the installation and operation of various import processing services, such as AMS, USPS, and CCH. It utilizes Microsoft’s ServiceBase to define and run these services and interacts with the Windows registry for service management.

The core functionalities include installing and uninstalling the service as well as running the import processes in console mode for debugging or manual operation. Dependencies include the Windows registry for service configuration and the associated service classes (AMSImportService, USPSImportService, CCHImportService) which implement the specific import functionalities.


file name is CCHImportService.Designer.cs, 
file path is: Eroms_Sorted/Services/ImportProcessor/CCHImportService.Designer.cs, 
filesummary is: This file is a designer file for the CCHImportService component in the EPSolutions.Empower application. It primarily contains auto-generated code related to service initialization and resource management for the import process. The file utilizes the Windows Registry to define the service name based on registry keys, which may be important for integrating with system services and configurations.


file name is USPSImportService.cs, 
file path is: Eroms_Sorted/Services/ImportProcessor/USPSImportService.cs, 
filesummary is: The USPSImportService.cs file is a Windows Service that facilitates the scheduled importing of data related to USPS (United States Postal Service). It uses a timer to trigger the import process at configurable intervals, handling potential errors with logging for better maintainability.

Key features include:
- Automatic periodic execution of data import through the RunUSPS method from the ImportProcessorEngineManager class.
- Configuration of polling intervals via application settings, with default parameters for robustness.
- Logging of service status and errors to aid in troubleshooting and monitoring.

Dependencies include the ImportProcessorEngineManager class for executing the import logic and various logging methods for tracking service actions.


file name is ImportServiceInstaller.cs, 
file path is: Eroms_Sorted/Services/ImportProcessor/ImportServiceInstaller.cs, 
filesummary is: The file ImportServiceInstaller.cs is related to the installation of a service within the larger codebase, likely handling the setup of an import processing service. It utilizes the installer functionality provided by the .NET framework.

Summary: This file defines the ImportServiceInstaller class, which is responsible for installing the import processing service within the application. It extends the Installer class and includes necessary initialization for the service setup. The file plays a crucial role in ensuring the service is properly installed on the target machine.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Services/ImportProcessor/Properties/AssemblyInfo.cs, 
filesummary is: This file, AssemblyInfo.cs, is a configuration file that contains metadata about the ImportProcessor assembly. It defines assembly attributes such as title, description, and version information, which are essential for assembly identification and organization. It does not contain any core business logic or functionality.


file name is Program.cs, 
file path is: Eroms_Sorted/Services/ScheduleProcessor/Program.cs, 
filesummary is: This file is a C# program that serves as the entry point for a Windows Service related to the Schedule Processor within the EPSolutions Empower Services. It primarily handles the initialization and running of the service.

The Program class contains the Main method, which sets up the service to run and includes basic error handling by sending an alert when an exception arises. The service likely interacts with other components or databases to carry out scheduling tasks, though specific details aren't evident from this snippet.


file name is Service.cs, 
file path is: Eroms_Sorted/Services/ScheduleProcessor/Service.cs, 
filesummary is: The file Service.cs is a part of the ScheduleProcessor service component designed to manage scheduled tasks within the Empower application. It employs a timer to trigger processes at configurable intervals while ensuring that the service can handle its startup and shutdown properly.

Key features include:
- A timer that sets its interval based on a configuration value, ensuring it stays within defined limits.
- The ability to perform scheduling operations through the ScheduleManager class, which likely depends on other core business objects.
- Error handling and logging mechanisms for monitoring service performance and issues.

Dependencies potentially include application configuration settings and the ScheduleManager class, which may interact with other services or databases related to scheduling.


file name is Service.Designer.cs, 
file path is: Eroms_Sorted/Services/ScheduleProcessor/Service.Designer.cs, 
filesummary is: This file is a designer-generated code file for a service component within the Empower application, specifically related to scheduling functionality. It doesn't include any business logic but sets up the necessary infrastructure for the service, including managing resources. It contains boilerplate code for component initialization and resource disposal, ensuring proper management of system resources.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Services/ScheduleProcessor/Properties/AssemblyInfo.cs, 
filesummary is: The file AssemblyInfo.cs serves as a configuration file that contains assembly-level attributes for the ScheduleProcessor service within the codebase. It primarily defines assembly metadata, including reliability contracts and visibility settings, which are important for ensuring the stability and interoperability of the code. This file does not contain core business logic but instead sets up the environment for the ScheduleProcessor to operate correctly.


file name is UnitTest1.cs, 
file path is: Eroms_Sorted/Eroms.Test/UnitTest1.cs, 
filesummary is: This file is a unit test class for the Eroms codebase, specifically designed to test a component of the application. It defines a single test method, which is currently empty, indicating a placeholder for further test implementations. This unit test may help ensure that core functionalities work as expected, depending on the actual business logic within the related application code.


file name is UnitTest2.cs, 
file path is: Eroms_Sorted/Eroms.Test/UnitTest2.cs, 
filesummary is: This file is a unit test file that is part of the Eroms.Test namespace. It contains a single test class, UnitTest2, with an empty test method, indicating a placeholder for future test implementation. This file helps ensure that the core features of the codebase are functioning correctly but does not include any business logic itself.


file name is IncomingEdi8673Tests.cs, 
file path is: Eroms_Sorted/Eroms.Test/Texas/IncomingEdi8673Tests.cs, 
filesummary is: This file is a test class located within the "Eroms.Test.Texas" namespace, indicating it is part of a testing framework for the Eroms codebase. The file does not contain any test methods or logic at this point, suggesting it may serve as a placeholder or require further development.  

Summary:  
- This is a test class for the EDI 867 format within the Eroms project.  
- Currently, it contains no implemented tests or business logic.  
- It may rely on additional test utilities or frameworks in the codebase for testing functionality related to the EDI transactions.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Eroms.Test/Properties/AssemblyInfo.cs, 
filesummary is: This file, AssemblyInfo.cs, is a configuration file for the Eroms.Test assembly, providing metadata about the assembly such as its title, version, and GUID. It is a boilerplate code file typically used to define assembly-level attributes and does not contain any core business logic. It serves mainly for identification and versioning purposes within the larger codebase.


file name is BEG.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/BEG.cs, 
filesummary is: This file, BEG.cs, is a class definition focused on configuring the BEG (Beginning Segment) of an EDI (Electronic Data Interchange) document specific to Maryland. It outlines the required elements and validation rules for various fields within the segment.

The core features include setting mandatory fields, their types, and allowable values for the EDI segment. It requires four specific elements with defined data types such as ID and Date, and length restrictions on free-form text. The functionality depends on the EdiSegment and SegmentBeg classes from the EPSolutions.Empower.Edi.EdiBase namespace, indicating that it is part of a larger EDI processing framework.


file name is PO1.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/PO1.cs, 
filesummary is: This file defines a static class named Po1 within the namespace EPSolutions.Empower.Edi.SetMaryland, which is part of an EDI (Electronic Data Interchange) solution. It focuses on configuring the PO1 segment, setting various required fields, data types, and constraints on the properties of the segment. The class works with EDI segments, suggesting it is integral for validating or formatting purchase order data according to specific business rules used in EDI transactions.


file name is DTM.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/DTM.cs, 
filesummary is: The file DTM.cs is part of the EDI (Electronic Data Interchange) processing module in the EPSolutions Empower application, specifically tailored for Maryland's EDI requirements. It defines a static class, Dtm, responsible for setting various data elements in the EdiSegment related to DTM (Date/Time Reference) segments based on conditional logic that specifies which fields are required and their types.

Key features include the handling of multiple elements such as DTM01, DTM02, DTM03, and DTM04 with specific validation rules and possible values. Dependencies include SegmentDtm, which is likely used for structuring EDI data, and EdiValueType, which indicates the expected types for the data being processed.


file name is NM1.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/NM1.cs, 
filesummary is: The NM1.cs file is part of the EDI (Electronic Data Interchange) processing framework within the EPSolutions.Empower project. It specifically defines the structure and rules for the NM1 EDI segment related to Maryland. 

This file provides critical logic for determining required fields and their constraints based on the values of specific identifiers. The dependencies within this code include references to the SegmentNM1 structure and the EdiValueType enumeration, along with various local business rules that influence the EDI document handling.


file name is N4.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/N4.cs, 
filesummary is: The file N4.cs is part of the EPSolutions.Empower EDI (Electronic Data Interchange) module specifically for setting up the Maryland state configuration. It defines a static class that manages the attributes of the N4 EDI segment, which pertains to geographical location details such as city, state, and postal code.

The core functionality includes setting required fields, value types, and length constraints for various elements within the N4 segment, ensuring compliance with EDI standards. Dependencies include the EdiSegment class and possibly database or other configuration files that define valid state abbreviations and facilitate data validation.


file name is AK9.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/AK9.cs, 
filesummary is: The file Ak9.cs is a part of the EPSolutions Empower EDI module specifically for handling the AK9 EDI segment structure used in Electronic Data Interchange (EDI) transactions. It defines the validation rules, required fields, and possible values for various elements within the AK9 segment, which are crucial for ensuring compliance with EDI standards.

Key features include:
- Setting the minimum required elements and their types (Id, Numeric) for the AK9 segment.
- Defining required fields (Ak901, Ak902, Ak903, Ak904) and providing acceptable values for validation.
- The file interacts with other EDI segment structures and may depend on the broader EDI framework components defined in the EdiBase, ensuring that messages conform to the expected formats and integrity checks.


file name is BPR.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/BPR.cs, 
filesummary is: The file BPR.cs defines a static class for managing the BPR (Billing Payment Request) segment within an EDI context for the Maryland set of EDI messages. It outlines the requirements for various elements of the BPR segment, specifying which fields are required, their value types, and any allowed values.

The class does not contain main business logic but instead serves to configure the structure of an EDI segment. It relates to other parts of the codebase that handle EDI transactions, likely interacting with databases or services that process these EDI messages.


file name is AK2.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/AK2.cs, 
filesummary is: The file AK2.cs defines a static class that sets up requirements and constraints for an EDI segment, specifically the AK2 segment used in electronic data interchange processes for Maryland-related transactions. The core features include defining the minimum number of elements required, marking specific fields as required, and specifying value types and constraints for those fields. This file likely interfaces with other components of the EDI framework, notably the EdiSegment and SegmentAK2 classes, which handle EDI message structures in the application.


file name is SLN.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/SLN.cs, 
filesummary is: This file contains a static class named Sln that is part of the EDI (Electronic Data Interchange) functionalities specifically for the Maryland set. It defines a method to set properties for an EDI segment, including required fields, value types, and length restrictions.

The core features include setting the minimum elements required for the segment and defining the properties for two specific fields (SLN01 and SLN03) within that segment. Dependencies may include the EdiSegment and SegmentSln classes, along with the EdiValueType enum, which likely relate to the overall EDI processing framework in the codebase.


file name is AK1.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/AK1.cs, 
filesummary is: The file AK1.cs is a C# class that is part of the EPSolutions Empower EDI framework, specifically related to the Maryland EDI set. It defines the requirements and constraints for the AK1 segment, which is a part of EDI (Electronic Data Interchange) transactions.

Key Features:
- The class sets rules for the AK1 segment, including required fields and constraints for values of AK101 and AK102.
- It specifies that AK101 must be one of several allowed identifiers related to various EDI transactions and requires AK102 to be numeric with a defined length.
- This class is likely utilized in broader EDI transaction processing where compliance with specific guidelines is necessary for proper data interchange involving Maryland's regulations.


file name is ENT.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/ENT.cs, 
filesummary is: The file ENT.cs is part of a larger codebase that focuses on Electronic Data Interchange (EDI) processing, specifically for the Maryland settings within the Empower system. 

This file defines a static class named Ent that contains a method SetTo, which configures properties of an EDI segment of type SegmentEnt. The method specifies requirements for EDI elements, such as making the ENT01 field required and defining its value type and length constraints. This class depends on the SegmentEnt class from the EPSolutions.Empower.Edi.EdiBase namespace, indicating it is part of a structured framework for handling EDI data formats.


file name is DTP.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/DTP.cs, 
filesummary is: The file DTP.cs is part of the EPSolutions.Empower.Edi.SetMaryland namespace and contains core business logic to configure the DTP (Date/Time Period) segment of an Electronic Data Interchange (EDI) message. This class specifies the required fields and validation rules for the DTP segment, including mandatory identifiers and date formats.

Key features include setting minimum required elements, and defining required fields with their types and possible values. Dependencies may include the EdiSegment and SegmentDtp classes from EPSolutions.Empower.Edi.EdiBase, as well as specific EDI value types relevant to message standards.


file name is NTE.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/NTE.cs, 
filesummary is: The file NTE.cs defines a static class Nte within the SetMaryland namespace of the EPSolutions.Empower.Edi namespace. It contains logic for configuring the NTE segment of an EDI (Electronic Data Interchange) message, focusing on validating the required fields and values.

The core functionality involves setting minimum requirements for the NTE segment's fields, including required identifiers and specific value types. The NTE segment has dependencies on structure definitions likely found in the SegmentNte class, which is part of the EDI framework. This class ensures that EDI documents adhere to specific formatting rules for proper transmission and processing.


file name is AMT.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/AMT.cs, 
filesummary is: This file, AMT.cs, is a core component of the EDI (Electronic Data Interchange) process within the Maryland set of operations for the larger EPSolutions Empower framework. It defines the Amt class, responsible for setting attributes related to the AMT segment of EDI messages, including requirements for different value types and conditions that dictate mandatory elements based on possible values. 

The primary features entail validation rules for AMT segment fields, with dependencies on the EDI segment structure defined in related classes like SegmentAmt and EdiValueType. This code ensures proper data formatting and compliance in EDI transactions, specifically for various transaction types governed by the Maryland regulations.


file name is ASI.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/ASI.cs, 
filesummary is: The file ASI.cs defines a class called Asi, which is part of the EDI (Electronic Data Interchange) module for Maryland in the more extensive EPSolutions.Empower project. This class appears to handle the configuration of an EDI segment specifically for the ASI (Additional Segment Information) type.

The core functionality includes setting minimum elements required for the segment and defining required fields along with their possible values for validation. It utilizes the EdiSegment type from EDI Base, indicating a dependency on the broader EDI framework within the codebase. This file contributes to ensuring that EDI documents meet the specified formats and standards necessary for compliance with Maryland's requirements.


file name is LIN.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/LIN.cs, 
filesummary is: The file LIN.cs is a part of a larger codebase that deals with Electronic Data Interchange (EDI) specifically for the SetMaryland segment. It defines a static class that establishes the structure and requirements for the LIN segment, which is critical for EDI transactions.

The core features include setting the minimum elements required, defining the attributes of various LIN elements (LIN01 to LIN05), and specifying their value types and required statuses. This class likely depends on the EdiSegment and SegmentLin objects from the EPSolutions.Empower.Edi.EdiBase namespace, which must be part of the broader EDI processing framework.


file name is AK3.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/AK3.cs, 
filesummary is: The file AK3.cs is a code file that defines a static class responsible for setting the requirements of an EDI (Electronic Data Interchange) segment known as AK3 in the context of a Maryland-specific implementation. This class outlines the validation rules and data types for various elements within that segment.

Key features include the configuration of required fields, data types, and validation rules for the segment, such as specifying minimum and maximum lengths for element values. It interacts with other components of the EDI processing system, likely depending on the broader EDI framework defined in the EPSolutions.Empower.Edi.EdiBase namespace.


file name is TXI.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/TXI.cs, 
filesummary is: The file TXI.cs defines a static class for handling EDI segment configurations specifically for Maryland within the Empower system. It specifies the requirements and value types for various fields in the TXI segment, including mandatory fields and acceptable values. This code is critical for validating and processing EDI transactions related to Maryland, thereby ensuring compliance with EDI standards.


file name is IT1.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/IT1.cs, 
filesummary is: The file IT1.cs is a static class that defines the configuration for an EDI (Electronic Data Interchange) segment specifically for Maryland. It establishes the rules for required elements and their value types for the EDI segment, ensuring data integrity and compliance with expected formats. This file mainly relates to the broader codebase by playing a crucial role in defining how EDI messages are structured and validated in the context of energy services, involving elements like service type and account details.


file name is MEA.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/MEA.cs, 
filesummary is: The file MEA.cs defines a static class for configuring the MEA segment in Electronic Data Interchange (EDI) transactions specific to Maryland. It specifies various parameters, such as required fields and value types based on the conditions set by the values in the MEA segment elements. This includes validation of minimum elements and possible values for each element, suggesting the file plays a crucial role in ensuring the integrity and correctness of EDI data exchanges within the codebase.


file name is OTI.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/OTI.cs, 
filesummary is: The file OTI.cs contains code that defines the structure and validation requirements for an Electronic Data Interchange (EDI) segment called "OTI" within the Maryland set of EDI transactions. It establishes specific attributes for the segment, including required elements, value types, and possible values, which are fundamental for data integrity and compliance with EDI standards. This class interacts with other components of the EDI framework, specifically the EdiSegment and SegmentOti classes, ensuring that EDI messages conform to expected formats and rules for processing.


file name is AK4.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/AK4.cs, 
filesummary is: The file AK4.cs defines a static class responsible for setting requirements for the AK4 segment in Electronic Data Interchange (EDI) specific to Maryland. It encompasses the rules for validating data elements, including their types, lengths, and allowable values.

Key features include defining the minimum and maximum lengths of data elements within the segment, validating types (FreeFormText, Numeric, Id), and specifying mandatory fields. This class relies on the EdiSegment and SegmentAK4 classes within the EPSolutions.Empower.Edi.EdiBase namespace, and interacts with EDI data formats crucial for compliance within the EDI framework.


file name is SAC.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/SAC.cs, 
filesummary is: The file SAC.cs is a C# class that is part of an Electronic Data Interchange (EDI) system, specifically designed for setting up the parameters of the SAC segment used in EDI transactions for the state of Maryland. It defines the structure and rules for various elements within the SAC segment, including their requirements and possible values.

Features of this file include:
- Initialization of SAC segment parameters with specific requirements and allowed values for each field.
- It establishes both mandatory and optional fields within the SAC segment and their respective data types, such as IDs, numeric values, and free-form text.
- This file depends on associations with other EDI elements defined in the EPSolutions.Empower.Edi.EdiBase namespace, and relies on a class structure for EDI segments.


file name is TDS.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/TDS.cs, 
filesummary is: The file TDS.cs is part of the EDI (Electronic Data Interchange) functionality within the EPSolutions.Empower application, specifically targeting the Maryland set of EDI standards. It defines a static class Tds containing a method, SetTo, that configures a specific EDI segment (SegmentTds) by establishing its properties such as required fields and value type.

The core feature of this file focuses on the handling of EDI segments, ensuring they conform to required specifications for Maryland. This may be integrated with other EDI processing components in the overall application. There are dependencies on the EdiSegment and SegmentTds classes, which are part of the EDI framework used in the larger system.


file name is BAL.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/BAL.cs, 
filesummary is: This file, BAL.cs, is part of the EPSolutions Empower EDI (Electronic Data Interchange) processing system, specifically for Maryland. It defines a static class, Bal, which configures the structure and requirements for an EDI segment related to the BAL (Balance) segment. 

The main features include setting required fields and value types for BAL01, BAL02, and BAL03, including possible values and length constraints. This file links to SegmentBal, which manages EDI segment properties, and interacts with other components of the EDI framework for processing transaction data.


file name is PER.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/PER.cs, 
filesummary is: The PER.cs file is part of the EDI (Electronic Data Interchange) module within the Maryland implementation. It defines the structure and validation rules for the PER (Party Identification) segment, which is important for managing communication between trading partners.

The key features include the designation of required and optional fields, setting minimum and maximum lengths, and specifying possible values for certain fields. Dependencies may include other EDI segments and the overarching EDI structure defined in the EdiBase, making it essential for proper data exchange protocols within the application.


file name is SCH.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/SCH.cs, 
filesummary is: The file SCH.cs defines the Sch class within the EPSolutions.Empower.Edi.SetMaryland namespace, which is part of the EDI (Electronic Data Interchange) functionality. It specifically handles the configuration of the SCH (Schedule) segment, setting required fields and possible values for the segment's elements. This implementation may depend on other components of the EDI framework and the SegmentSch class, ensuring correct formatting and compliance within the EDI transactions for Maryland.


file name is QTY.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/QTY.cs, 
filesummary is: The file QTY.cs is part of the Edi (Electronic Data Interchange) functionality within the Empower system, specifically tailored for the Maryland setting. It defines a static class, Qty, which configures the requirements and permissible values for the QTY segment in EDI transactions. The file is crucial for ensuring correct data structure and validation within the broader EDI processing system, relying on the SegmentQty and EdiSegment classes from the EPSolutions.Empower.Edi.EdiBase namespace.


file name is N1.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/N1.cs, 
filesummary is: The file N1.cs is a part of a larger codebase that likely manages Electronic Data Interchange (EDI) transactions specific to the state of Maryland. It contains a class that defines requirements and constraints for various segments within an EDI document, focusing on the "N1" segment which typically represents the name of a party involved in the transaction.

The class sets rules such as required fields and value types for particular elements based on conditional logic tied to the values of these fields. It depends on the EdiSegment class from the EPSolutions.Empower.Edi.EdiBase namespace, suggesting integration with a broader EDI framework. Overall, this file establishes necessary business rules for segment validation, enabling proper data exchange in EDI processes.


file name is CTT.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/CTT.cs, 
filesummary is: The file CTT.cs is a C# class that forms part of the EDI (Electronic Data Interchange) processing for the Maryland setup within the EPSolutions system. It defines a static method to configure the CTT segment of an EDI message, setting specific requirements like the minimum number of elements and properties for the segment.

Key features include setting validation rules for the CTT segment, such as marking certain elements as required and defining their value types and length constraints. This file likely depends on the EdiSegment and SegmentCtt classes defined in the EdiBase namespace, which handle the overall structure and specifics of EDI segments.


file name is BGN.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/BGN.cs, 
filesummary is: The file BGN.cs implements a class named Bgn that is associated with the EDI (Electronic Data Interchange) format specific to Maryland. It configures the segments of the EDI data, particularly focusing on the BGN (Beginning Segment) for transactions, specifying required fields, value types, and possible values for different segments.

Key features include setting requirements for various BGN fields like Bgn01, Bgn02, Bgn03, and Bgn08, as well as defining allowable values for specific segment types. This code is part of a larger system that likely handles EDI transactions between entities, relying on EdiSegment and related components, which may depend on specific business rules and data structures.


file name is TED.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/TED.cs, 
filesummary is: The file TED.cs contains a static class that defines settings for handling the TED segment in EDI (Electronic Data Interchange) transactions tailored for the state of Maryland. Its primary functionality is to configure required fields and possible values for the TED segment. This implementation likely interfaces with other components in the codebase that deal with EDI processing, ensuring compliance with specific state requirements and standard EDI protocols.


file name is N3.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/N3.cs, 
filesummary is: This file, N3.cs, contains core implementation related to the handling of EDI (Electronic Data Interchange) segments specific to Maryland. It defines the structure and requirements for the N3 segment, including property settings such as minimum elements, required fields, and value types. The N3 segment is a crucial part of EDI transactions, and this file interacts with the larger codebase by setting validation rules that ensure compliance with EDI standards. Dependencies include the SegmentN3 class and the EdiValueType enumeration from the EPSolutions.Empower.Edi.EdiBase namespace.


file name is REF.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/REF.cs, 
filesummary is: The file REF.cs defines the configuration for the "Ref" segment of the EDI (Electronic Data Interchange) system for Maryland in the EPSolutions Empower codebase. It specifies the rules and possible values for different reference identifiers used in the EDI transactions, ensuring compliance with expected formats and data requirements.

The key features include setting minimum required elements, defining value types, and providing possible values based on specific reference codes. This file is likely dependent on the EdiSegment and SegmentRef classes from the EDIBase library, and it may interact with external databases for EDI data storage and retrieval.


file name is PID.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/PID.cs, 
filesummary is: The file PID.cs is part of a larger codebase that handles Electronic Data Interchange (EDI) for Maryland, specifically defining requirements for certain segments. It details how to set parameters and validations for the PID segment in EDI transactions, including minimum elements and possible values for specific PID fields. The code leverages the base class from the EPSolutions.Empower.Edi.EdiBase namespace, indicating a reliance on a broader EDI framework within the codebase.


file name is BPT.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/BPT.cs, 
filesummary is: The file BPT.cs contains core business logic related to Electronic Data Interchange (EDI) specifically for Maryland's BPT (Business Process Transactions). It defines a static class that sets requirements and properties for various elements within an EDI segment, ensuring compliance with expected formats and required fields like identifiers, free-form text, and dates. The logic centers around conditioning field requirements based on specific values, such as modifying minimum elements required when BPT01 is "01," which could rely on external configurations or EDI specifications.


file name is BIG.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/BIG.cs, 
filesummary is: The file BIG.cs is a part of the EDI (Electronic Data Interchange) processing in a Maryland specific implementation. It defines a static class that sets requirements and validations for the "BIG" segment of EDI transactions. This includes specifications for various fields such as minimum and maximum lengths, data types, and allowed values.

Features identified include:
- Definition of mandatory fields and validation rules.
- Support for specific data types like dates and IDs.
- Restrictions on input values for certain fields.

Dependencies may include other EDI segment classes and possibly EDI specifications documentation that governs what each field represents and allows in the broader EDI framework.


file name is RMR.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/RMR.cs, 
filesummary is: The file RMR.cs is part of the EPSolutions.Empower.Edi.SetMaryland namespace, focused on defining and configuring the RMR (Remittance Advice) segment for Electronic Data Interchange (EDI). It establishes rules for required elements and their types within the segment, enabling integration with EDI systems. It depends on the EdiSegment and SegmentRmr classes, specifying validation criteria and possible value constraints for various fields in the RMR segment.


file name is ITD.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/ITD.cs, 
filesummary is: The file ITD.cs is a code file that appears to be part of the EDI (Electronic Data Interchange) functionality within the EPSolutions Empower application, specifically related to Maryland. It defines a static class Itd that contains a method, SetTo, which configures properties of an EDI segment named SegmentItd. 

The core features identified in this file include setting the minimum required elements and defining properties for the ITD06 field, such as its requirement status and value type, specifically for date formats. This file likely interacts with other components or classes in the EPSolutions Empower EDI framework and depends on the EdiSegment and SegmentItd classes for its functionality.


file name is TRN.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/TRN.cs, 
filesummary is: The file TRN.cs is part of the EPSolutions.Empower.Edi.SetMaryland namespace and defines the Trn class for handling EDI (Electronic Data Interchange) segments related to the Maryland set. It primarily focuses on configuring the 'TRN' segment's properties, including required elements and value types, which are essential for processing EDI transactions. This file likely interacts with other parts of the EDI processing framework and could depend on other EDI segment definitions and validation logic within the EPSolutions.Empower.Edi library.


file name is PTD.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/PTD.cs, 
filesummary is: This file is a part of the EDI (Electronic Data Interchange) processing functionality specifically tailored for Maryland. It defines a static class that sets up the rules and requirements for a specific EDI segment (PTD - Payment Terms Data) used in EDI transactions. 

The core features include specifying the minimum elements required and determining the possible values for the PTD01 element, ensuring that the necessary data format is adhered to in EDI communications. It relies on the EdiSegment class and the SegmentPtd type from the broader EPSolutions.Empower.Edi.EdiBase namespace, which might involve other related classes and configurations for EDI processing.


file name is BHT.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/BHT.cs, 
filesummary is: The file BHT.cs is part of a codebase that handles Electronic Data Interchange (EDI) for the state of Maryland. It defines a class Bht that sets validation rules for specific fields within an EDI segment, ensuring data integrity and compliance with EDI standards. The class relies on the SegmentBht structure, which is likely defined in a related file, and uses data types such as Id and Date, indicating integration with EDI processing systems.


file name is HL.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/HL.cs, 
filesummary is: The file HL.cs is a C# code file that defines a static class responsible for setting the properties of an EDI segment specifically for the Maryland EDI implementation. It configures required elements and their valid values for the segment, ensuring that specific data fields are filled out correctly.

Key features include the definition of minimum required elements for the segment and validation of the values for the HL01 and HL03 fields. This code likely interacts with other components in the EPSolutions Empowery framework that handle electronic data interchange (EDI) processes. Dependencies may include the SegmentHL class and its properties, which are part of the broader EDI handling system.


file name is AK5.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/AK5.cs, 
filesummary is: The file AK5.cs contains a static class that defines the requirements and possible values for the AK5 EDI segment, which is part of the Electronic Data Interchange process. This functionality is essential for processing transactions in a structured format and includes validation for various transaction conditions related to errors, control numbers, and segment counts. It does not depend on any external databases but is likely integrated with other EDI processing components within the EPSolutions.Empower.Edi namespace.


file name is .NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/obj/MarylandEdi/.NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
filesummary is: This file is a boilerplate code file automatically generated for a .NET Framework project. It specifies the target framework for the application, which is .NET Framework 4.7.2. It does not contain any business logic or core code features.


file name is EPSolutions.Empower.Edi.SetMaryland.csproj.FileListAbsolute.txt, 
file path is: Eroms_Sorted/Edi/SetMaryland/obj/Release/EPSolutions.Empower.Edi.SetMaryland.csproj.FileListAbsolute.txt, 
filesummary is: The file appears to be a generated list of absolute paths for various output files related to the project EPSolutions.Empower.Edi.SetMaryland. It is not a significant part of the core logic but serves as a reference for the build artifacts of the project.

This file primarily contains references to binaries and configuration files resulting from the project's build process. As such, it does not contain any business logic or feature specifications. It mainly aids in project management and organization.


file name is .NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/obj/Release/.NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
filesummary is: This file is an autogenerated assembly attributes file generated by the .NET framework. It specifies the target framework for the application, which is .NET Framework 4.7.2. It does not contain any core business logic or features, serving primarily as boilerplate code for establishing framework compatibility.


file name is .NETFramework,Version=v4.8.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/obj/Release/.NETFramework,Version=v4.8.AssemblyAttributes.cs, 
filesummary is: This file is a generated assembly attributes file that defines the target framework for a project within the larger codebase. It indicates that the project is built against the .NET Framework version 4.8. As a boilerplate code file, it does not contain any core business logic or functionality.


file name is .NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/obj/Release/.NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
filesummary is: This file is a generated assembly attributes file for a .NET Framework project, specifically targeting version 4.8.1. It does not contain any business logic or core features; rather, it serves to provide information about the framework version used in the project. Its primary role is to facilitate compatibility and versioning within the larger codebase.


file name is EPSolutions.Empower.Edi.SetMaryland.csproj.FileListAbsolute.txt, 
file path is: Eroms_Sorted/Edi/SetMaryland/obj/Debug/EPSolutions.Empower.Edi.SetMaryland.csproj.FileListAbsolute.txt, 
filesummary is: The file appears to be a list of absolute paths referencing various components related to the project EPSolutions.Empower.Edi.SetMaryland. It includes references to compiled binaries, configuration files, and cache files generated during the build process.

This is a build output file that assists in tracking components and dependencies within the project structure, specifically aiding in the management of project assets and ensuring that the necessary files are available for execution and debugging purposes.


file name is .NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/obj/Debug/.NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
filesummary is: This file is a generated assembly attributes file that is part of a .NET Framework project. It specifies the target framework version for the application, indicating it is built on .NET Framework 4.7.2. As a boilerplate code file, it does not contain any core business logic or features, serving mainly for compatibility purposes within the larger codebase.


file name is .NETFramework,Version=v4.8.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs, 
filesummary is: This file is an autogenerated assembly attributes file for a .NET Framework project. It specifies that the project targets .NET Framework version 4.8, which is relevant for building and running the application. The file primarily serves as metadata for the build process and does not contain any business logic or core features.


file name is .NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/obj/Debug/.NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
filesummary is: This file is an automatically generated assembly attributes file for a .NET Framework project, specifically targeting version 4.8.1. It does not contain any core business logic, but rather specifies framework information necessary for the application to run. It is commonly used for build and compilation purposes in the project structure.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Edi/SetMaryland/Properties/AssemblyInfo.cs, 
filesummary is: This file is a configuration file that contains assembly attributes for a .NET application. It defines metadata about the application, such as the company, product name, copyright, and versioning information. As a boilerplate file, it does not contain core business logic or code that directly contributes to application features.


file name is IncomingEdiFileErrorCollection.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/IncomingEdiFileErrorCollection.cs, 
filesummary is: This file is a C# class definition for a collection designed to handle incoming EDI file errors within an application. The core feature is the IncomingEdiFileErrorCollection, which extends the Collection class to work with IEmpowerObject instances, specifically creating and managing IncomingEdiFileError objects. It serves as an integral component for processing and managing EDI errors, suggesting dependencies on the Empower Core Library and possibly related error handling and logging systems within the broader application.


file name is IncomingEdiFileST.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/IncomingEdiFileST.cs, 
filesummary is: The file IncomingEdiFileST.cs is part of a larger codebase that handles Electronic Data Interchanges (EDI) specifically for processing incoming files. This class extends the functionality of IncomingEdiFileGS, focusing on specific attributes relevant to EDI transactions such as sender and receiver IDs, control numbers, and a property for tracking whether the EDI file is accepted.

Key features of the IncomingEdiFileST class include the management of several properties essential for EDI processing, particularly control numbers that ensure the integrity of EDI transactions. This class may depend on the base class IncomingEdiFileGS and could interact with broader EDI processing systems or databases that store details about incoming EDI files.


file name is IncomingEdiFileError.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/IncomingEdiFileError.cs, 
filesummary is: This file defines a class called IncomingEdiFileError, which is a business object within the EdiProcessor namespace of the EPSolutions.Empower system. Its primary function is to represent errors associated with incoming EDI files, storing properties like severity and error descriptions. This class appears to interact with a database or system component that manages EDI file processing, suggesting dependencies on other parts of the system related to error handling and file management.


file name is IncomingEdiFileISA.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/IncomingEdiFileISA.cs, 
filesummary is: The file IncomingEdiFileISA.cs is a core component of the EDI processing system, specifically managing incoming EDI files and their associated properties such as sender ID, receiver ID, and control number. It serves as a business object that handles the loading and saving of a collection of EDI segments linked to a specific EDI file instance. The functionality relies on a data store through the DataHelper class to execute database operations, indicating dependency on a database and other related EDI classes.


file name is EdiProcessor.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/EdiProcessor.cs, 
filesummary is: The file EdiProcessor.cs is part of an electronic data interchange (EDI) processing system. It contains the core logic for processing incoming EDI files from clearinghouses or service providers, managing error handling, and generating appropriate responses based on market requirements.

The primary features of this file include the processing of errored EDI files, archiving valid files, and managing error responses. It depends on other components such as IncomingEdiFile, ServiceTransaction, and related data access methods to load and save file information, potentially interfacing with databases. Additionally, it integrates EDI parsers based on file types and supports various response types for specific transaction codes linked to different electricity councils.


file name is RequiredSegment.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/RequiredSegment.cs, 
filesummary is: The file RequiredSegment.cs defines a class that represents a required segment in an EDI (Electronic Data Interchange) processing context. It serves as a business object that holds data about the segment type, EDI set type, and whether the segment was found. This class relies on base libraries for core functionalities, indicating that it plays a crucial role in the broader EDI processing logic within the application. No direct dependencies on databases or tables are mentioned in this file.


file name is IncomingEdiFileCollection.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/IncomingEdiFileCollection.cs, 
filesummary is: This file defines the `IncomingEdiFileCollection` class, which manages a collection of incoming EDI file objects, implementing the `IEmpowerCollection` interface. It allows for the creation of new instances of `IncomingEdiFile` and specifies the type of objects it collects. This file is likely a core component of the EDI processing system, indicating a structured approach to managing EDI file data within the broader codebase. Dependencies may include the `IncomingEdiFile` class and the `IEmpowerObject` interface from the base library.


file name is IncomingEdiFileGS.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/IncomingEdiFileGS.cs, 
filesummary is: The file IncomingEdiFileGS.cs defines a class that extends functionality for processing incoming EDI (Electronic Data Interchange) files specifically for the GS (Functional Group) segment. It manages attributes like the incoming EDI file key, sender and receiver IDs, control numbers, and acceptance status. This class interacts with a collection of ST segments, loading them from a database and ensuring changes are saved during a transaction.

Features include: 
- Initialization of key properties for EDI processing.
- Lazy loading of related ST segments from the database.
- Saving operations for EDI segments through database transactions.

Dependencies might include database tables related to incoming EDI file records and a data access layer for handling database operations.


file name is GroupInformation.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/GroupInformation.cs, 
filesummary is: The file GroupInformation.cs is part of the EdiProcessor module within the EPSolutions.Empower.Edi namespace. It defines the GroupInformation class, which extends the EmpowerBusinessObject. This class holds data related to a trading partner and the number of transactions associated with it.

The main features of the GroupInformation class include properties for accessing and modifying the TradingPartner object and the TransactionCount integer. The class likely interacts with other components in the EPSolutions system such as trading partner definitions and transaction management, but it does not inherently manage any database connections or table interactions by itself.


file name is IncomingEdiFile.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/IncomingEdiFile.cs, 
filesummary is: This file, IncomingEdiFile.cs, defines a class that encapsulates the handling of incoming EDI (Electronic Data Interchange) files within a broader system. It extends a base business object class and manages properties such as file metadata, processing states, and error handling.

The core features of this file include:
- Initialization and management of dozens of properties relevant to incoming EDI files, such as InterchangeCode, FilePath, and Processing timestamps.
- Methods for error handling, including adding errors to a collection and determining if the file processing has errors.
- Integration with a database is evident, with operations for saving the EDI file data and associated errors using transactions, interfacing with stored procedures to manipulate database records.

Dependencies include the associated collections (IncomingEdiFileErrorCollection and IncomingEdiFileISACollection) that link to error handling and ISA segment collections, as well as various database procedures like emPower_GetIncomingEdiFileISAByFileKey for loading related data.


file name is IncomingEdiFileSTCollection.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/IncomingEdiFileSTCollection.cs, 
filesummary is: The file IncomingEdiFileSTCollection.cs is part of the EdiProcessor component in the EPSolutions.Empower.Edi namespace. It defines a collection class for handling objects of type IncomingEdiFileST, which likely represent incoming EDI files. This class provides methods to create new instances of IncomingEdiFileST and indicates the type of objects it collects.

Features include managing a collection of EDI file objects, providing a method to instantiate new EDI file objects, and specifying the type of the collected objects. Dependencies may include the IEmpowerObject interface and the IncomingEdiFileST class, which is expected to define the structure and behavior of individual EDI file objects.


file name is IncomingEdiFileISACollection.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/IncomingEdiFileISACollection.cs, 
filesummary is: The file `IncomingEdiFileISACollection.cs` defines a collection class for handling `IncomingEdiFileISA` objects within the EDI processing module of the software. It implements the `IEmpowerCollection` interface, allowing for the creation of new instances of `IncomingEdiFileISA` and specifies the type of objects the collection holds. This file contributes to managing EDI file processing, likely interacting with other modules handling EDI data formats and structure within the larger codebase.


file name is IncomingEdiFileGSCollection.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/IncomingEdiFileGSCollection.cs, 
filesummary is: The file defines a collection class called IncomingEdiFileGSCollection, which is a part of the EdiProcessor namespace in the Empower project. This class manages a collection of IncomingEdiFileGS objects, providing methods to create new instances and define the type of objects it holds. It plays a vital role in handling incoming EDI files, likely facilitating data processing workflows related to electronic data interchange within the larger codebase.


file name is RequiredSegmentCollection.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/RequiredSegmentCollection.cs, 
filesummary is: The file RequiredSegmentCollection.cs is part of the EdiProcessor module within the EPSolutions.Empower.Edi namespace, indicating it plays a role in processing Electronic Data Interchange (EDI) transactions. This file defines the RequiredSegmentCollection class, which manages a collection of RequiredSegment objects, providing methods to create new segments and identify the type of objects it collects. The functionality relies on interfaces from the Core library and may interact with other data processing components in the codebase.


file name is IIncomingEdiMessage.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Interfaces/IIncomingEdiMessage.cs, 
filesummary is: The file IIncomingEdiMessage.cs defines an interface for processing incoming EDI messages within the EPSolutions Empower system. It outlines methods for handling EDI events, checking for special requirements, and managing service and transaction details, indicating a focus on ensuring the integrity and processing of EDI data. This interface also relies on various core business objects, such as Services and TradingPartners, indicating its central role in the EDI processing module of the application.


file name is IIncomingEdiParser.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Interfaces/IIncomingEdiParser.cs, 
filesummary is: This file defines an interface for parsing incoming EDI (Electronic Data Interchange) files, which is likely a core component of a larger system that processes EDI transactions. 

The key features include:
- A property for functional acknowledgements.
- A method for processing incoming EDI files along with associated event handlers.
- A testing method to process EDI files that outputs transaction identifiers.

It relies on classes and types from the EPSolutions.Empower.Edi.EdiGenerator namespace and expects event handlers structured in a specific dictionary format, indicating a flexible and event-driven approach to handling EDI messages.


file name is DATFileGenerator.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/TransactionProcess/DATFileGenerator.cs, 
filesummary is: The file DATFileGenerator.cs contains a class responsible for generating a specific data format related to transaction processing in the EPSolutions Empower system. It focuses on constructing a DataRow with various information such as action codes, account numbers, and tax details, which are key for creating a data file used in electronic data interchange (EDI).

Key features include populating columns based on service-related information while handling specific business rules such as rate codes and tax exemptions. It relies on the Service object and its associated properties, along with a DataTable for structuring the output data. The generated files are crucial for billing and regulatory reporting.


file name is IncomingEdi8146.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi8146.cs, 
filesummary is: The file IncomingEdi8146.cs is part of a larger codebase related to processing Electronic Data Interchange (EDI) transactions, specifically dealing with the 814 transaction sets related to service changes. This file extends the functionality of a base processor class and implements the business logic necessary for handling specific EDI scenarios, particularly around customer site code management and service status updates.

The main features of this file include:
1. Validating the existence of a site code and ensuring service statuses are appropriate before processing requests related to service terminations.
2. Storing reasons for transaction rejections, managing service end dates, and responding to incoming EDI transactions with appropriate success or failure responses.
3. Dependencies include the ability to save and load service data from a database, utilize predefined service transaction and alert classes, and reference transaction records.

This code is integral to overall service management operations, impacting customer interactions in the EDI processing workflow.


file name is IncomingEdi81413.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81413.cs, 
filesummary is: The file IncomingEdi81413.cs is a core component of the EDI processing system within the EPSolutions codebase, specifically for handling the EDI 814 transaction related to Texas. It defines the IncomingEdi81413 class that processes incoming EDI transactions—updating service records based on transaction acceptance or rejection and handling corresponding alerts.

Key features include:
- Managing service start and end dates based on transaction data.
- Generating alerts when transactions are rejected.
- Interacting with a database to save service and transaction information.

Dependencies include the use of IDbTransaction for database operations and core business objects related to EDI services and transactions.


file name is IncomingEdi81411.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81411.cs, 
filesummary is: The file IncomingEdi81411.cs is part of the EDI (Electronic Data Interchange) processing system, specifically handling incoming EDI 814 transactions for Texas. It defines the IncomingEdi81411 class, which extends functionality from the IncomingEdi814 base class, focusing on processing transaction codes for acceptance or rejection of service transactions. Key features include updating service statuses and implementing required segments for transaction handling, with dependencies on the database for transaction saving and user identification for processing actions.


file name is IncomingEdi8148.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi8148.cs, 
filesummary is: The file `IncomingEdi8148.cs` is a part of the EDI processor for handling incoming EDI transactions specific to Texas, likely within a larger framework for telecommunications or utility services. This class extends the functionality of `IncomingEdi814`, focusing on loading service data, managing service transactions, and implementing business rules related to cancellations.

Key Features:
- Loads service based on transaction number, site code, and status.
- Validates service details and manages service status updates.
- Handles specific EDI segment requirements for service requests and cancellations.
  
Dependencies:
- Relies on core classes like `Service`, `ServiceTransaction`, and `EmpowerAlert`.
- Interacts with a database through the `IDbTransaction` interface for data persistence.


file name is IncomingEdi8203.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi8203.cs, 
filesummary is: The file IncomingEdi8203.cs is a key component of the EDI (Electronic Data Interchange) processing system, specifically for handling the 820_03 remittance advice, which facilitates daily transactions based on customer payments. It defines how to interpret various segments of the incoming EDI message and populates related database tables, specifically 'ServiceProviderRemittance' and 'ServiceProviderRemittanceDetail'. Important dependencies include classes for account and service provider management, which are essential for loading account information and processing payment details.

Key Features:
- Processes daily remittance advice and transactions.
- Manages data related to competitive resellers and service providers.
- Populates service provider remittance and detail tables based on incoming EDI segments.


file name is IncomingEdi81419.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81419.cs, 
filesummary is: The file IncomingEdi81419.cs is part of a larger EDI processing system and serves as a concrete implementation for handling incoming EDI 814 transaction messages specific to Texas. It includes functionality to process accepted or rejected transactions and updates the service status accordingly. Key dependencies include the ServiceTransaction object for transaction responses, a database transaction for data persistence, and required segments like BGN and N1 for proper EDI structure handling.


file name is IncomingEdi867.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi867.cs, 
filesummary is: The file IncomingEdi867.cs is part of an electronic data interchange (EDI) processing module for handling incoming EDI 867 messages within the EPSolutions Empower framework. This abstract class provides core functionalities for loading services, processing segments, and handling various aspects of EDI messages, including error handling.

Features include:
- Service loading based on transaction numbers and site codes.
- Methods to extract specific quantities and codes from EDI segments.
- Duplicate rejection handling with the creation and updating of service transactions.

Dependencies include interactions with external services and databases through methods like LoadByTransactionNumber and LoadBySiteCode, which are integral to managing service data in an EDI context.


file name is IncomingEdi81427.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81427.cs, 
filesummary is: The file IncomingEdi81427.cs is a core component of the codebase, specifically handling the processing of incoming EDI 814 transactions tailored for Texas. It extends functionality from the base class IncomingEdi814, implementing business logic related to transaction acceptance and data quality validation. Key features include defining required EDI segments and saving transaction details to the database, relying on classes such as IDbTransaction and EmpowerUser from related namespaces for transaction management and user roles.


file name is IncomingEdi81425.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81425.cs, 
filesummary is: The file IncomingEdi81425.cs is part of the EDI processing module and is designed to handle incoming EDI transactions specific to Move-Out requests. This class extends the functionality of the IncomingEdi814 base class, implementing core processing logic for both accepted and rejected transactions. It interacts with various business objects, maintains service statuses, and generates alerts based on the transaction outcome.

Key features include managing service dates, updating service statuses, logging errors, and saving records to a database. The functionality relies on databases for transaction management and may depend on other components like the Service and EmpowerAlert classes for complete operational capability.


file name is IncomingEdi814PC.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi814PC.cs, 
filesummary is: The file IncomingEdi814PC.cs is a class responsible for processing incoming EDI 814 transaction sets, specifically for Texas. It extends the IncomingEdi814 base class and handles various business logic related to validating and saving service transaction data based on incoming requests.

Key Features: 
- Validates site codes, action codes, and maintenance types, rejecting transactions as necessary.
- Extracts and saves first contact and customer information from specific segments in the EDI document.
- Updates service details, including special needs indicators and membership numbers, before saving them to the database.

Dependencies: 
- Relies on other core components such as ServiceTransaction, Service, and various segment classes for processing details and data validation.
- Utilizes a database transaction for saving changes, indicating reliance on a database structure for services and accounts.


file name is IncomingEdi810.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi810.cs, 
filesummary is: The file `IncomingEdi810.cs` is part of a larger EDI processing framework, specifically handling the parsing and processing of incoming EDI 810 messages related to service invoices in Texas. It defines the `IncomingEdi810` class, which inherits from `IncomingEdiMessage`, and includes functions for loading services, validating EDI formats, and extracting payment due dates and segment counts.

Key features include:
- Functions to validate and load services from EDI 810 messages.
- Rules for determining valid services based on various criteria through the `LoadService` method.
- Exception handling for error conditions, ensuring proper error messages are returned when rules are violated.
Dependencies include other classes such as `ServiceProviderInvoice`, `AccountTransaction`, and methods interacting with database operations via `DataHelper`. This indicates a reliance on a structured database for invoice and service data retrieval.


file name is IncomingEdi81428.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81428.cs, 
filesummary is: The file IncomingEdi81428.cs is a part of the EDI (Electronic Data Interchange) processing system designed to handle specific types of transactions, particularly an EDI 814 transaction for Texas. This class extends the IncomingEdi814 base class and provides the logic to load services and manage service transactions based on incoming EDI data.

The key features of this class include:
1. Loading services based on transaction numbers and site codes while managing exceptions for unmatched site codes.
2. Processing transaction actions based on transaction types and validating specific segments (LIN, ASI) associated with the transaction to ensure data quality.
3. Saving processed services and transactions, along with generating alerts when transactions are accepted.

This class depends on various components like the Service and ServiceTransaction classes, and it interacts with a database through IDbTransaction for saving data. It also incorporates error handling for different status conditions based on the incoming EDI data.


file name is IncomingEdi8145.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi8145.cs, 
filesummary is: The file IncomingEdi8145.cs is a core component of the EDI processing system for handling incoming EDI 814 transactions, particularly focusing on acceptance and rejection of service transactions. It includes features for parsing EDI segments, updating service information, logging errors, and sending notifications based on transaction outcomes. This file depends on other components such as service objects, database transactions, and various utility methods for managing EDI standards and service statuses.


file name is IncomingEdiParser.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdiParser.cs, 
filesummary is: The file IncomingEdiParser.cs is a core component of an Electronic Data Interchange (EDI) processing system, specifically tailored for handling incoming EDI messages and parsing them in a Texas context. This class is responsible for the comprehensive validation, segmentation, and processing of EDI files while interacting with various business objects and database operations.

Key functionalities include:
1. Loading segments of incoming EDI data and validating the structure of ISA, IEA, GS, GE, and ST segments, ensuring compliance with EDI standards.
2. Creating instances of specific incoming EDI message types based on the document type (e.g., 814, 650) and managing their processing which may involve triggering business logic or actions.
3. Managing dependencies such as database transactions through methods that interface with DataHelper for adding or rolling back database transactions, and invoking various event triggers based on the processed EDI messages.

The file integrates extensively with business objects and data models, including references to `IncomingEdiFile`, `IncomingEdiMessage`, and a range of specific EDI segments, enforcing structured data handling within the respective EDI formats.


file name is IncomingEdi6504.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi6504.cs, 
filesummary is: The file IncomingEdi6504.cs represents an implementation of a class responsible for processing incoming EDI messages specifically formatted as Texas 6504 transactions. It extends the IncomingEdiMessage base class, which suggests that it operates within a broader system for handling electronic data interchange, likely related to service management in a utility or energy sector context.

This class handles specific actions based on transaction types such as service suspension, cancellation, reconnection, and termination. It checks for required data fields, interacts with service and transaction records, and manages responses for data quality issues. Dependencies include databases for transactions and services, as well as various segments defined in the EDI format. The class relies on other related components such as ServiceTransaction, Service, EmpowerUser, and potentially communicates with a database to save its results.


file name is IncomingEdi81418.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81418.cs, 
filesummary is: The file IncomingEdi81418.cs is a code file that is part of a larger codebase focusing on processing EDI (Electronic Data Interchange) transactions specific to Texas regulations. It extends the functionality of a base class to handle the specific logic associated with receiving and processing an EDI 814_18 Delete CSA request.

The core feature of this file involves implementing business logic for validating the status of Service and Action Codes and managing service transactions while maintaining compliance with regulatory requirements. It checks if a Site Code exists, validates the status of the service, and processes rejection reasons if the conditions are not met. Dependencies include interactions with the database through IDbTransaction and ServiceTransaction, which likely map to specific database tables for storing transaction details and service status.


file name is IncomingEdi8149.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi8149.cs, 
filesummary is: The file IncomingEdi8149.cs is a class definition that appears to handle EDI (Electronic Data Interchange) transactions specifically related to the 8149 format, focusing on service transactions. It extends a base class and defines behaviors when processing accepted and rejected transactions, including alert generation for cancellations and updates to service statuses. This class interacts with database transactions and requires specific segments for processing, indicating a dependency on the structure and data within EDI formats and possibly related database entities.


file name is IncomingEdi8102.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi8102.cs, 
filesummary is: The file IncomingEdi8102.cs defines a class that processes incoming EDI 810 documents related to the Texas service industry. This class extends a base class for handling EDI 810 documents, implementing specific business logic for managing service transactions, invoices, and service provider invoice charges. It interacts with the database for creating and updating service records, utilizing several dependencies from other parts of the codebase, such as service provider invoice, service transaction, and various collection classes for invoice charges and details.


file name is IncomingEdi8142.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi8142.cs, 
filesummary is: The file IncomingEdi8142.cs defines a class that processes incoming EDI (Electronic Data Interchange) transactions specifically for Texas using the EDI 814 format. This class handles rejection scenarios when errors in data are identified by ERCOT, focusing on updating service statuses, saving transaction records, and generating alerts based on the transaction outcomes. It is dependent on several core business objects and functionalities, including `Service`, `ServiceTransaction`, and `EmpowerAlert`, which interact with the database to manage service-related actions.


file name is IncomingEdi81417.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81417.cs, 
filesummary is: The file IncomingEdi81417.cs contains core business logic for processing incoming EDI (Electronic Data Interchange) transactions specifically for the EDI type 814 with a unique focus on rejections from ERCOT due to data issues. It defines the IncomingEdi81417 class that extends from IncomingEdi814 and includes methods to act on the received data, update the service status, handle rejection reasons, and save transaction records to the database. This file interacts with several key components such as Service and ServiceTransaction objects and stores alerts related to the rejected transactions, impacting multiple parts of the codebase's handling of EDI transactions.


file name is IncomingEdi814.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi814.cs, 
filesummary is: The file IncomingEdi814.cs is part of an EDI (Electronic Data Interchange) processing system, specifically for handling the 814 transaction set related to service requests and updates. This abstract class serves as a template for specific implementations, providing functionality to load services based on transaction numbers and manage critical care information.

Key features include:
1. Loading service details and ensuring site code consistency using transaction numbers.
2. Handling different types of meters (metered and unmetered) and saving critical care information.
3. Checking for specific transaction types related to service cancellations, with dependencies on the database for service and transaction lookups.

Dependencies include the database transaction object, various service-related classes, and EDI segment models for processing incoming data.


file name is IncomingEdi824.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi824.cs, 
filesummary is: The file IncomingEdi824.cs is a part of the EDI (Electronic Data Interchange) processing system within the EPSolutions Empower framework. It defines a class for handling incoming EDI 824 messages, which are often used for acknowledgments and status reporting.

The class includes methods for loading a service and setting up required EDI segments relevant to the 824 message format. It depends on various segment types (Bgn, N1, Oti, Ref, Ted), which are essential for processing these messages properly within the larger EDI workflow.


file name is IncomingEdi6502.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi6502.cs, 
filesummary is: The file `IncomingEdi6502.cs` is part of the EDI processing functionality within the Empower codebase. It specifically handles the incoming EDI 6502 messages for the Texas region, focusing on managing service order transactions related to energy services.

The key features of this file include:
- Processing incoming EDI messages by loading service orders, updating statuses, and managing service transactions related to service orders.
- Implementing logic for handling various service order types such as disconnect, reconnect, and hold requests, adapting the actions based on purpose codes and response types.
- Dependencies include database transactions for saving service orders, service transactions, and alerts, as well as other classes like `ServiceOrder`, `ServiceTransaction`, and `EmpowerAlert` to facilitate the processing and management of these business operations.


file name is IncomingEdi81414.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81414.cs, 
filesummary is: The file IncomingEdi81414.cs defines a class that processes incoming EDI 814 transactions specific to Texas, focusing on mass transitions and acquisitions of customers. It handles the creation and updating of service locations and mass transition enrollment information based on received EDI data, ensuring appropriate interaction with the database and business rules related to service provisioning. Dependencies include various data structures such as ServiceLocation, MassTransitionEnrollment, and different EDI segments, alongside database transaction management.


file name is IncomingEdi81412.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81412.cs, 
filesummary is: The IncomingEdi81412.cs file is a part of the EDI processing functionality within the broader Empower software architecture. It specifically handles the Incoming EDI 814-12 transactions relevant to Texas, implementing core business logic for service management based on EDI transactions.

The file defines a class that extends from IncomingEdi814, which processes incoming service transaction requests, checks for service validity, loads services from the database, and manages response types based on various business rules. Dependently, it interacts with database transactions and several service-related entities, ensuring proper handling of incoming service requests by validating attributes like Service Status, Action Codes, and dates before saving updates to service records and transaction statuses.


file name is IncomingEdi814PD.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi814PD.cs, 
filesummary is: This file is a code file that implements the class IncomingEdi814PD, which is part of an EDI (Electronic Data Interchange) processing system. It extends the functionality of the IncomingEdi814 class, specifically handling incoming EDI transactions related to the 814 document type in the Texas context.

The IncomingEdi814PD class manages the processing of transactions by setting required segments for the EDI messages and saving the transaction data into the database. It includes handling scenarios such as transaction rejections based on data quality, and it interacts with the EmpowerUser class and a database transaction object, indicating dependencies on user roles and data persistence mechanisms within a wider system architecture.


file name is IncomingEdi86704.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi86704.cs, 
filesummary is: The file IncomingEdi86704.cs is a part of an EDI (Electronic Data Interchange) processing system that handles 867_04 transaction types, specifically for initial meter reads. It extends functionality from a base class to process incoming data, checking for duplicates, saving relevant information, and updating service states based on initial reads. Key dependencies include a database transaction for saving data and various segments to ensure the completeness and correctness of the received EDI data.


file name is IncomingEdi81422.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81422.cs, 
filesummary is: The file IncomingEdi81422.cs defines a class responsible for processing the Incoming EDI 814 transaction specific to Texas. It extends a base class and implements functionality to validate incoming data, handle service transactions, and manage service state based on received EDI segments. Key features include validation of service status, action codes, and required EDI segments, along with managing service creation and updates within a transactional database context.

Dependencies include the EPSolutions.Empower.Core for business objects and database interaction, transaction management via IDbTransaction, and utilities for handling specific EDI segment types. This class also relies on method calls to validate and save service information, indicating tight integration with the overall EDI processing system.


file name is IncomingEdi86702.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi86702.cs, 
filesummary is: The file IncomingEdi8672.cs is part of an EDI (Electronic Data Interchange) processing module in a larger system, specifically handling the processing of the 867_02 transaction set related to historical usage data for utility services. 

This class inherits from IncomingEdi867 and includes methods for updating service location usage records by processing various segments of incoming EDI data. Key dependencies in this functionality include database transactions for saving historical metrics and references to both metered and unmetered usage records, along with detailed segment structures for extracting necessary data. The service operations depend on existing service and transaction definitions to maintain workflow integrity.


file name is IncomingEdi81420.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi81420.cs, 
filesummary is: The file IncomingEdi81420.cs is part of an EDI (Electronic Data Interchange) processing system that handles incoming EDI 814-20 transactions, primarily for the Texas market. It extends a base class to manage service transactions related to changes in customer service locations and maintains compliance with specific EDI standards and documentation.

This file encapsulates core logic involving service management, such as loading service information, processing maintenance requests (like updates, retirements, or creation of services), and handling errors or data validity checks. Key dependencies include database transactions, user roles, and EDI segments specific to the Texas market requirements, ensuring proper data quality and service status throughout the transaction process.


file name is IncomingEdiMessage.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdiMessage.cs, 
filesummary is: The file IncomingEdiMessage.cs defines an abstract class that handles incoming Electronic Data Interchange (EDI) messages, specifically focusing on Texas and Maryland markets. It includes properties and methods to manage EDI events, validate segments, and determine transaction codes based on the market. This class plays a core role in the EDI processing within the codebase, relying on other components like the Service, ServiceTransaction, and various segment classes (STSegment, BgnSegment, etc.), which may depend on databases or external services for data retrieval and validation. 

Key features include:
- Transaction code determination based on market and EDI segment information.
- Validation for required segments and transaction integrity (e.g., matching transaction numbers).
- Methods for handling service status and associated transactions based on incoming EDI data.
- The integration of error handling and logging for invalid transactions or missing data.


file name is IncomingEdi997.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi997.cs, 
filesummary is: The file `IncomingEdi997.cs` is a class that processes incoming EDI (Electronic Data Interchange) messages, specifically the 997 acknowledgment transaction. This code file is part of a larger codebase for managing EDI transactions within a business process environment.

Key features include:
1. It overrides an `Act` method to handle the acknowledgment of EDI transactions, checking the status of incoming segments and updating the status of an outgoing EDI file accordingly.
2. It interfaces with a database to retrieve and update records, suggesting dependencies on database transaction handling and specific stored procedures.
3. The file also includes methods for segment management, indicating that it adheres to EDI standards by requiring certain segments (AK1 and AK9) and including duplicate checks.


file name is IncomingEdi86703.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Texas/IncomingEdi86703.cs, 
filesummary is: The file IncomingEdi86703.cs is part of a codebase handling Electronic Data Interchange (EDI) transactions, specifically for processing the EDI 867_03 document, which focuses on monthly service usage updates.

This class, IncomingEdi8673, extends IncomingEdi867 and provides functionalities for managing service transactions related to usage data. It includes methods for adding new usage, raising necessary events when processing these transactions, and handling data integrity through service keys and dates. The code interacts with database transactions, data entities, and various service usage records, depending on conditions driven by transaction types and flags.

Dependencies may include the EPSolutions.Empower in multiple namespaces, which suggests reliance on contextual classes related to business logic, database connections, and event handling. It is essential for managing services that deal with billing and usage data in a utility or telecom context.


file name is MarylandIncoming814Move.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming814Move.cs, 
filesummary is: The file MarylandIncoming814Move.cs defines a class responsible for processing incoming EDI 814 transactions specifically related to service drop requests in Maryland. It extends another class, MarylandIncoming814, and implements business logic for handling service transactions, such as validating and saving data, managing service status, and generating appropriate responses based on incoming messages. Dependencies include the handling of database transactions and associations with service and customer contact objects, as well as necessary validation segments defined in the EDI format.


file name is MarylandIncoming824.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming824.cs, 
filesummary is: The file MarylandIncoming824.cs is part of an EDI (Electronic Data Interchange) processing system, specifically handling the inbound 824 transaction set for the Maryland region. It implements logic to process application advice regarding service transactions, including managing invoices and handling specific error scenarios related to billing windows.

The core functionality includes:
- Processing and saving a ServiceTransactionApplicationAdvice object based on incoming data.
- Managing error scenarios, such as outside billing windows, and updating invoices accordingly.
- Dependencies include database transactions, service transactions, and other EDI segments like BGN, TED, and NTE. It interacts with various data models like Invoice and ApplicationAdviceOutsideBillWindow to manage billing statuses and transactions effectively.


file name is MarylandIncoming850.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming850.cs, 
filesummary is: The file MarylandIncoming850.cs is part of the EDI (Electronic Data Interchange) processing component of a larger codebase. It defines a class that handles incoming EDI messages specifically for Maryland’s 850 transaction set.

Key features identified in this file include:
- The class extends from IncomingEdiMessage, indicating it is designed to process a specific type of EDI message.
- Required segments for the EDI transaction are defined in the SetRequiredSegments method, ensuring compliance with the expected structure for the Maryland 850 transaction.
- The file relies on core libraries for business objects and EDI base functionalities, as well as system data components, indicating it is part of a broader framework for handling EDI transactions. 

No core business logic is executed in this file, as the Act and LoadService methods are not implemented.


file name is MarylandIncoming820.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming820.cs, 
filesummary is: The file MarylandIncoming820.cs is part of a larger EDI (Electronic Data Interchange) processing system, specifically designed to handle the incoming 820 transaction set for the Maryland region. This file defines the MarylandIncoming820 class, which inherits from IncomingEdiMessage and implements the logic for processing remittances, including saving service provider details, interpreting various segments of the EDI message, and handling payment information.

Key features include:
1. **Segment Processing**: The class sets required EDI segments and processes transaction information to create service provider remittance details.
2. **Data Management**: The file manages instances of ServiceProviderRemittance and ServiceProviderRemittanceDetail, coordinating data saving and adjustments based on incoming EDI message segments.
3. **Error Handling**: Specific exceptions are thrown when expected data conditions are not met, ensuring the integrity of the processing logic.

Dependencies include references to the database for transaction handling and the need to load various entities like Account and Service based on the data extracted from the incoming EDI message.


file name is MarylandIncoming814AdvanceNoticeDrop.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming814AdvanceNoticeDrop.cs, 
filesummary is: This file defines a class MarylandIncoming814AdvanceNoticeDrop, which extends functionality from MarylandIncoming814 within the EDI processing context of the Empower system. It focuses on handling incoming 814 advance notice messages specific to Maryland, determining market status based on provided dates, and saving transaction data.

Key features include managing service status (enrollment cancellation or drop pending) based on date comparisons, and defining required segments for EDI processing. The file relies on core business objects and database transaction management, interfacing with other components of the Empower system for effective EDI operations.


file name is MarylandIncoming814.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming814.cs, 
filesummary is: This file, MarylandIncoming814.cs, defines an abstract class for processing incoming EDI 814 messages specific to Maryland. It contains methods for managing account numbers and setting address and contact information based on EDI segments, utilizing several business objects within the EPSolutions.Empower framework.

Key features include:
- Retrieval of LDC account numbers and old account numbers from EDI segments.
- Methods for populating address details and contact information, which relies on specific segment structures (e.g., SegmentN1, SegmentPer).
- Custom exception handling to manage errors with meaningful messages.

The class likely depends on other parts of the EPSolutions.Empower framework, including database transaction management and business object definitions for Address and Contact types, which are essential for handling EDI data effectively.


file name is MarylandIncoming867MU.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming867MU.cs, 
filesummary is: The file MarylandIncoming867MU.cs is part of an EDI (Electronic Data Interchange) processing system focused on handling incoming monthly usage data for Maryland. It extends the MarylandIncomingEdiMessage class and implements the Act method to retrieve service usage information, update service statuses, and manage related transactions.

Key Features:
- Processes incoming "867_03 Monthly Usage" EDI transactions specifically for Maryland.
- Updates service statuses based on usage and billing information while handling both metered and unmetered types.
- Maintains and saves service usage records to a database, influenced by segments defined within the EDI message.

Dependencies:
- Relies on specific segments like Bpt, N1, and Dtm for processing, and interacts with classes such as ServiceUsageBilledByServiceProvider and ServiceTransaction to manage database records.


file name is MarylandIncoming814Drop.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming814Drop.cs, 
filesummary is: The file MarylandIncoming814Drop.cs defines a class responsible for processing incoming EDI 814 drop transactions specific to Maryland. This class inherits from MarylandIncoming814 and implements functionality to parse, validate, and respond to incoming service requests, particularly handling various action codes that dictate how service data should be modified or rejected. It interacts with a database transaction to save service changes, manages customer contact information, and ensures compliance with required data segments, which are critical for successful business operation within the EDI framework. 

Key features include:
- Handling multiple action codes to determine the appropriate response.
- Validating and saving customer data as part of the drop process.
- Providing rejection reasons when required information is missing through the EDI transaction.
- Dependencies on database transaction management and required service data structures.


file name is MarylandIncoming814Reinstatement.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming814Reinstatement.cs, 
filesummary is: The file MarylandIncoming814Reinstatement.cs defines a class for processing incoming 814 reinstatement EDI transactions specific to Maryland. Its primary function is to validate the transaction data, handle service reinstatement logic, and manage response scenarios while saving relevant service data in the system. Key dependencies include database transactions and specific service and transaction types defined within the larger codebase.


file name is MarylandIncoming810RateReady.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming810RateReady.cs, 
filesummary is: The file MarylandIncoming810RateReady.cs is part of an EDI (Electronic Data Interchange) processing module, specifically for handling incoming 810 invoice transactions in the Maryland region. This class extends the functionality of a base class for processing similar transactions and includes methods for setting required EDI segments, processing invoice details, and saving transaction data.

### Summary
The MarylandIncoming810RateReady class processes incoming 810 invoices for Maryland, defining necessary EDI segments and managing invoice details including service orders and charges. It handles invoice creation, updates statuses, and integrates with utility and service records, ensuring smooth transaction processing within the larger EDI framework. Dependencies include database interactions for invoice storage and utility service details.


file name is MarylandIncoming814Change.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming814Change.cs, 
filesummary is: The file MarylandIncoming814Change.cs contains a class that extends functionality for processing incoming EDI (Electronic Data Interchange) transactions, specifically for Maryland. It implements logic to handle changes in service locations, including validations, updates, and responses based on the transaction type. Key features include processing service transaction requests, managing updates of service details, and handling exceptions for data quality.

Dependencies include references to various core business objects and segments from the EDI standard, with interdependencies on other data entities like ServiceTransaction, ServiceLocationUpdate, and methods for saving to a database. Overall, it plays a critical role in the management of EDI transaction workflows within the larger Empower system.


file name is MarylandIncoming814Enrollment.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming814Enrollment.cs, 
filesummary is: The file MarylandIncoming814Enrollment.cs is a C# class file that defines the MarylandIncoming814Enrollment class, which processes incoming EDI 814 enrollment transactions specific to Maryland. It extends functionality from the MarylandIncoming814 class and integrates various services and data elements, such as service transactions and alerts, through actions taken on incoming EDI data.

Key Features:
- The Act() method implements logic to process enrollment responses based on specific LIN values and updates service transactions accordingly.
- Includes methods for setting contact information, processing meter data, and updating service and service location details based on incoming EDI segments.
- It maintains service states (active, inactive) and handles alerts for rejected enrollments.

Dependencies:
- Interacts with the database through service transactions and entities such as Service, ServiceTransaction, and SecondaryServiceRequest.
- Requires correct LIN segment format and adherence to expectations in EDI data for proper processing and updates.


file name is MarylandIncomingEdiMessage.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncomingEdiMessage.cs, 
filesummary is: The file MarylandIncomingEdiMessage.cs is an abstract class intended for processing incoming EDI messages specific to Maryland within the EDI processing framework of a larger codebase. This class is designed to handle the loading of services associated with accounts based on EDI data received.

The core functionality revolves around identifying and loading services tied to accounts based on criteria such as site code and account number. It references additional classes such as `Account`, `Service`, and exception handling to manage cases where a service cannot be found. Dependencies may include databases where accounts and services are stored, especially related to handling exceptions and EDI processing logic in business transactions.


file name is MarylandIncoming867HU.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming867HU.cs, 
filesummary is: The file MarylandIncoming867HU.cs contains a class that processes incoming EDI 867 HU messages specific to Maryland. It handles service transaction creation, deletes old HUD file data, and processes PTD loops to record historical meter data based on specified segments. Key dependencies include service transaction objects, database transactions for saving data, and specific segment types that it requires for processing.


file name is MarylandIncoming810.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Maryland/MarylandIncoming810.cs, 
filesummary is: This file defines an abstract class named MarylandIncoming810, which is part of an EDI processing module within a larger system for managing invoices. It outlines the structure for processing 810 EDI messages related to invoices, specifically for utility services. The class depends on a database transaction and utilizes the ServiceProviderInvoice class to handle invoice data.


file name is IncomingEdiEventType.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Events/IncomingEdiEventType.cs, 
filesummary is: The file defines an enumeration for different types of incoming Electronic Data Interchange (EDI) events specifically related to the Empower EDI Processor. This code is integral to processing various EDI transactions, enabling the system to handle different incoming event types accurately. The enumeration includes types for monthly usage reports, service order notifications, and other related transactions, highlighting the file's role in facilitating business communications and data processing in the codebase. It relates to other components that manage EDI transactions and potentially interacts with databases to store or handle these events.


file name is IncomingEdiDelegates.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Events/IncomingEdiDelegates.cs, 
filesummary is: This file defines a delegate named IncomingEdiEvent, which is designed to trigger events related to incoming EDI (Electronic Data Interchange) processing. It serves as a mechanism to handle incoming EDI messages by utilizing the IncomingEdiEventArgs parameter. The file is integral to the event-driven architecture of the EDI processing system and may depend on other EDI-related components within the larger codebase.


file name is IncomingEdiEventArgs.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Events/IncomingEdiEventArgs.cs, 
filesummary is: This file defines event argument classes used in the context of processing Electronic Data Interchange (EDI) events within a larger codebase. It encompasses various event args derived from a base class, specifically designed to convey information pertinent to different types of EDI transactions.

The core features include:
1. A base class for EDI event arguments, allowing customization for various types such as 867_03, 650_02, 864_04, and more.
2. Each derived class encapsulates properties relevant to specific EDI transactions, such as account keys, service transactions, timestamps, and user details.
3. Dependencies include the `IDbTransaction` interface for database transactions, and entities like `Service` and `ServiceTransaction`, indicating potential interactions with databases and other business objects.

This structure helps manage EDI information effectively and provides a mechanism for sending notifications and managing transaction states related to services.


file name is IncomingEdiLatitude814HA.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude814HA.cs, 
filesummary is: The file IncomingEdiLatitude814HA.cs is part of the EdiProcessor namespace, centered around processing electronic data interchange (EDI) transactions. It represents a class that handles specific EDI transaction logic, particularly for the "HA" transaction code, dealing with incoming service transactions based on the TS814 format.

This class features methods for managing service transaction records, including acceptance and rejection processes depending on the provided line items in the EDI message. It relies on other components like TS814 for transaction structure and utilizes properties such as ServiceTransaction for managing transaction states. Additionally, it interacts with a database through the IDbTransaction parameter, implying dependencies on database entities and possibly other related services for functionality.


file name is IncomingEdiLatitude814Cancel.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude814Cancel.cs, 
filesummary is: The file IncomingEdiLatitude814Cancel.cs is part of a processing system within a broader codebase focused on Electronic Data Interchange (EDI) transactions. Specifically, it defines a class that handles incoming EDI cancellations, particularly for a specific transaction type (Edi 814). This class inherits from a base class and implements functionality to manage transaction statuses and respond based on specific action codes in the data.

Key features of this file include handling the logic for accepting or rejecting EDI transactions based on line item actions, managing service status updates, and producing response types for transactions. It interacts with the database to save entry states and retrieves data through the `TS814` object, which represents the transaction data. Additionally, it defines how to address rejection reasons and the consequences for the service associated with these transactions.


file name is IncomingEdiLatitude814ND.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude814ND.cs, 
filesummary is: The file IncomingEdiLatitude814ND.cs is part of the EPSolutions.Empower.Edi.EdiProcessor namespace and defines a class that handles incoming EDI transactions specifically for an action code denoting a "Notice of Drop" (ND). This class extends another class, IncomingEdiLatitude814, and implements the core functionality to process this type of EDI transaction by creating alerts and saving transaction details to the database.

Key features include handling line item actions, creating alerts for service transactions, and generating XML responses for the designated action code. Dependencies may involve interaction with service transaction objects, alert generation, and transactions with the database. Overall, this file plays a critical role in processing specific EDI notifications within the larger context of the Empower system.


file name is IncomingEdiLatitude810RateReady.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude810RateReady.cs, 
filesummary is: The file "IncomingEdiLatitude810RateReady.cs" is a class file that is part of an EDI (Electronic Data Interchange) processing module within a larger software system for handling utility invoicing. It specifically processes incoming EDI transactions related to the 810 and 867 documents, focusing on rate readiness for invoices.

The core features of this file include initializing invoice properties, processing service order numbers, and handling billing details through various methods outlined within the class. It retrieves and calculates invoice charges, manages potential cancellations of invoices, and updates associated services based on the transaction type. Dependencies include database transactions via `IDbTransaction`, business objects like `UtilityInvoice`, and EDI segments for processing the input data.

Overall, this class is integral to ensuring accurate invoice generation and management based on EDI inputs, influencing broader functions such as billing and service readiness within the application.


file name is IncomingEdiLatitude867HU.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude867HU.cs, 
filesummary is: The file IncomingEdiLatitude867HU.cs is part of the EdiProcessor module within the Empower system, specifically handling EDI (Electronic Data Interchange) transactions related to historical usage data identified by the "HU" transaction code. It extends the functionality of a base class and implements methods to update service location historical data based on incoming EDI readings, which includes processing various reading types for both metered and unmetered services.

Key features include:
- Handling of service transactions, updating records based on specific reading types.
- Support for different reading types with clear distinctions between metered and unmetered meters.
- Interaction with a database for saving transactional data and history.

This class relies on several external entities, including TS867Readings for incoming data, and maintains integrity through its methods by saving data into the appropriate database tables and managing properties around service location and meter readings.


file name is IncomingEdiLatitude814Drop.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude814Drop.cs, 
filesummary is: The file IncomingEdiLatitude814Drop.cs is part of an EDI (Electronic Data Interchange) processing module within the EPSolutions Empower system. It specifically handles incoming EDI transactions of type 814, processing them based on the transaction purpose code and line item action codes. This class extends the base functionality provided by IncomingEdiLatitude814 and interacts with service and transaction data, updating their statuses and reasons for acceptance or rejection.

The core features include processing of line items, setting service status depending on incoming data, and managing response generation for accepted and rejected transactions. Dependencies include the TS814 data structure for transaction details, and it interacts with service and transaction objects that persist data to a database through a provided transaction object.


file name is IncomingEdiLatitude814EA.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude814EA.cs, 
filesummary is: The file IncomingEdiLatitude814EA.cs is a core component of the EDI processing system within the larger EPSolutions software framework. It extends the functionality for handling incoming EDI transactions specifically for the Latitude service, focusing on enrollment responses.

This class processes transaction logic based on various line item types from the EDI message, managing service creation, updates, and status tracking based on the incoming data. It interacts with service transactions and alerts, integrating with the database through IDbTransaction and leveraging core business objects like Service and EmpowerAlert. Key features include handling enrollment responses, managing service statuses, and logging errors during processing.


file name is IncomingEdiLatitude997.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude997.cs, 
filesummary is: The file IncomingEdiLatitude997.cs is part of the EDI processing component of a larger software system. This file specifically handles the processing of the Incoming EDI 997 messages, which are acknowledgement messages to confirm the receipt of other EDI transactions.

The class IncomingEdilatitude997 inherits from IncomingEdiLatitudeMessage and implements the Act method to process transactions from a TS997 object. It checks for the presence of transactions, updates the acknowledgment status for each transaction, and saves modifications to the OutgoingEdiFile. This functionality is dependent on a database transaction and interacts with data parameters to execute stored procedures for loading and saving data, thus forming a crucial part of the EDI transaction workflow within the codebase.


file name is IncomingEdiLatitude867MU.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude867MU.cs, 
filesummary is: The file is a C# class named IncomingEdiLatitude867MU, which processes incoming EDI (Electronic Data Interchange) transactions specifically for monthly usage data. This class extends a base class called IncomingEdiLatitude867 and includes functionality for adding and canceling service usage records based on specific transaction types and purposes.

Key features include:
1. Handling monthly usage data from EDI 867 transactions, particularly focusing on Maryland utilities.
2. Storing and updating service usage records and managing billing details based on transaction codes, such as identifying whether readings are final.
3. Integrating with a database to persist changes, requiring a valid database transaction and using various collections for organizing service usage data.

The class relies on various dependencies like the Service object, Database transaction, and specific enumerations for managing billing types and transaction codes. It also interacts with other objects such as ServiceTransaction, ServiceUsage, and Invoice, indicating a connection with a larger system involved in utility management and billing processes.


file name is IncomingEdiLatitude814.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude814.cs, 
filesummary is: The file IncomingEdiLatitude814.cs defines an abstract class for processing incoming EDI 814 transaction messages in a utility context. It establishes a structure for handling transaction data, integrating various components like meter readings, contact information, and addresses, while performing necessary business validations such as checking transaction types. The class depends on other entities like TS814, TradingPartner, and ServiceProvider and utilizes data serialization and logging mechanisms for effective processing and error management.


file name is IncomingEdiLatitude820.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude820.cs, 
filesummary is: The file IncomingEdiLatitude820.cs defines a class that processes incoming EDI (Electronic Data Interchange) transactions specifically for the LATITUDE 820 format. This class is responsible for handling the data related to service provider remittances, including creating XML representations of transaction data and saving relevant details to a database. It relies on various dependencies such as IDbTransaction for database interactions and models such as TS820 for transaction data structure, indicating its role in managing financial transactions and remittance details in the larger codebase.


file name is IncomingEdiLatitude810.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude810.cs, 
filesummary is: The file `IncomingEdiLatitude810.cs` is part of a larger EDI processing system within the EPSolutions Empower codebase, specifically handling incoming transactions of type EDI 810 for Latitude. It contains a class that processes transaction data (TS810), storing relevant information like transaction IDs, account numbers, and serialized XML data for further handling. This file likely depends on related classes such as `IncomingEdiLatitudeMessage`, `TradingPartner`, `ServiceProvider`, and the data structure `TS810`, which includes billing and commodity details.


file name is IncomingEdiLatitude568.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude568.cs, 
filesummary is: The file IncomingEdiLatitude568.cs is part of the EDI (Electronic Data Interchange) processing module within a larger Empower solutions codebase. It defines the IncomingEdiLatitude568 class, which handles incoming EDI 568 transaction messages, particularly focusing on service provider adjustments based on the extracted data.

This class leverages data from TS568 objects, serializing them into XML for processing and saving relevant service provider adjustments to a database. Dependencies include various data classes (TS568, ServiceProviderAdjustment, etc.) and the database transaction management for storing adjustments related to utility services, identified by unique keys and transaction details.


file name is IncomingEdiLatitude248RateReady.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude248RateReady.cs, 
filesummary is: The file IncomingEdiLatitude248RateReady.cs is part of the EDI processing functionality within the EPSolutions.Empower codebase, specifically for handling price and billing transactions related to energy services. It defines a class responsible for processing incoming EDI messages, creating invoices, and managing associated charges and adjustments based on provided billing data. The class relies on other components such as ServiceProviderInvoice and various charge classes to manage billing data transactions with a database, ensuring accurate invoicing based on EDI messages.

Key features include:
- Handling EDI transaction types and generating XML data for invoices.
- Managing utility invoices, including charge calculations and adjusting invoice totals based on service order numbers and line items.

Dependencies involve classes for various EDI message formats (like TS248) and related database interactions for transactions, invoices, and service providers.


file name is IncomingEdiLatitude814Change.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude814Change.cs, 
filesummary is: The file IncomingEdiLatitude814Change.cs is a key component within a larger codebase focused on processing Electronic Data Interchange (EDI) transactions. It inherits functionalities geared towards handling EDI 814 change transactions, which are typically related to service updates for utilities.

The core feature of this file is the implementation of the IncomingEdiLatitude814Change class, which encapsulates logic for managing service changes based on received EDI messages. It validates line items, processes changes, and updates service-related information within a transactional context, handling different action codes for transactions and addressing various change reasons. Dependencies include data interactions with the database through Service and DatabaseTransaction objects, as well as integration with other classes such as ServiceLocationUpdate and ServiceTransaction, indicating a reliance on a structured business logic layer.


file name is IncomingEdiLatitude867.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude867.cs, 
filesummary is: The file IncomingEdiLatitude867.cs implements an abstract class responsible for processing incoming EDI 867 transactions within a larger EDI processing system. It primarily handles the initialization and parsing of transaction data received from trading partners, specifically related to utility services. This class depends on external definitions related to EDI segments, which are critical for extracting relevant information such as meter numbers, consumption quantities, and service types.

The class relies on various components, including databases for transaction logs and external libraries for managing EDI message formats and error handling. The processing logic also utilizes data structures like dictionaries and lists to manage event handlers and meter numbers dynamically. Overall, this class is integral to the utility sector by ensuring proper handling and interpretation of EDI transactions.


file name is IncomingEdiLatitudeMessage.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitudeMessage.cs, 
filesummary is: The file IncomingEdiLatitudeMessage.cs is a part of the EDI (Electronic Data Interchange) processing module in the EPSolutions Empower system, specifically handling incoming messages for Latitude transactions. It defines an abstract class that includes properties and methods essential for processing incoming EDI messages, such as managing service transactions, site codes, and error handling related to service validations.

Key features include:
- Properties for capturing essential transaction details such as Sender, Utility, TransactionNumber, and Service related information.
- Methods for validating site codes, loading services, and checking for duplicate transactions.
- Integration with higher-level services, managed through databases such as Service and Account classes, allowing for service lookups based on utility account numbers and site codes.

Dependencies:
- Utilizes several objects like Service, Account, and ServiceTransaction alongside database transaction management, indicating a connection to data layers that manage service information. Additionally, it depends on some event handling mechanisms for reactive EDI processing.


file name is IncomingEdiLatitude824.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitude824.cs, 
filesummary is: The file IncomingEdiLatitude824.cs is part of a larger codebase focused on processing Electronic Data Interchange (EDI) transactions, particularly for the Latitude utility provider. It defines a class that manages incoming EDI transactions with a specific focus on the 824 transaction type, handling aspects like transaction processing, creating XML representations, and maintaining service application advice.

The core feature includes interpreting transaction advice, managing alerts based on transaction outcomes, and integrating with other components such as service transactions and application advice. It notably interacts with external systems and must handle database transactions, referring to ServiceTransaction, BillReadyInvoice, and EmpowerAlert objects to log and manage transaction details.


file name is IncomingEdiLatitudeParser.cs, 
file path is: Eroms_Sorted/Edi/EdiProcessor/Latitude/IncomingEdiLatitudeParser.cs, 
filesummary is: The file "IncomingEdiLatitudeParser.cs" is part of an EDI (Electronic Data Interchange) processing system, specifically designed to parse and handle incoming EDI files formatted for the Latitude EDI standard. This parser is responsible for processing various transaction sets such as FG814, FG867, FG820, and more, creating business objects like IncomingEdiLatitudeMessage, and managing database transactions for successful processing. It relies on detailed structures and functions to validate and store EDI data, integrate with service providers, and keeps track of errors and duplicates.

Key features include:
1. Parsing multiple EDI transaction types including FG814 and FG867, which may represent different functions in the EDI system.
2. Handling transaction processing, validations, and error management while interacting with underlying databases to ensure data integrity.
3. Dependencies involve database transactions, service providers, and error handling mechanisms which integrate with broader business logic and data management within the system.


file name is EdiResponse.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/EdiResponse.cs, 
filesummary is: The file EdiResponse.cs defines an abstract class EdiResponse that serves as a base for creating outgoing EDI messages related to service transactions. This class processes various segments that form part of the EDI response, including transaction details such as beginning segments, commodity characteristics, and action indicators.

Key features include handling transaction metadata, constructing specific segments like the beginning segment and commodity characteristics, and managing response types. It relies on the ServiceTransaction object, which holds transaction details and is dependent on various segment classes like SegmentBgn, SegmentLin, and SegmentAsi for functionality. This class is likely part of a larger system that focuses on electronic data interchange within the EPSolutions framework.


file name is EdiGenerator.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/EdiGenerator.cs, 
filesummary is: The EdiGenerator.cs file is a core component of the EDI (Electronic Data Interchange) processing system within the EPSolutions Empower framework. It handles the generation of various EDI documents based on service transactions, specifically for payments, service orders, and invoicing, targeting service providers in Texas and other markets. Key features include data serialization of service transactions into EDI formats, dynamic filename creation based on transaction details, and interactions with a database for storing outgoing EDI files.

Overall, this file functions within the context of managing EDI messages, leveraging various business object classes, and ensuring robust logging and exception handling throughout the generation process. Dependencies within the codebase include other EDI message classes (e.g., Edi8202, Edi6501, Edi8103), the database interaction utilities, and the logging functionalities, which are essential for maintaining track of EDI document statuses and errors.


file name is OutgoingEdiFile.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/OutgoingEdiFile.cs, 
filesummary is: The file OutgoingEdiFile.cs defines a class used to manage outgoing EDI (Electronic Data Interchange) files in an application related to the EPSolutions Empower system. It contains properties for critical attributes like sender and receiver codes, control numbers, and timestamps related to file transmissions. The class also includes a method for saving the object to a database when a file is not found, indicating dependencies on a database connection and possibly data handling utilities provided by the core library.


file name is FunctionalAcknowledgementSLoop.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/FunctionalAcknowledgementSLoop.cs, 
filesummary is: The file FunctionalAcknowledgementSLoop.cs is a class implementation for handling EDI messages specifically focused on the Functional Acknowledgement (transaction type 997). It constructs segments of the EDI message, manages transaction response codes, and tracks any syntax errors encountered in the transaction set. 

Key features include creating headers and trailers for transaction sets, managing acceptance and error statuses, and dealing with segment and data element validation. It depends on other classes such as SegmentAK2, SegmentAK5, and SegmentST, which likely represent various segments of the EDI message structure, and relies on the FAStatus enumeration to determine the acknowledgment status. The class appears integral to the overall EDI processing workflow within the codebase.


file name is FunctionalAcknowledgementEnum.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/FunctionalAcknowledgementEnum.cs, 
filesummary is: The file FunctionalAcknowledgementEnum.cs defines an enumeration for identifying various statuses related to functional acknowledgments in a transaction system. This enumeration provides a clear set of predefined values to categorize the status of transactions, which is essential for managing the business logic around transaction processing. The statuses include accepted, noted errors, and various types of rejections, facilitating better error handling and reporting in the overall application workflow.


file name is FunctionalAcknowledgementGLoop.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/FunctionalAcknowledgementGLoop.cs, 
filesummary is: The file FunctionalAcknowledgementGLoop.cs is a core component within the EDI processing module of a larger software system. It focuses on generating the functional acknowledgment message (997) as part of electronic data interchange, indicating the status of processed transactions.

The key features of this file include creating various segments of the functional acknowledgment message, managing transaction counts, and maintaining a collection of transaction acknowledgment loops. The file also defines how to handle different acknowledgment statuses and ensures the integrity of the transaction data, relying on other classes such as SegmentST, SegmentSE, and SegmentGS for segment creation. Dependencies include the FunctionalAcknowledgementSLoop collection and EDI segments which are crucial for creating well-structured EDI messages.


file name is EdiReferencedRequest.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/EdiReferencedRequest.cs, 
filesummary is: The file EdiReferencedRequest.cs defines an abstract class responsible for generating EDI (Electronic Data Interchange) referenced requests within a larger codebase focused on EDI transactions. It builds crucial segments of EDI requests using service transaction data, including transaction identification and relevant codes. This class relies on associated classes and methods to manage service transactions, and it interacts with a data store for retrieving transaction details, highlighting its role in handling business operations related to EDI processing.


file name is OutgoingEdiFileCollection.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/OutgoingEdiFileCollection.cs, 
filesummary is: The file OutgoingEdiFileCollection.cs is part of the core functionality of the EdiGenerator module within the EPSolutions.Empower.Edi namespace. It defines a collection class for managing a group of OutgoingEdiFile objects, providing methods for creating new instances and identifying the type of collected items. This class likely interacts with other components in the EDI processing system, and it may depend on the IEmpowerObject interface and the OutgoingEdiFile class that it manages.


file name is FunctionalAcknowledgement.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/FunctionalAcknowledgement.cs, 
filesummary is: The file FunctionalAcknowledgement.cs is part of an Electronic Data Interchange (EDI) generation module within a larger application. It specifically focuses on creating functional acknowledgments to be sent to clearinghouses or service providers after receiving EDI messages. The file involves constructing various segments of the EDI message, ensuring data formats are respected, and managing the acknowledgments.

This file contains core features related to EDI message creation, emphasizing the ability to generate a structured response based on input from trading partners. It depends on several components such as TradingPartner, EdiSegment, and database access for control numbers. The functionality also includes managing the acknowledgment state and attributes for the OutgoingEdiFile, which may interact with other parts of the system for tracking EDI transactions.


file name is IInvoiceSiteCodeDetail.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IInvoiceSiteCodeDetail.cs, 
filesummary is: The file is an interface definition in C# within the Edi module of a larger codebase, designed to standardize the structure for handling invoice site code details. It outlines properties such as InvoiceGroup, Amount, Rate, and Quantity, which are essential for managing invoicing data.

Features include the encapsulation of invoice-related information, which is likely used across various services or components that interact with invoicing processes. Dependencies may include other modules or classes that implement this interface, enabling a cohesive structure for invoice management within the application.


file name is IInvoiceSiteCodeTax.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IInvoiceSiteCodeTax.cs, 
filesummary is: This file defines an interface named IInvoiceSiteCodeTax within the EPSolutions.Empower.Edi.Interfaces namespace. The interface specifies properties related to invoice site code taxes, including a flag for passing through taxes, the total tax amount, and the tax authority. 

As a part of the larger codebase, this interface may serve as a contract for classes that manage tax-related functionalities in invoice processing, possibly tying into other modules that handle invoicing, taxation, and compliance with tax authorities.


file name is IService.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IService.cs, 
filesummary is: The file IService.cs defines an interface representing a service within the EDI (Electronic Data Interchange) module of the EPSolutions Empower application. It outlines various properties and methods related to service management, indicating that it handles aspects like service location, customer accounts, and notifications. This interface may interact with other components, such as data transactions and user management, depending on the implementation in concrete classes that adhere to this interface.


file name is IInvoiceAccountCharges.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IInvoiceAccountCharges.cs, 
filesummary is: This file defines an interface named IInvoiceAccountCharges, which is part of the Edi module within the EPSolutions.Empower codebase. The interface outlines two properties: Amount, representing a decimal value, and InvoiceGroupDescription, a string for describing invoice groups. This interface likely serves as a contract for implementing classes that manage invoice account charges, potentially interacting with other components of the invoicing system.


file name is ILinLoopResponse.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/ILinLoopResponse.cs, 
filesummary is: The file ILinLoopResponse.cs is an interface definition in the Edi module of a larger codebase, likely associated with Electronic Data Interchange (EDI) processes. This interface outlines the structure for handling a "Lin Loop Response," which includes properties such as LoopIdentifier, ServiceType, MaintenanceTypeCode, and ResponseType. It also defines a collection of ServiceTransactionReasons, indicating that it plays an essential role in communication or data processing regarding service transactions in the system. This file may depend on other related business objects and types defined in EPSolutions.Empower.Core.


file name is IAccount.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IAccount.cs, 
filesummary is: The file IAccount.cs defines an interface for an Account entity in the EPSolutions.Empower.Edi namespace. This interface includes properties for account details such as name, number, and balance, and it allows for associations with contact and address objects. The Load method suggests functionality for loading account information, indicating a crucial role in the overall account management within the application.


file name is ICompetitiveReseller.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/ICompetitiveReseller.cs, 
filesummary is: The file EdiGenerator/Interfaces/ICompetitiveReseller.cs defines an interface for a Competitive Reseller in the context of an EDI (Electronic Data Interchange) system. It outlines the properties and settings related to competitive resellers, such as their name, DUNS number, and configuration settings.

Core features include setting the acknowledgement requirement and distinguishing between production and test modes. This interface likely interacts with other components that implement these settings, impacting how competitive reseller data is processed within the larger EDI framework.


file name is ITradingPartner.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/ITradingPartner.cs, 
filesummary is: The file ITradingPartner.cs defines an interface that represents an EDI Trading Partner within the EPSolutions.Empower.Edi namespace. It primarily outlines the properties related to trading partners, including Duns, CommonCode, and CodeQualifier, which may be utilized by other components to implement specific trading partner logic. This interface provides a contract for any class that needs to communicate or manage data related to trading partners in the EDI context.


file name is IAddress.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IAddress.cs, 
filesummary is: The file IAddress.cs defines an interface for handling address-related data within the EdiGenerator module of the EPSolutions codebase. It includes properties for key address components such as AddressLineOne, AddressLineTwo, City, State, and Zip. This interface likely serves as a blueprint for other classes that implement address functionality, contributing to features related to electronic data interchange (EDI) within the broader system.


file name is IInvoice.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IInvoice.cs, 
filesummary is: This file defines an interface named IInvoice, which represents the structure and properties of an invoice within an invoicing system. It includes core features such as invoice details, account associations, and various collections related to invoice site codes and account charges. The interface may depend on other interfaces or classes, including IAccount and several collections for site code usage, details, and taxes, suggesting a structured approach to managing invoice data within the larger codebase.


file name is IServiceProviderPayment.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IServiceProviderPayment.cs, 
filesummary is: This file defines an interface for handling ServiceProvider payments in the Edi module of the EPSolutions Empower system. It outlines properties such as TotalAmount, PaymentMethod, EffectiveDate, and others necessary for processing payments to Transmission and Distribution Service Providers (TDSP). This interface depends on the IPaymentDetail interface and is likely part of a larger system that handles payment transactions involving service providers.


file name is IEdiRequest.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IEdiRequest.cs, 
filesummary is: The file IEdiRequest.cs defines an interface within the EPSolutions.Empower.Edi.EdiGenerator namespace. It outlines a set of methods related to electronic data interchange (EDI) requests, focusing on various aspects such as billing information, customer details, service information, and special needs indicators. This interface serves as a contract that other classes can implement, enabling consistency and modularity in handling EDI requests across the codebase, likely requiring integration with EDI processing systems or databases for data exchange.


file name is IInterfaces.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IInterfaces.cs, 
filesummary is: The file IInterfaces.cs is an interface definition file, likely part of a larger codebase focused on Electronic Data Interchange (EDI) processes. It currently does not contain any methods or properties, indicating it may serve as a placeholder for future implementation of EDI-related interfaces. Typically, such files are essential for establishing contracts in object-oriented programming, suggesting potential dependencies on classes that would implement these interfaces in interacting with other components of the EDI system.


file name is IContact.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IContact.cs, 
filesummary is: The file IContact.cs defines an interface for managing contact information within the Edi (Electronic Data Interchange) module of the EPSolutions Empower framework. It outlines properties related to personal identification and communication, such as phone numbers, social security details, and driver's license information. This interface likely serves as a contract for implementing contact-related functionalities in other parts of the application, which may interact with databases to store or retrieve contact records.


file name is IServiceLocation.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IServiceLocation.cs, 
filesummary is: This file defines an interface named IServiceLocation, which outlines the structure for service location entities within the application. It includes properties for various address details, service provider information, and a historical site code. This interface likely plays a crucial role in the business logic related to service management in a larger system, possibly linking to databases that store address and service provider information.


file name is IServiceProvider.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IServiceProvider.cs, 
filesummary is: The file is an interface definition in C#. It defines the structure for a ServiceProvider, which is likely part of a larger system related to electronic data interchange (EDI) operations. 

The IServiceProvider interface outlines properties such as Name, Duns, IsMuniCoop, CommonCode, CodeQualifier, and associations with IClearingHouse and ServiceProviderBillType. This suggests it is crucial for managing service provider information in the EDI context, potentially interacting with other components that handle billing and healthcare data transactions.


file name is IOutgoingEdiMessage.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IOutgoingEdiMessage.cs, 
filesummary is: The file IOutgoingEdiMessage.cs defines an interface for generating outgoing EDI (Electronic Data Interchange) messages within the EPSolutions Empower Edi framework. This interface includes methods for constructing various components of EDI messages, such as creating the message body, handling specific account numbers, and setting transaction details. It interacts with business objects such as ReasonType and ServiceTransaction, indicating dependencies on core business logic and data management in the broader codebase.


file name is IClearingHouse.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IClearingHouse.cs, 
filesummary is: The file IClearingHouse.cs defines an interface related to the structure of a Clearing House in the context of an electronic data interchange system. It outlines essential properties such as Name, Duns, CommonCode, and CodeQualifier, which are likely used by various components of the system to manage and represent Clearing House entities. This interface may serve as a contract for implementing classes that handle data related to Clearing Houses, facilitating consistency and integration within the larger EDI module of the codebase.


file name is IPaymentDetails.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IPaymentDetails.cs, 
filesummary is: The file IPaymentDetails.cs defines an interface for payment details within the context of an Electronic Data Interchange (EDI) system. This interface outlines essential properties such as transaction number, site code, invoice number, and amount, which are crucial for processing payment-related information. It likely interacts with other components that handle transaction processing and invoicing, ensuring consistent structure and data integrity throughout the application.


file name is IServiceTransactionReason.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IServiceTransactionReason.cs, 
filesummary is: The file IServiceTransactionReason.cs defines an interface that outlines the structure for service transaction reasons within the application. It includes properties for reason type, reason code, and description, which suggest its role in handling transaction-related data. This interface may serve as a contract for classes that implement it, facilitating consistent management of transaction reasons across the codebase.


file name is IInvoiceSiteCodeUsage.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IInvoiceSiteCodeUsage.cs, 
filesummary is: The file IInvoiceSiteCodeUsage.cs defines an interface for managing invoice site code usage within the Edi module of the EPSolutions Empower project. It outlines properties related to service periods and meter numbers essential for invoice processing. This interface likely interacts with other components in the codebase that handle invoice generation and service usage tracking.


file name is ICRSettings.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/ICRSettings.cs, 
filesummary is: The file ICRSettings.cs defines an interface related to the CR Settings used in the EDI (Electronic Data Interchange) context of the EPSolutions Empower project. This interface outlines properties for configuration options like date logic and enrollment letter sending. It may interact with other components of the codebase that handle EDI processes and settings management.


file name is IServiceDate.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IServiceDate.cs, 
filesummary is: The file IServiceDate.cs defines an interface in the context of an EDI (Electronic Data Interchange) system. It outlines the structure for managing service date information, including properties like ServiceKey, ServiceDateType, and timestamps for creation and processing. This interface is likely leveraged by other components in the codebase that handle service date processing and storage, depending on the database transaction management for data persistence.


file name is IServiceOrderPoleNumber.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IServiceOrderPoleNumber.cs, 
filesummary is: The file defines an interface named IServiceOrderPoleNumber within the EPSolutions.Empower.Edi.Interfaces namespace. This interface includes a single property, PoleNumber, which is meant to represent a pole number associated with a service order. 

As a core component of the codebase, this interface likely serves as part of a larger framework for managing service orders in an EDI (Electronic Data Interchange) process, enabling various classes to implement and utilize pole number data effectively. It may interact with other classes or data structures that handle service order information.


file name is IServiceTransaction.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IServiceTransaction.cs, 
filesummary is: The file IServiceTransaction.cs defines an interface for handling service transactions within the Edi component of the Empower framework. This interface outlines various properties and methods essential for managing service transaction data, including transaction details and related collections. It interacts with other components like IService and includes database-related properties, indicating dependencies on system data structures and relationships.


file name is IServiceOrder.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Interfaces/IServiceOrder.cs, 
filesummary is: This file defines an interface for a Service Order within the EPSolutions.Empower.Edi namespace. It outlines key properties related to service orders, such as service details, transaction type, action codes, and scheduling information, which are essential for managing service requests. This interface serves as a contract for implementations that interact with service orders, potentially linking to other components like service management services or databases handling service-related data.


file name is Edi8202.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi8202.cs, 
filesummary is: The file Edi8202.cs is a class definition for generating EDI 820 payment order remittance advice documents. It extends the EdiResponse class and manages the creation of document segments, including payment information, payer, payee details, and invoice specifics. The file relies on business objects like ServiceProviderPayment and ServiceTransaction for data and segments like SegmentBpr and SegmentN1 to structure the EDI output, ensuring accurate financial data transmission.


file name is Edi8148.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi8148.cs, 
filesummary is: This file, Edi8148.cs, is part of a larger codebase related to electronic data interchange (EDI) processes, specifically for generating EDI 814/8 requests. It defines the Edi8148 class, which extends the EdiReferencedRequest class, focusing on creating a structured body for the EDI message. Key features include generating segments for customer information, service details, and action indicators, all of which support business transactions in a service-oriented context and rely on the core EDI framework provided by the referenced libraries.


file name is Edi8103.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi8103.cs, 
filesummary is: The file Edi8103.cs defines a class responsible for generating an EDI 810 transaction, specifically tailored for handling invoice data in a structured format. The class utilizes various segments to encapsulate detailed invoice information, including invoice dates, totals, service periods, and usage charges, facilitating automated electronic data interchange. It relies on the Invoice and ServiceTransaction objects, integrating with other EDI segment classes that structure the data accurately for transmission.

Key features include:
- **Detailed Invoice Representation**: Encapsulates invoice information including account details, previous balances, current charges, and usage details.
- **Dynamic Data Population**: Generates EDI segments based on invoice properties, supporting diverse invoice scenarios such as cancellations.
- **Dependencies**: Relies on other classes such as SegmentBig, SegmentRef, SegmentBal, and Invoice, which may interact with a database or another module that manages invoices and transactions.


file name is Edi81424.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi81424.cs, 
filesummary is: The file Edi81424.cs is a core component of the system that handles the generation of EDI (Electronic Data Interchange) 814 transactions related to service requests in a Texas context. It defines the Edi81424 class, which extends a base EDI request class and includes methods to construct various segments of the EDI message, based on the details of the service transaction provided.

Key features include methods to create segments for customer information, service location, billing details, and specific instructions related to service transactions. The implementation relies on the ServiceTransaction object, indicating dependencies on service-related data, and introduces elements like move-out dates and instructions that may influence the transaction processing logic.


file name is EdiRequest.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/EdiRequest.cs, 
filesummary is: The file EdiRequest.cs defines an abstract class that serves as a blueprint for generating EDI (Electronic Data Interchange) requests. It implements core functionalities for constructing various segments of the EDI message, including customer information, billing details, and indicators based on the service transaction data.

Key features include methods for defining segments like `RequestBeginningSegment`, `ServiceInformation`, `AdministrativeContact`, and `BillingType`, which all rely on a `ServiceTransaction` object for data input. The file potentially interfaces with other components such as segment classes (e.g., SegmentBgn, SegmentN1) and handles specific logic based on different service providers.


file name is Edi81412.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi81412.cs, 
filesummary is: The file Edi81412.cs is part of the EDI (Electronic Data Interchange) processing functionality in the larger EPSolutions Empower codebase. It specifically defines the Edi81412 class for generating EDI 814 messages, which are used for service requests in transactional contexts.

This class builds various segments of the EDI message, including customer information, service details, and specific dates related to the service transaction. It relies on the ServiceTransaction object to access relevant data, such as service dates and priority codes, ensuring correct formatting and validation within the EDI standard.


file name is Edi814PD.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi814PD.cs, 
filesummary is: This file, Edi814PD.cs, is part of the EDI (Electronic Data Interchange) processing component of a larger software system. It defines the Edi814PD class that constructs an EDI message for transaction type 814-1, which typically involves data related to service transactions.

The core features of this file include the creation of various segments necessary for the EDI message, such as the beginning segment, service provider details, and commodity characteristics. It relies on dependencies like the ServiceTransaction class for transaction details and on other segment classes like SegmentLin and SegmentAsi to build the specific components of the EDI message. The implementation indicates that it handles both accepted and rejected transaction responses.


file name is Edi81426.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi81426.cs, 
filesummary is: The file Edi81426.cs is a core component of the EDI (Electronic Data Interchange) processing system, specifically designed to generate EDI messages for transaction type 814-1. It extends a base class for EDI requests and implements methods that construct the body of the EDI message, incorporating segments for client details, service zip codes, clearinghouse, and specific commodity characteristics. Dependencies include the ServiceTransaction object and various segments for composing the EDI structure, which may relate to other parts of the system handling transactions and service requests.


file name is Edi8141.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi8141.cs, 
filesummary is: The file Edi8141.cs is part of a larger codebase that handles Electronic Data Interchange (EDI) transactions. Specifically, this file defines the Edi8141 class, which generates an EDI message for the transaction type 814-1, focused on service requests. This class relies on the ServiceTransaction object and contains various methods to construct different segments of the EDI message, including customer and service information, billing details, and notifications.

Key features include:
- Construction of the EDI message body through multiple segments.
- Dynamic handling of service location logic and competitive reseller settings.
- Dependency on ServiceTransaction and its properties, such as service details and historical usage requests, which dictate how segments are populated.


file name is Edi6501.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi6501.cs, 
filesummary is: The file Edi6501.cs defines the Edi6501 class, which is a part of the EDI generation process for service orders within the Empower system. It extends the EdiReferencedRequest class and primarily constructs and validates the structure of an Electronic Data Interchange (EDI) message specifically for maintenance requests in Texas, ensuring compliance with various service order codes and requirements. Dependencies include ServiceOrder and ServiceTransaction objects that provide essential order information and validation functions which rely on predefined structures such as SegmentBgn, SegmentN1, and others to format the EDI message correctly.


file name is Edi8249.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi8249.cs, 
filesummary is: The Edi8249.cs file is part of the EDI (Electronic Data Interchange) generation module within a larger codebase focused on financial transactions. Specifically, this file handles the creation of the EDI 824 transaction response, which acknowledges the receipt of a transaction and provides information about its processing status.

The core features of this file include the construction of different response segments based on the service transaction details, such as transaction number, date, and the error descriptions related to the processed transactions. It also manages interactions with other code segments like SegmentBgn, SegmentOti, and SegmentTed, which likely represent various EDI components. Additionally, the implementation requires data from the ServiceTransaction object, which encompasses transaction-related details and may involve dependencies on other system components responsible for processing these transactions.


file name is Edi81416.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi81416.cs, 
filesummary is: This file, Edi81416.cs, is part of the EPSolutions Empower system and defines a class responsible for constructing EDI (Electronic Data Interchange) messages specifically for transaction type 814-1. The class inherits from EdiRequest and overrides methods to create various segments of the EDI message, including customer details, service information, billing, and additional request features.

Key features include assembling specific segments like Permit, Commodity Characteristics, and Priority Code based on the properties of the ServiceTransaction object. This implementation relies on XML data for dynamic information, interacts with segment-specific classes, and handles optional fields like Instructions to TDSP. Dependencies include various business objects and enums from the core and domain layers of the system.


file name is OutgoingEdiMessage.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/OutgoingEdiMessage.cs, 
filesummary is: The OutgoingEdiMessage.cs file defines an abstract class for generating outgoing EDI (Electronic Data Interchange) messages specific to transactions in Texas. The class utilizes properties and logic related to service transactions, including handling control numbers, EDI segments, and the integration of trading partner information for transmission.

This file is central to the codebase as it outlines the method for creating EDI messages, including the segments unique to Texas transactions, company identifiers, and receiver validation. Key dependencies include the ServiceTransaction object and various segments related to EDI processing, such as SegmentIsa, SegmentGs, and others that correspond to details of a service transaction.


file name is Edi81418.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi81418.cs, 
filesummary is: The file Edi81418.cs implements the EDI message structure for transaction type 814-1 within an electronic data interchange system. It defines methods to create an EDI message body, including customer details, action indicators, and various date segments while interacting with a service transaction object. Key dependencies include various segment classes like SegmentDtm and SegmentAsi, and it utilizes properties from the ServiceTransaction object to customize message generation based on specific conditions.


file name is Edi814PC.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Texas/Edi814PC.cs, 
filesummary is: The file Edi814PC.cs is part of an EDI (Electronic Data Interchange) generator module specifically for handling transaction type 814-1. It focuses on constructing the EDI message, encapsulating business logic related to customer and contact information, billing details, and service attributes. Key dependencies include the ServiceTransaction object that provides data from various business entities and external XML data for optional segments.

The file has features that include creating various segments of the EDI message, handling customer details, primary and secondary contact information, and optional power outage contact details. It relies on predefined enums, segment classes, and methods from the EPSolutions.Empower namespace to function properly within the larger codebase.


file name is PJMEdiRequest.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/PJMEdiRequest.cs, 
filesummary is: The file PJMEdiRequest.cs defines an abstract class for generating Electronic Data Interchange (EDI) requests specific to Maryland's market. It builds upon a base class and includes methods to define various segments of EDI requests, such as commodity characteristics, billing types, and billing calculations, utilizing service transaction data. This file likely interacts with service transactions and other EDI-related classes, playing a crucial role in handling EDI data formatting and ensuring compliance with billing specifications for utilities.


file name is Maryland814Reinstatement.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/Maryland814Reinstatement.cs, 
filesummary is: The file Maryland814Reinstatement.cs is part of the EPSolutions Empower EDI processing code that handles the generation of EDI 814 Reinstatement messages specific to Maryland. It defines a class that inherits from EdiResponse and implements methods to create various segments of the EDI message.

Key features include:
- Creating the body of EDI messages starting from the beginning segment (BGN).
- Handling error descriptions based on transaction reasons.
- Constructing segments for customer and commodity characteristics.
- The implementation relies on the ServiceTransaction class and interactions with various EDI segment classes like SegmentBgn, SegmentLin, and SegmentAsi.

Dependencies include ServiceTransaction and its properties, such as ReasonCollection and Service, which provide the necessary data for message generation.


file name is Maryland814Response.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/Maryland814Response.cs, 
filesummary is: The Maryland814Response.cs file defines a class responsible for generating EDI (Electronic Data Interchange) responses specifically for Maryland's 814 transaction type. It extends the EdiResponse base class and includes methods to create different segments of the response, building the transaction body and handling various details such as commodity characteristics and action indicators. The class depends on service transaction objects and segment definitions to create a well-structured EDI response based on incoming transaction data.


file name is Maryland810LDC.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/Maryland810LDC.cs, 
filesummary is: The file Maryland810LDC.cs is part of a codebase that deals with Electronic Data Interchange (EDI) specifically for generating EDI 810 invoices for Maryland's utilities. It contains classes and methods to construct EDI messages that include billing details, account information, and various charges related to services like natural gas and electricity.

Key features of this file include:
1. **Invoice Creation**: The class handles the construction of a complete EDI 810 invoice using information from the `Invoice` object and related service transactions.
2. **Charge Computation and Segmentation**: Several methods compute different charges (e.g., usage charges, customer charges, adjustments, and taxes) and add corresponding segments to the EDI document structured according to the EDI standards.
3. **Conditional Logic**: The handling of charges and segments varies based on invoice states (canceled, final, etc.) and service provider characteristics.
4. **Cumulative Processing**: The class aggregates and formats monetary amounts and date fields, leading to a well-structured final EDI document.

Dependencies include the `Invoice`, `ServiceTransaction`, and related objects, as well as various segment classes (e.g., `SegmentBal`, `SegmentIT1`) utilized for building the EDI segments based on defined business rules and state requirements.


file name is Maryland824.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/Maryland824.cs, 
filesummary is: The file Maryland824.cs is part of the EDI (Electronic Data Interchange) generator module within the EPSolutions Empower framework. It contains the implementation of the Maryland 824 EDI response, which is used for handling specific types of service transactions.

Key features include the creation of the EDI body, segments for the transaction's beginning, original transaction information, and error descriptions. It processes various data fields based on the service transaction, specifically taking into account the document type and commodity type for natural gas. Dependencies include the ServiceTransaction and segments like SegmentBgn, SegmentOti, and SegmentTed, which are crucial for structuring the EDI response appropriately.


file name is Maryland814DropRequest.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/Maryland814DropRequest.cs, 
filesummary is: The file Maryland814DropRequest.cs is part of the EDI (Electronic Data Interchange) code generation system within the EPSolutions Empower platform, specifically tailored for handling Maryland 814 drop requests. This class is a specialized implementation for creating EDI messages that include a variety of segments such as service provider, customer details, and commodity characteristics.

Key features include methods for initializing segments, handling request details, and validating reasons associated with service transactions. The implementation includes dependencies on ServiceTransaction objects and various segment classes that facilitate the generation of structured EDI data.


file name is Maryland814E.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/Maryland814E.cs, 
filesummary is: The file Maryland814E.cs is part of the EDI (Electronic Data Interchange) generator for processing transaction type 814E specific to Maryland. It defines the Maryland814E class, which constructs EDI messages by implementing necessary methods to generate required segments and loops, like service provider and customer information, as well as enrollment details.

Key features include the creation of an EDI message body, handling service-specific conditions (e.g., for "NJNG"), and defining segments related to utility services. The class depends on backend objects like ServiceTransaction and various business rules defined in base classes and other methods to manage the message generation accurately.


file name is Maryland814HU.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/Maryland814HU.cs, 
filesummary is: This file, Maryland814HU.cs, is part of the EDI (Electronic Data Interchange) generation module within the EPSolutions Empower framework. It defines the Maryland814HU class, which is responsible for creating an EDI message specifically for the transaction type 814HU - Historical Usage Request. 

The core features of this file include building the body of the EDI message by invoking various methods to format different segments like the request beginning, service provider details, and customer information. It also conditionally handles historical usage and interval requests based on the attributes of the ServiceTransaction object, which may depend on related business logic and data structures in the overall system, such as service definitions and request types.


file name is Maryland814DropResponse.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/Maryland814DropResponse.cs, 
filesummary is: The file Maryland814DropResponse.cs defines a class responsible for generating an EDI (Electronic Data Interchange) response specific to Maryland's 814 transaction set. This code directly contributes to the EDI processing feature of the larger codebase, handling aspects such as building segments for service transactions, managing error descriptions, and defining response actions.

The class utilizes various segments like BGN, LIN, and ASI to structure the EDI response based on the service transaction's details. Key functions include creating the body of the EDI response, setting error codes when transactions are rejected, and handling specific characteristics of the commodities involved. Attention is needed to ensure that certain conditions are met, like having only one LIN segment for the incoming drop request. Dependencies include classes and objects related to service transactions, specific segment types, and exception handling through EmpowerException.


file name is Maryland814Request.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/Maryland814Request.cs, 
filesummary is: The file Maryland814Request.cs is part of the EDI (Electronic Data Interchange) module within a larger software system designed to manage service transactions, specifically for the Maryland 814 request format. This class extends the PjmEdiRequest base class and implements several methods to generate EDI segments based on service transaction data, such as requests for historical usage, interval data, and various service-level information.

Key features include the creation of segments for different service requests (like historical usage and interval requests), handling time zone information, and generating rate and tax-related segments based on service provider configurations. The class also relies on objects like ServiceTransaction, SegmentAsi, SegmentLin, SegmentDtm, and SegmentAmt, which likely represent different components of the EDI message structure and may connect to other parts of the codebase tied to service transactions and service provider information.


file name is Maryland814ChangeRequest.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/Maryland814ChangeRequest.cs, 
filesummary is: This file defines the `Maryland814ChangeRequest` class, which is a specialized request handling class that extends a base class for Maryland 814 EDI transactions. It encapsulates the logic for creating various segments of an EDI message based on the properties of a service transaction, particularly focusing on different change request types and specific conditions for New Jersey and Ohio service locations.

Key features include:
- Creation of various EDI segments like account numbers, billing types, and commodity characteristics.
- Handling different change request types and conditions for New Jersey and Ohio utilities, including rate and billing changes, meter information, and government aggregation adjustments.
- Dependencies on the `ServiceTransaction`, which affects how EDI message segments are constructed based on the service location and the type of change being requested.


file name is Maryland248Writeoff.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Maryland/Maryland248Writeoff.cs, 
filesummary is: The file Maryland248Writeoff.cs is a class that implements the EDI (Electronic Data Interchange) for Maryland's EDI 248 Write-Off transactions. It is part of a larger codebase focusing on managing EDI transactions within the EPSolutions Empower system, specifically handling account data and service transactions.

Feature Summary:
- This class extends the EdiRequest class to create structured EDI messages for write-offs or cancellations.
- It involves properties for account management and methods to construct the EDI message body, incorporating crucial segments such as account numbers, customer names, and balance details.
- It relies on the Account and ServiceTransaction classes, and employs various segment classes for EDI formatting, indicating relationships with these external components.


file name is .NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/obj/Release/.NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
filesummary is: This file is an autogenerated assembly attributes file related to a .NET Framework project, specifically targeting version 4.7.2. It serves as a configuration file that informs the compiler and runtime about the framework version used, but does not contain any core business logic. Its role is essential for ensuring compatibility with the defined framework but is not directly involved in the application's logic or features.


file name is EPSolutions.Empower.Edi.EdiGenerator.csproj.FileListAbsolute.txt, 
file path is: Eroms_Sorted/Edi/EdiGenerator/obj/Release/EPSolutions.Empower.Edi.EdiGenerator.csproj.FileListAbsolute.txt, 
filesummary is: The file appears to be a generated list of file paths related to the EdiGenerator project within the Empower solution. It primarily includes references to compiled binaries, configuration files, and various caches pertaining to the build process. This indicates that it supports the project's build and deployment processes rather than containing core business logic.

Summary: This file lists absolute paths for various output and configuration files associated with the EdiGenerator project. It includes DLLs and cache files generated during the release build process. It serves as part of the project's structure for tracking compiled resources rather than containing executable code.


file name is .NETFramework,Version=v4.8.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/obj/Release/.NETFramework,Version=v4.8.AssemblyAttributes.cs, 
filesummary is: This file is an autogenerated assembly attributes file related to a .NET Framework project, specifically targeting version 4.8. It serves as a reference point for the project's configuration in relation to the .NET environment. This file does not contain any business logic or core functionality.


file name is .NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/obj/Release/.NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
filesummary is: This file is an autogenerated assembly attributes file used in .NET development. It specifies that the codebase targets the .NET Framework version 4.8.1. As a configuration file, it does not contain core business logic and primarily serves to define the framework dependencies for the project.


file name is .NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/obj/Debug/.NETFramework,Version=v4.7.2.AssemblyAttributes.cs, 
filesummary is: This file is a generated assembly attribute file for a .NET Framework project, specifically indicating the target framework version. It does not contain any business logic or core code features. Its role is to provide metadata necessary for the project to compile and run in the specified environment (i.e., .NET Framework 4.7.2).


file name is EPSolutions.Empower.Edi.EdiGenerator.csproj.FileListAbsolute.txt, 
file path is: Eroms_Sorted/Edi/EdiGenerator/obj/Debug/EPSolutions.Empower.Edi.EdiGenerator.csproj.FileListAbsolute.txt, 
filesummary is: The file appears to be a list of absolute paths to various components associated with the build process of the EdiGenerator project within the Empower suite. It includes references to DLL files, configuration files, and debug information, which are integral to the development and debugging processes.

This file does not contain core business logic or documentation, but serves as a boilerplate for project organization and build tracking. It is primarily used to manage dependencies and versioning within a development environment.


file name is .NETFramework,Version=v4.8.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs, 
filesummary is: The file appears to be a generated assembly attributes file for a .NET Framework project, which specifies the target framework version. It is part of the build process and is not related to the core business logic of the codebase.

This is a boilerplate file that indicates the project is targeting .NET Framework version 4.8. It serves as metadata for the assembly and does not contain any code or features relevant to the application's functionality.


file name is .NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/obj/Debug/.NETFramework,Version=v4.8.1.AssemblyAttributes.cs, 
filesummary is: This file is a generated assembly attributes file related to the .NET Framework. It specifies the target framework version as .NET Framework 4.8.1 and doesn't contain any business logic or core functionality. Its primary purpose is to provide framework information for the build process and project settings.


file name is ServiceTransactionReason.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Helpers/ServiceTransactionReason.cs, 
filesummary is: The file ServiceTransactionReason.cs is a core business logic component within the EdiGenerator module of the EPSolutions Empower codebase. It defines the ServiceTransactionReason class, which encapsulates details about service transaction reasons including properties like ReasonType, ReasonCode, and Description. The class relies on the EmpowerBusinessObject as a base, indicating it integrates with a broader set of business objects and includes a Save method that performs validation and persistence operations. Dependencies include the Core.BaseLibrary and Core.BusinessObjects, suggesting it interacts with business logic and potentially a database for transaction handling.


file name is ServiceDate.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Helpers/ServiceDate.cs, 
filesummary is: The file ServiceDate.cs defines a helper class for managing service dates within the EDI (Electronic Data Interchange) context of the EPSolutions Empower project. It includes properties like ServiceKey, ServiceDateType, and DateItself, as well as methods to load service date records from a database. The class facilitates tracking and retrieving unprocessed service dates based on specific criteria, dependent on the underlying database operations defined by stored procedures.


file name is ServiceTransactionCollection.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Helpers/ServiceTransactionCollection.cs, 
filesummary is: This file, ServiceTransactionCollection.cs, defines a collection of service transactions within the EdiGenerator module of the Empower system. It implements a collection for managing IEmpowerObject instances, specifically in the context of Electronic Data Interchange (EDI) processes. The class facilitates streamlined handling of service transactions, potentially relying on other interfaces and base libraries within the Empower framework.


file name is EdiLatitudeRequest.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Latitude/EdiLatitudeRequest.cs, 
filesummary is: The file EdiLatitudeRequest.cs is part of the EPSolutions Empower codebase, specifically related to generating EDI (Electronic Data Interchange) messages for latitude services in the EDI framework. This abstract class serves as a base for creating outgoing EDI latitude requests, focusing on managing bill calculations and presenters based on service transactions, and handling various service and customer billing details. It relies on the EPSolutions.Empower.Core library and contains dependencies on business objects like ServiceTransaction, Invoice, and various EDI message types (e.g., TS810, TS814).

The key features include:
- Abstract methods for commodity characteristics and various request segments.
- Properties for utility and ESCO account numbers, billing types, and commodity types, which are derived from service transactions.
- Methods for constructing beginning segments and managing service information related to customer notifications and billing.

This code is integral to the proper handling of EDI requests and their corresponding data attributes within the larger framework, ensuring compatibility with various service provider requirements.


file name is EdiLatitude824.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Latitude/EdiLatitude824.cs, 
filesummary is: The file EdiLatitude824.cs defines a class that is part of a project handling Electronic Data Interchange (EDI) transactions, specifically for generating messages related to EDI transaction type 824, which is used to provide information about previous transactions. This class builds the structure and body of the EDI message, incorporating service transaction details and specific error handling.

Key features include the creation of the EDI message body with segments like RequestBeginningSegment and CompetitiveReseller, along with error code management (for instance, for an account not found error). It has dependencies on various EDI base classes that provide common functionality and data structures needed for EDI transactions, as indicated by its use of classes like TS824TransactionAdvice and ErrorCodes. This file plays a crucial role in handling specific EDI message formatting and responding to transaction communication.


file name is EdiLatitude814CQ.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Latitude/EdiLatitude814CQ.cs, 
filesummary is: The file EdiLatitude814CQ.cs defines a class related to generating EDI (Electronic Data Interchange) requests, specifically for Latitude 814 transactions. This class extends the EdiLatitudeRequest base class to manage service transaction requests with functional characteristics for utilities, such as adjusting billing types based on various business rules and conditions. It interacts with service transactions and handles items related to service charges, meter reasons, and general information creation necessary for processing utility service requests.

The file primarily consists of methods that construct the body of the EDI request, set the necessary attributes for line items, and define specific behaviors depending on the type of change request and the service provider involved. Dependencies include foundational classes from EPSolutions.Empower.Core.BaseLibrary, various enums and business objects, as well as external collections for managing usage charges.


file name is EdiLatitude814HQ.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Latitude/EdiLatitude814HQ.cs, 
filesummary is: The file EdiLatitude814HQ.cs is a core component for generating EDI transactions, specifically for the 814-1 transaction type in the EPSolutions Empower system. It contains business logic to construct EDI messages based on service transactions related to electricity and natural gas, including various business rules for handling different service providers, DUNS numbers, and commodity types. The file relies on classes and methods from other modules in the EPSolutions namespace, particularly for managing specific transaction details and service characteristics.


file name is EdiLatitude814DA.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Latitude/EdiLatitude814DA.cs, 
filesummary is: The file EdiLatitude814DA.cs is a C# class that extends the EdiLatitudeRequest class and is part of an Electronic Data Interchange (EDI) processing system. It specifically handles the creation of the body for EDI transaction types related to Latitude 814 documents. The core feature is the creation and serialization of EDI messages based on service transactions, which interact with XML data and dependent classes.

The EdiLatitude814DA class relies on EdiBase package, particularly the TS814 structure, to formulate the required EDI response. It includes error handling for empty or invalid XML strings and enforces specific response types. This suggests its integral role in a broader system focused on automated transaction processing within a business context involving data exchanges.


file name is EdiLatitude814EC.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Latitude/EdiLatitude814EC.cs, 
filesummary is: The file EdiLatitude814EC.cs is a critical part of an EDI (Electronic Data Interchange) generation system, specifically for handling requests related to the Latitude 814 transaction set. It defines the structure and rules for generating EDI requests based on service transactions involving electricity or natural gas. 

Key features include setting the service status, generating transaction body with commodity details, conditionally managing billing types, and handling specific business rules based on service provider requirements. It relies on various classes from the core library and data models, including ServiceTransaction, EDI message formats, and charge plans.


file name is EdiLatitude814EQ.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Latitude/EdiLatitude814EQ.cs, 
filesummary is: The EdiLatitude814EQ.cs file is part of the EPSolutions.Empower EDI generator, specifically designed to construct EDI messages for transaction type 814-1 related to service transactions. It builds message bodies incorporating service details, billing information, and specific rules based on the type of service (electricity or natural gas).

Features include:
- Dynamic generation of EDI message components based on transaction characteristics.
- Handling various service types and billing rules, with conditional logic for specific service providers.
- Dependency on several business objects and libraries for domain-specific operations, including service transaction attributes, billing logic, and commodity types.

The class relies on external components such as EDI base classes and needs integration with services like tax calculation functionalities and data storage, interacting with various databases for effective function.


file name is OutgoingEdiLatitudeMessage.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Latitude/OutgoingEdiLatitudeMessage.cs, 
filesummary is: The file OutgoingEdiLatitudeMessage.cs defines an abstract class for generating outgoing EDI messages specifically for the Latitude EDI provider. It manages details related to service transactions, invoices, and EDI file structures, facilitating the construction of EDI segments and maintaining relationships with service providers and competitive resellers based on transaction data. Key dependencies include service transactions and various EDI message formats, which may reference additional libraries like EdiBase and core business object structures.


file name is EdiLatitude814CA.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Latitude/EdiLatitude814CA.cs, 
filesummary is: The file EdiLatitude814CA.cs is part of the EDI (Electronic Data Interchange) generation functionality within the EPSolutions.Empower codebase, specifically for handling latitude-related data transactions in the 814 transaction set. It defines the EdiLatitude814CA class, which extends the EdiLatitudeRequest class and is responsible for creating the body of an EDI transaction response based on incoming XML data. This class relies on a service transaction to drive the process, manipulating objects from the EdiBase.Latitude namespace and potentially interacting with other components for data validation and processing. 

Key features include handling the deserialization of XML responses into strongly typed data structures, managing transactional states, and supporting the response creation logic, which may depend on other components like X12File and transaction purpose types. Overall, it plays a critical role in ensuring the correct formulation of EDI messages for business communication in relevant contexts, such as financial transactions or service requests.


file name is EdiLatitude810BillReady.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Latitude/EdiLatitude810BillReady.cs, 
filesummary is: The file EdiLatitude810BillReady.cs is part of an Electronic Data Interchange (EDI) system, specifically focused on implementing the Maryland EDI 810 billing process. This class is responsible for generating EDI-ready invoices and handling various aspects related to billing such as customer charges, taxes, and invoice resending. It interacts with other components to prepare and structure billing information for electrical utility services.

The core features of this file include:
1. Creation of EDI 810 billing invoices tailored specifically for the Maryland utility sector.
2. Management of various billing components such as adjustments, usage charges, and taxes that follow state-specific guidelines.
3. Dependency on data parameters, service transactions, and invoice collections that are likely defined in other parts of the codebase, ensuring a cohesive data flow for EDI transactions. 

This class supports a range of business logic surrounding invoice management, specifically for utility billing, and operates closely with other classes related to invoices and service transactions in the domain.


file name is EdiLatitude814DQ.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Latitude/EdiLatitude814DQ.cs, 
filesummary is: The file EdiLatitude814DQ.cs is a core component of the EDI (Electronic Data Interchange) functionality within a larger software system, specifically for generating and managing requests related to the EDI 814 transaction set, which is associated with service enrollment and updates for utilities. 

This class handles the construction of the EDI request body including customer information, service provider details, and billing specifics based on the service type (electricity or natural gas). It also defines how to collect reasons for the transaction if needed, and it suggests dependencies on various business objects, including ServiceTransaction, Charge Plans, and UsageCharges, along with commodity and billing type handling. 

Overall, it plays a vital role in ensuring that utility-related transactions are processed correctly according to EDI standards for the relevant commodity types and their specific requirements.


file name is AssemblyInfo.cs, 
file path is: Eroms_Sorted/Edi/EdiGenerator/Properties/AssemblyInfo.cs, 
filesummary is: The file AssemblyInfo.cs is a configuration file that provides metadata about the assembly, such as its compliance and visibility settings. It includes attributes for reliability contracts and interop services, which are essential for defining how the assembly interacts with other components. This file does not contain core business logic or features.


file name is EdiElement.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/EdiElement.cs, 
filesummary is: The file EdiElement.cs is a core component of an EDI (Electronic Data Interchange) framework, defining the EdiElement class which inherits from EdiObject. This class encapsulates properties such as maximum/minimum length, padding character, value validation, and possible values. It implements validation logic for various data types, ensuring that EDI elements adhere to specified rules, and may depend on enumerations like EdiValueType and external validation helpers.


file name is GlobalSuppressions.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/GlobalSuppressions.cs, 
filesummary is: The file GlobalSuppressions.cs is intended for code analysis, specifically to maintain suppression messages linked to specific code issues within the project. It contains a series of SuppressMessage attributes that allow specific naming conventions and design warnings to be ignored at the project level, helping to keep the codebase clean from unnecessary warnings.

This file does not contain any core business logic or significant features; rather, it serves as a configuration file for improving code quality and maintaining naming standards.


file name is Resource.Designer.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Resource.Designer.cs, 
filesummary is: The file is an auto-generated resource descriptor used for managing localized strings within the EDI (Electronic Data Interchange) context of the EPSolutions software. It does not contain core business logic but provides essential error messages and prompts related to data formatting for EDI processes. 

This file supports the localization features of the application by providing strings that can be used across different cultures, ensuring proper user guidance during data handling.


file name is EdiMessage.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/EdiMessage.cs, 
filesummary is: The file EdiMessage.cs defines an abstract class EdiMessage within the EPSolutions Empower EDI framework, which is responsible for managing electronic data interchange (EDI) messages. It contains constants, properties, and methods to handle various EDI segments, define segment separators, and facilitate the creation of XML metadata for messages. This class presumably serves as a foundational element in a larger codebase focused on EDI functionalities and may depend on other EDI segment classes and libraries for complete operations.


file name is EdiObject.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/EdiObject.cs, 
filesummary is: The file EdiObject.cs is an abstract class defining the core structure and operations for handling Electronic Data Interchange (EDI) objects within the EPSolutions Empower framework. It includes properties such as Name, Required, and IncomingDataString, and provides methods for data validation like SplitData, ConvertToDate, and ConvertToDateTime. This class acts as a base for other EDI-related classes, establishing essential functionalities that may depend on other components within the codebase such as resource management for exceptions and potentially database interactions for validating incoming EDI messages.


file name is EdiSegment.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/EdiSegment.cs, 
filesummary is: The file EdiSegment.cs defines an abstract class EdiSegment that serves as a foundational component for processing Electronic Data Interchange (EDI) segments. It captures properties such as segment type, message, incoming and outgoing EDI elements, along with their validation mechanisms. This class is likely part of a larger EDI parsing framework and depends on related classes and enums such as EdiMessage, EdiElement, and SegmentType for its functionality.


file name is EdiEnum.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/EdiEnum.cs, 
filesummary is: The file EdiEnum.cs is part of the EPSolutions.Empower.Edi.EdiBase namespace and contains a series of enumerations representing various types and classifications relevant to Electronic Data Interchange (EDI). It defines pad types, segment types, positions, reference types, measurement types, and allowed EDI value types essential for handling EDI transactions.

The enums serve as fundamental components for ensuring standardized data representation and communication across different EDI formats, enhancing clarity and functionality within the broader EDI processing codebase. These definitions may depend on or interact with other parts of the codebase that handle EDI transactions or data processing routines.


file name is IEdiObject.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Interfaces/IEdiObject.cs, 
filesummary is: The file IEdiObject.cs defines an interface for EDI (Electronic Data Interchange) objects within the EPSolutions.Empower.Edi framework. It establishes properties and methods crucial for processing incoming EDI data, such as handling data strings and validating errors. This interface may serve as a blueprint for various concrete implementations that interact with EDI data, indicating potential dependencies on classes that implement this interface.


file name is IEdiMessage.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Interfaces/IEdiMessage.cs, 
filesummary is: The file IEdiMessage.cs defines an interface related to EDI (Electronic Data Interchange) message handling in the EPSolutions.Empower framework. It outlines various properties and methods for managing EDI segments, such as adding segments, retrieving segment counts, and accessing specific segment types, which are crucial for the EDI processing functionality. This interface serves as a contract for classes that will implement EDI message functionalities, ensuring they provide the necessary logic for handling different EDI segments and their relationships.


file name is SegmentAMT.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentAMT.cs, 
filesummary is: The file SegmentAMT.cs defines a class SegmentAmt that extends the functionalities of EdiSegment, specifically managing financial amounts in EDI messages. It establishes a structure for handling incoming EDI data elements and ensures a minimum requirement of data elements is met. The class relies on the EdiMessage class and uses EdiElement instances to store relevant data, making it essential for encoding and processing financial transaction information.


file name is SegmentAK1.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentAK1.cs, 
filesummary is: The file SegmentAK1.cs defines a class SegmentAK1, which is part of an EDI (Electronic Data Interchange) framework interface, specifically focusing on the processing of the AK1 segment. It inherits from EdiSegment and manages elements like AK101 and AK102, which are critical for handling specific EDI data. The class relies on the EdiMessage class and utilizes methods for loading and formatting EDI data, ensuring proper integration within the broader EDI system.

Key features include:
- The class manages the minimum required elements for the AK1 segment.
- It uses EdiElement instances (AK101, AK102) to hold segment data.
- It implements methods to load and organize incoming EDI data.

Dependencies include the EdiMessage class for message context and the EdiElement class for segment elements.


file name is SegmentAK2.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentAK2.cs, 
filesummary is: The file SegmentAK2.cs is a class definition for the SegmentAK2 within an Electronic Data Interchange (EDI) framework. It extends the EdiSegment class, handling specific EDI segment data including mandatory elements and associated sub-segments AK3 and AK5. The class functionalities include loading EDI data, managing incoming elements, and converting the segment to a string format for processing.

Key features include:
- Parsing and loading EDI data with a minimum of three required elements.
- Supporting linked segments (AK3 and AK5) to enhance the EDI message structure.
- Dependencies on EdiMessage and other EdiElement instances for handling data.


file name is SegmentAK3.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentAK3.cs, 
filesummary is: The file SegmentAK3.cs is part of a larger codebase focused on Electronic Data Interchange (EDI) functionalities within the EPSolutions.Empower framework. It defines the SegmentAK3 class which represents a specific EDI segment, encapsulating related elements and providing methods for loading, managing, and stringifying segment data.

The SegmentAK3 class includes properties for EDI elements AK301 to AK304 and manages their values through the Load method. It also maintains a collection of associated AK4 segments, indicating a potential relationship with SegmentAK4 classes. This file likely interacts with others in the EDI module, possibly including EdiMessage and EdiElement, enabling structured processing of EDI messages with required data elements.


file name is SegmentTRN.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentTRN.cs, 
filesummary is: The file SegmentTRN.cs defines a class SegmentTrn that is part of an EDI (Electronic Data Interchange) message processing framework. This class is responsible for managing specific segments of EDI messages, particularly the TRN (Transaction) segment. It contains properties for two key elements (TRN01 and TRN02) and methods to load, set, and represent these elements as strings.

The SegmentTrn class relies on a parent class EdiSegment and interacts with EdiMessage, indicating that it is a component of a larger EDI processing system. This system likely deals with transactions, requiring robust handling of EDI data formats and elements. Dependencies may include other EDI segment classes, message structure definitions, and potentially databases for storing or processing transaction data.


file name is SegmentMEA.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentMEA.cs, 
filesummary is: The SegmentMEA.cs file defines a class `SegmentMea` that is part of an EDI (Electronic Data Interchange) processing system. This class encapsulates the elements of a specific EDI segment, MEA, and includes methods for loading element data from EDI messages and managing the incoming and outgoing EDI elements.

Key features include:
- The class inherits from `EdiSegment`, indicating that it is part of a broader framework for handling EDI segments.
- It defines multiple elements (MEA01 to MEA07) relevant to the MEA segment.
- There is a critical note within the constructor suggesting an incorrect minimum elements requirement, which may warrant further attention.
- The methods `Load` and `SetIncomingEdiElements` handle the processing of incoming EDI data and managing the elements stored within the EDI structure.

Dependencies may include other components of EDI handling in the larger system, such as the `EdiMessage` class and the mechanisms for manipulating `EdiElement`.


file name is SegmentITD.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentITD.cs, 
filesummary is: The file SegmentITD.cs defines a class that represents an EDI (Electronic Data Interchange) segment for the Texas region. It inherits from the EdiSegment class and encapsulates specific EDI elements (ITD01 to ITD06) associated with invoice terms. The class includes methods to load incoming data, set elements, and output the segment as a string, indicating it plays a critical role in managing invoice data exchange.

Key features include:
- A minimum of 7 required elements.
- Methods to populate and retrieve data related to invoice terms.
- Dependencies on the parent class EdiSegment and potentially external EDI data formats.


file name is SegmentBPT.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentBPT.cs, 
filesummary is: The file SegmentBPT.cs is part of the EPSolutions.Empower.Edi.EdiBase namespace and represents an EDI (Electronic Data Interchange) segment specifically for the BPT type. It encapsulates various elements related to this segment, such as BPT01 to BPT09, and includes functionality for loading, managing, and retrieving data associated with these elements. This class also depends on other components like SegmentMea and SegmentDtm for additional functionalities related to measurements and date-time values, suggesting it plays a crucial role in assembling and interpreting EDI messages within the broader application's context.


file name is SegmentPTD.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentPTD.cs, 
filesummary is: The file SegmentPTD.cs defines a class representing an EDI (Electronic Data Interchange) segment called "PTD". This class inherits from the EdiSegment base class and includes properties for various EDI elements, methods for loading EDI data, and handling collections of related segments such as dates, references, and quantities. It facilitates the extraction and manipulation of specific data elements from EDI messages, making it integral to the larger EDI processing codebase. The class relies on the EdiMessage class and is associated with segment types, likely utilizing functionality from other segments like SegmentDtm, SegmentRef, and SegmentQty, which represent different parts of an EDI transaction.


file name is SegmentASI.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentASI.cs, 
filesummary is: The file `SegmentASI.cs` is part of the EDI (Electronic Data Interchange) processing system within the EPSolutions.Empower namespace. It defines the `SegmentAsi` class, which extends the `EdiSegment` base class to handle specific EDI segments related to the ASI (Additional Segment Information). 

The key features of this file include:
- It manages four elements of EDI data (ASI01, ASI02, ASI03), with a minimum requirement of four elements for proper parsing.
- It contains methods to load EDI data into these elements, set incoming elements, and represent the segment as a string.
- The class is likely dependent on other parts of the EDI framework, especially the `EdiMessage`, `EdiElement`, and the `EdiSegment` base class which would influence how data is structured and processed. 

This file is essential for the EDI processing functionality, enabling integration between different systems through standardized data exchange.


file name is SegmentAK5.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentAK5.cs, 
filesummary is: The file SegmentAK5.cs defines a class that represents the AK5 segment of an EDI (Electronic Data Interchange) message within the EPSolutions Empower EDI framework. It is responsible for handling specific elements of the segment, including validation of required elements and processing incoming EDI data.

The core features include:
- Properties for elements AK501 to AK506, encapsulating the data structure of an AK5 segment.
- Methods for loading EDI data and setting incoming EDI elements, which ensure proper handling and organization of data.
This class likely interacts with other classes in the EDI processing system, such as EdiMessage and EdiElement, forming part of a larger framework that processes EDI transactions.


file name is SegmentSLN.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentSLN.cs, 
filesummary is: The file SegmentSLN.cs defines the SegmentSln class, which is a specific segment in the EDI (Electronic Data Interchange) message context. This class inherits from EdiSegment and provides properties for various SLN elements (SLN01 to SLN28), encapsulating functionality for manipulating EDI data. It manages references and date segments, and includes methods for loading data and retrieving specific referenced or date values, which indicates its role in handling EDI data structures within the broader system, likely in retail or logistics settings.

Key features include:
- Represents SLN segment of an EDI message.
- Manages collections of related segment types (Dtm, Ref, Sac, Txi).
- Provides methods for data loading and retrieval.

Dependencies may include references to other segment types (SegmentDtm, SegmentRef, SegmentSac, SegmentTxi) which represent different components of the EDI message structure.


file name is SegmentSE.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentSE.cs, 
filesummary is: The file SegmentSE.cs defines a class that represents a segment of Electronic Data Interchange (EDI) messages, specifically the SE segment, which is part of the EDI transaction structure. This class inherits from EdiSegment and manages properties related to the segment, including the number of data segments and a control number. The methods handle loading EDI data and managing incoming elements, indicating its role in processing EDI transactions, making it dependent on the broader EDI message handling framework and related classes.


file name is SegmentBHT.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentBHT.cs, 
filesummary is: The file SegmentBHT.cs defines a class SegmentBht, which is a specialized component of the EDI (Electronic Data Interchange) message processing system. This class inherits from EdiSegment and represents a specific segment in an EDI transaction, that includes defined elements BHT01 through BHT04. It provides functionality to load segment data, maintain a list of incoming EDI elements, and convert the object to a string for output.

Key features include:
- Implementation of EDI segment handling with required elements.
- Methods for loading data from a string and managing internal elements.
- Dependencies on the EdiMessage class for functionality and EdiElement for each segment element.

The class operates within a larger context of EDI processing, likely tied to specific industry transactions, and can affect data interoperability with other systems.


file name is SegmentTXI.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentTXI.cs, 
filesummary is: The file SegmentTXI.cs is part of an Electronic Data Interchange (EDI) implementation within the EPSolutions.Empower framework. It defines the SegmentTXI class, which represents a specific EDI segment type (TXI) and manages the related EDI elements, such as TXI01 through TXI10.

The class inherits from EdiSegment and includes methods to load EDI data, set incoming EDI elements, and convert the segment to a string representation. It requires a minimum of 11 elements and manages data related to an EDI message, depending on other components in the framework such as EdiMessage and EdiElement.


file name is SegmentIT1.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentIT1.cs, 
filesummary is: The file SegmentIT1.cs is a C# class defining the SegmentIT1 segment for EDI (Electronic Data Interchange) messages. It extends the EdiSegment base class to represent a specific segment type (IT1) in an EDI message, specifically used for item details.

Key features include the management of multiple EDI elements (IT101 to IT125) and methods to load data, manage references, and handle date/time segments. It has dependencies on types such as EdiMessage, EdiElement, SegmentDtm, SegmentRef, SegmentSln, and SegmentTxi, which likely come from the same namespace or related libraries, indicating this class is part of a larger EDI processing framework.


file name is SegmentOTI.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentOTI.cs, 
filesummary is: The file SegmentOTI.cs defines a class representing a specific EDI (Electronic Data Interchange) segment, called "SegmentOti." It inherits from a base class, EdiSegment, and includes methods for loading data from EDI strings and managing required elements for processing.

The SegmentOti class specifically handles 32 elements from the EDI data: OTI01 to OTI31, with the first four OTI elements being required. It integrates core functionality to parse incoming EDI data and prepare outgoing elements, facilitating EDI transactions in systems that utilize this feature. The EDI message context and its element separator are essential for the proper functioning of this class.


file name is SegmentST.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentST.cs, 
filesummary is: The file SegmentST.cs is part of an EDI (Electronic Data Interchange) processing application, specifically within the context of managing and processing EDI segments. The SegmentST class defines specific elements like Identifier Code and Control Number, essential for the EDI message structure. It depends on the base class EdiSegment and interacts with an EdiMessage object, indicating its role in managing EDI data amidst other segments.


file name is SegmentMTX.cs, 
file path is: Eroms_Sorted/Edi/EdiBase/Texas/SegmentMTX.cs, 
filesummary is: This file is part of the EPSolutions Empower EDI (Electronic Data Interchange) framework and defines the SegmentMtx class, which is responsible for handling the MTX segment in EDI messages. It contains methods to load and manage specific elements (MTX01, MTX02, MTX03) associated with this segment type. The class relies on the EdiMessage class and is designed to process and represent"""


import anthropic
import os


max_tokens = 160000 # lower this post test



api_key = os.getenv('ANTHROPIC_API_KEY')
client = anthropic.Anthropic(api_key=api_key)

count = client.messages.count_tokens(
        model="claude-3-5-sonnet-20241022",

        messages=[{"role": "user", "content": text}]
    )
old_count = count.input_tokens
print(f"old text count {old_count}")


def anthropic_counter(text, max_tokens=160000, model="claude-3-5-sonnet-20241022"):
    """Use binary search to efficiently truncate text to fit token limit."""
    
    # Initial check
    count = client.messages.count_tokens(
        model=model,
        messages=[{"role": "user", "content": text}]
    )
    
    if count.input_tokens <= max_tokens:
        return text
    
    # Binary search for the right length
    low = 0
    high = len(text)
    
    while high - low > 5000:  # Stop when we're close enough
        mid = (low + high) // 2
        truncated = text[:mid]
        
        count = client.messages.count_tokens(
            model=model,
            messages=[{"role": "user", "content": truncated}]
        )
        
        if count.input_tokens <= max_tokens:
            low = mid
        else:
            high = mid
    
    # Fine-tune the final result
    while True:
        truncated = text[:high]
        count = client.messages.count_tokens(
            model=model,
            messages=[{"role": "user", "content": truncated}]
        )
        
        if count.input_tokens <= max_tokens:
            return truncated
        
        high -= 5000  # Reduce by 5000 characters at a time until we fit



new_text = anthropic_counter(text = text)

count = client.messages.count_tokens(
        model="claude-3-5-sonnet-20241022",

        messages=[{"role": "user", "content": new_text}]
    )
new_count = count.input_tokens
print(f"old text count {new_count}")


